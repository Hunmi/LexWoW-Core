	// this is spell id to be able to click on item to trigger this id : 41616
//Free to take spell ids : 4121,4122,4123,4124,4125,4126,4127,4128,4129,4145,4151,4155,4156,4157,4158,4161,4162,4163,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4203,4204,4205,4206,4207,4208,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4263,4264,4265,4266,4267,4269,4271,4272,4273,4274,4275,4276,4277,4278,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4313,4314,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4353,4355,4356,4357,4358,4359,4360,4361,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4422,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4437,4438,4439,4440,4441,4442,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4494,4495,4496,4497,4498,4499,4501,4502,4503,4509,4510,4512,4513,4515,4516,4517,4518,4519,4521,4522,4523,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4540,4541,4542,4543,4544,4545,4546,4547,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4652,4653,4654,4655,4656,4657,4658,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,4707,4708,4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4742,4743,4744,4745,4746,4747,4748,4749,4750,4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4784,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797,4798,4799,4800,4802,4803,4804,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4850,4851,4852,4853,4854,4855,4856,4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4871,4872,4873,4874,4875,4876,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4939,4943,4944,4949,4952,4953,4956,4957,4958,4959,4963,4964,4965,4966,4967,4968,4969,4973,4988,4989,4990,4991,4992,4993,4994,4995,
//get new ids for auras
//select id,name,description from dbc_spell where spellIconID=1 and id not in (18,22,26,47,68,111,260,261);

	//the cases will handle item entrys that will probably link to a spell or take instant action
	//add 5 new vanity pets if possible
	case 21247:
	{
		if( !p_caster )
			return;
		uint32 cnt = dbcSkillLineSpell.GetNumRows();
		uint32 added=0;
		for(uint32 i=0; i < cnt; i++)
		{
			skilllinespell * spsk = dbcSkillLineSpell.LookupRow( i );
			if( spsk && spsk->skillId == SKILL_COMPANIONS )
			{
				SpellEntry *sp = dbcSpell.LookupEntryForced( spsk->spellId );
				if( !sp )
					continue;
				if( p_caster->HasSpell( spsk->spellId ) )
					continue;
				p_caster->addSpell( spsk->spellId );
				added++;
				if( added == 5 )
					break;
			}
		}
	}break;
	//gender change
	case 133460:
		{
			p_caster->BackupRestoreOnceRaceGenderStyle();

			int8 NewGender = 1 - p_caster->getGender();
			p_caster->SetUInt32Value( PLAYER_BYTES, 0 );
			p_caster->SetByte(PLAYER_BYTES_2, 0, 0 );
			uint32 OldDisplay = p_caster->GetUInt32Value(UNIT_FIELD_DISPLAYID) - p_caster->getGender();
			uint32 NewDisplay = OldDisplay + NewGender;
			if( p_caster->getRace() == 10 )	//blod elf
			{
				OldDisplay = p_caster->GetUInt32Value(UNIT_FIELD_DISPLAYID) + p_caster->getGender();
				NewDisplay = OldDisplay - NewGender;
			}
			p_caster->SetUInt32Value(UNIT_FIELD_DISPLAYID, NewDisplay );
			p_caster->SetUInt32Value(UNIT_FIELD_NATIVEDISPLAYID, NewDisplay );
			p_caster->setGender( NewGender );
/*			if( p_caster->GetUInt32Value(UNIT_FIELD_DISPLAYID) != p_caster->GetUInt32Value(UNIT_FIELD_NATIVEDISPLAYID) )
			{
				for( uint32 i=PLAYER_VISIBLE_ITEM_1_ENTRYID;i<PLAYER_VISIBLE_ITEM_19_ENTRYID;i+=2 )
					p_caster->SetUpdateMask( i );
			}*/
		}break;
	//race change
	case 133461:
		{
			p_caster->BackupRestoreOnceRaceGenderStyle();

			static char AllowedRaces[2][20] = 
			{
//				{1,3,4,7,11,22,23,12,13,14,15,16,17,18,19,20,21,0},
//				{2,5,6,8, 9,10,12,13,14,15,16,17,18,19,20,21,0}
				{1,3,4,7,11,22,0},
				{2,5,6,8, 9,10,0}
			};
			static uint32 RaceDisplays[] = { 1,49,2,51,3,53,4,55,5,57,6,59,7,1563,8,1478,9,6894,10,15476,11,16125,12,16980,13,17402,14,17576,15,17578,16,21685,17,21780,18,21963,19,26316,20,26871,21,26873,22,29422,23,49,24,38551,25,38551,26,38551, 0, 0 };

			int8 MyTeam = p_caster->GetTeamInitial();
			int8 CurRace = p_caster->getRace();
			//find next race
			uint32 i=0;
			for( ;i<20 && AllowedRaces[MyTeam][i] != 0; i++)
				if( AllowedRaces[MyTeam][i] == CurRace )
					break;
			int8 NextRace;
			if( AllowedRaces[MyTeam][i] == CurRace && AllowedRaces[MyTeam][i+1] != 0 )
				NextRace = AllowedRaces[MyTeam][i+1];
			else
				NextRace = AllowedRaces[MyTeam][0];
			p_caster->SetUInt32Value( PLAYER_BYTES, 0 );
			p_caster->SetByte( PLAYER_BYTES_2, 0, 0 );
			p_caster->setRace( NextRace );
			p_caster->BroadcastMessage( "Setting new race to %d", NextRace );
			for( i=0;i<60 && RaceDisplays[i] != 0; i+=2)
				if( RaceDisplays[i] == NextRace )
				{
					uint32 NewDisplay = RaceDisplays[i+1] + p_caster->getGender();
					if( p_caster->getRace() == 10 )	//blod elf
					{
						NewDisplay = RaceDisplays[i+1] - p_caster->getGender();
					}
					p_caster->SetUInt32Value(UNIT_FIELD_DISPLAYID, NewDisplay );
					p_caster->SetUInt32Value(UNIT_FIELD_NATIVEDISPLAYID, NewDisplay );
/*					if( p_caster->GetUInt32Value(UNIT_FIELD_DISPLAYID) != p_caster->GetUInt32Value(UNIT_FIELD_NATIVEDISPLAYID) )
					{
						for( uint32 i=PLAYER_VISIBLE_ITEM_1_ENTRYID;i<PLAYER_VISIBLE_ITEM_19_ENTRYID;i+=2 )
							p_caster->SetUpdateMask( i );
					} */
				}
		}break;
	//random char look
	case 133462:
	case 133463:
	case 133464:
		{
			p_caster->BackupRestoreOnceRaceGenderStyle();

			// get alliance race IDs : select col_0 from chrracesdbccsv where col_13=0;
			// 1,3,4,7,11,22,23,25
			// get horde race IDs : select col_0 from chrracesdbccsv where col_13=1;
			// 2,5,6,8,9,10,26
			// neutrals : select col_0 from chrracesdbccsv where col_13=2;
			// 12,13,14,15,16,17,18,19,20,21,24
			enum TextureTypes
			{
				TEXTURE_SKIN		= 0,
				TEXTURE_FACE		= 1,
				TEXTURE_FACIAL_HAIR = 2,
				TEXTURE_SCALP_HAIR	= 3,
				TEXTURE_PELVIS_SKIN	= 4,
			};
			static char AllowedRaces[2][20] = 
			{
				{1,3,4,7,11,22,23,25,12,13,14,15,16,17,18,19,20,21,24,0},
				{2,5,6,8,9,10,26,12,13,14,15,16,17,18,19,20,21,24,0}
			};
			static uint32 RaceDisplays[] = { 1,49,2,51,3,53,4,55,5,57,6,59,7,1563,8,1478,9,6894,10,15476,11,16125,12,16980,13,17402,14,17576,15,17578,16,21685,17,21780,18,21963,19,26316,20,26871,21,26873,22,29422,23,49,24,38551,25,38551,26,38551, 0, 0 };

			int8 MyTeam = p_caster->GetTeamInitial();
			int8 FilterGender = p_caster->getGender();
			int8 FilterRace = p_caster->getRace();
			int8 FilterTextureType = TEXTURE_SCALP_HAIR; // could not make TEXTURE_SKIN and TEXTURE_FACE work
			if( i_caster->GetEntry() == 133462 )
				FilterTextureType = TEXTURE_SCALP_HAIR;
			else if( i_caster->GetEntry() == 133463 )
				FilterTextureType = TEXTURE_FACIAL_HAIR;
			else if( i_caster->GetEntry() == 133464 )
				FilterTextureType = TEXTURE_FACE;

//			uint32 ExtensionIndex = crc32((const unsigned char*)"Random CharSkin extension", (unsigned int)strlen("Random CharSkin extension"));
			//we can make multiple items to iterate in multiple places of the DBC : ex change race, change gender
//			ExtensionIndex += i_caster->GetEntry();
//			int64 *LastSkinIterator = p_caster->GetCreateIn64Extension( ExtensionIndex );
			int32 RowCount = dbcCharSections.GetNumRows();
			bool FoundOne = false;
//			for(uint32 x=*LastSkinIterator; x < *LastSkinIterator + RowCount; x++)
			for(int32 x=0; x < RowCount; x++)	//11k values
			{
				int32 Row = x % RowCount;
				CharSectionsEntry *cse = dbcCharSections.LookupRow( Row );
				//check if our faction is compatible with this
				if( cse->Texture0 == NULL || cse->Texture0[0] == 0 )
					continue;
				if( cse->Race != FilterRace )
					continue;
				if( cse->Gender != FilterGender )
					continue;
				if( cse->TextureType != FilterTextureType )
					continue;

				if( FilterTextureType == TEXTURE_SKIN )
				{
					if( p_caster->GetByte( PLAYER_BYTES, 0 ) >= cse->VariationId )
						continue;
					p_caster->SetByte( PLAYER_BYTES, 0, cse->VariationId );
				}
				else if( FilterTextureType == TEXTURE_FACE )
				{
					if( p_caster->GetByte( PLAYER_BYTES, 1 ) >= cse->VariationId )
						continue;
					p_caster->SetByte( PLAYER_BYTES, 1, cse->VariationId );
				}
				else if( FilterTextureType == TEXTURE_FACIAL_HAIR )
				{
					if( p_caster->GetByte( PLAYER_BYTES_2, 0 ) >= cse->VariationId )
						continue;
					p_caster->SetByte( PLAYER_BYTES_2, 0, cse->VariationId );
				}
				else if( FilterTextureType == TEXTURE_SCALP_HAIR )
				{
					if( p_caster->GetByte( PLAYER_BYTES, 2 ) >= cse->VariationId )
						continue;
					p_caster->SetByte( PLAYER_BYTES, 2, cse->VariationId );
				}

				FoundOne = true;
				break;
			}
			if( FoundOne == false )
			{
				if( FilterTextureType == TEXTURE_SKIN )
					p_caster->SetByte(PLAYER_BYTES, 0, 0 );
				else if( FilterTextureType == TEXTURE_FACE )
					p_caster->SetByte(PLAYER_BYTES, 1, 0 );
				else if( FilterTextureType == TEXTURE_FACIAL_HAIR )
					p_caster->SetByte( PLAYER_BYTES_2, 0, 0 );
				else if( FilterTextureType == TEXTURE_SCALP_HAIR )
					p_caster->SetByte( PLAYER_BYTES, 2, 0 );			
			}
		}break;
	//add a random weapon enchant look
//insert into `items` (`entry`, `quality`, `flags`, `flags2`, `buyprice`, `sellprice`, `inventorytype`, `allowableclass`, `allowablerace`, `itemlevel`, `requiredlevel`, `requiredskill`, `requiredskillrank`, `requiredspell`, `RequiredPlayerRank1`, `RequiredPlayerRank2`, `RequiredFaction`, `RequiredFactionStanding`, `maxcount_overall`, `maxcount`, `containerslots`, `stat_type1`, `stat_type2`, `stat_type3`, `stat_type4`, `stat_type5`, `stat_type6`, `stat_type7`, `stat_type8`, `stat_type9`, `stat_type10`, `stat_value1`, `stat_value2`, `stat_value3`, `stat_value4`, `stat_value5`, `stat_value6`, `stat_value7`, `stat_value8`, `stat_value9`, `stat_value10`, `stat_unk1_1`, `stat_unk1_2`, `stat_unk1_3`, `stat_unk1_4`, `stat_unk1_5`, `stat_unk1_6`, `stat_unk1_7`, `stat_unk1_8`, `stat_unk1_9`, `stat_unk1_10`, `stat_unk2_1`, `stat_unk2_2`, `stat_unk2_3`, `stat_unk2_4`, `stat_unk2_5`, `stat_unk2_6`, `stat_unk2_7`, `stat_unk2_8`, `stat_unk2_9`, `stat_unk2_10`, `ScaledStatsDistributionId`, `dmg_type1`, `delay`, `range`, `spellid_1`, `spellid_2`, `spellid_3`, `spellid_4`, `spellid_5`, `spelltrigger_1`, `spelltrigger_2`, `spelltrigger_3`, `spelltrigger_4`, `spelltrigger_5`, `spellcharges_1`, `spellcharges_2`, `spellcharges_3`, `spellcharges_4`, `spellcharges_5`, `spellcooldown_1`, `spellcooldown_2`, `spellcooldown_3`, `spellcooldown_4`, `spellcooldown_5`, `spellcategory_1`, `spellcategory_2`, `spellcategory_3`, `spellcategory_4`, `spellcategory_5`, `spellcategorycooldown_1`, `spellcategorycooldown_2`, `spellcategorycooldown_3`, `spellcategorycooldown_4`, `spellcategorycooldown_5`, `bonding`, `name1`, `name2`, `name3`, `name4`, `description`, `page_id`, `page_language`, `page_material`, `quest_id`, `lock_id`, `lock_material`, `sheathID`, `randomprop`, `randomsuffix`, `itemset`, `maxdurability`, `ZoneNameID`, `mapid`, `bagfamily`, `totemcategory`, `socket_color_1`, `socket_color_2`, `socket_color_3`, `socket_content_1`, `socket_content_2`, `socket_content_3`, `socket_bonus`, `gemproperties`, `armordamagemodifier`, `existingduration`, `ItemLimitCategoryId`, `holidayid`, `statscalingfactor`, `field_130`, `field_131`, `class`, `subclass`, `DisplayId`) values('133456','4','0','8192','0','0','0','-1','-1','60','60','0','0','0','0','0','0','0','0','20','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','41616','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-1','-1','-1','-1','-1','0','0','0','0','0','-1','-1','-1','-1','-1','1','Random Look Main Weapon Enchant','0','0','0','','0','0','0','0','0','7','1','0','0','0','0','0','0','16','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','4','2616');
//insert into `items` (`entry`, `quality`, `flags`, `flags2`, `buyprice`, `sellprice`, `inventorytype`, `allowableclass`, `allowablerace`, `itemlevel`, `requiredlevel`, `requiredskill`, `requiredskillrank`, `requiredspell`, `RequiredPlayerRank1`, `RequiredPlayerRank2`, `RequiredFaction`, `RequiredFactionStanding`, `maxcount_overall`, `maxcount`, `containerslots`, `stat_type1`, `stat_type2`, `stat_type3`, `stat_type4`, `stat_type5`, `stat_type6`, `stat_type7`, `stat_type8`, `stat_type9`, `stat_type10`, `stat_value1`, `stat_value2`, `stat_value3`, `stat_value4`, `stat_value5`, `stat_value6`, `stat_value7`, `stat_value8`, `stat_value9`, `stat_value10`, `stat_unk1_1`, `stat_unk1_2`, `stat_unk1_3`, `stat_unk1_4`, `stat_unk1_5`, `stat_unk1_6`, `stat_unk1_7`, `stat_unk1_8`, `stat_unk1_9`, `stat_unk1_10`, `stat_unk2_1`, `stat_unk2_2`, `stat_unk2_3`, `stat_unk2_4`, `stat_unk2_5`, `stat_unk2_6`, `stat_unk2_7`, `stat_unk2_8`, `stat_unk2_9`, `stat_unk2_10`, `ScaledStatsDistributionId`, `dmg_type1`, `delay`, `range`, `spellid_1`, `spellid_2`, `spellid_3`, `spellid_4`, `spellid_5`, `spelltrigger_1`, `spelltrigger_2`, `spelltrigger_3`, `spelltrigger_4`, `spelltrigger_5`, `spellcharges_1`, `spellcharges_2`, `spellcharges_3`, `spellcharges_4`, `spellcharges_5`, `spellcooldown_1`, `spellcooldown_2`, `spellcooldown_3`, `spellcooldown_4`, `spellcooldown_5`, `spellcategory_1`, `spellcategory_2`, `spellcategory_3`, `spellcategory_4`, `spellcategory_5`, `spellcategorycooldown_1`, `spellcategorycooldown_2`, `spellcategorycooldown_3`, `spellcategorycooldown_4`, `spellcategorycooldown_5`, `bonding`, `name1`, `name2`, `name3`, `name4`, `description`, `page_id`, `page_language`, `page_material`, `quest_id`, `lock_id`, `lock_material`, `sheathID`, `randomprop`, `randomsuffix`, `itemset`, `maxdurability`, `ZoneNameID`, `mapid`, `bagfamily`, `totemcategory`, `socket_color_1`, `socket_color_2`, `socket_color_3`, `socket_content_1`, `socket_content_2`, `socket_content_3`, `socket_bonus`, `gemproperties`, `armordamagemodifier`, `existingduration`, `ItemLimitCategoryId`, `holidayid`, `statscalingfactor`, `field_130`, `field_131`, `class`, `subclass`, `DisplayId`) values('133457','4','0','8192','0','0','0','-1','-1','60','60','0','0','0','0','0','0','0','0','20','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','41616','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-1','-1','-1','-1','-1','0','0','0','0','0','-1','-1','-1','-1','-1','1','Random Look Offhand Weapon Enchant','0','0','0','','0','0','0','0','0','7','1','0','0','0','0','0','0','16','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','4','2616');
	case 133456:	//main
	case 133457:	//offhand
	{
		if( !p_caster )
			return;
		uint32 ExtensionIndex;
		uint32 PlayerIndex;
		if( item_entry == 133456 )
		{
			ExtensionIndex = EXTENSION_ID_WEAPON_MAINHAND_CUSTOM_ENCHANT_LOOK;
			PlayerIndex = PLAYER_VISIBLE_ITEM_16_ENCHANTMENT;
		}
		else
		{
			ExtensionIndex = EXTENSION_ID_WEAPON_OFFHAND_CUSTOM_ENCHANT_LOOK;
			PlayerIndex = PLAYER_VISIBLE_ITEM_17_ENCHANTMENT;
		}
		int64 *BuffIndex = p_caster->GetCreateIn64Extension( ExtensionIndex );
		static uint32 BuffIds[] = { 2,3,6,7,12,25,26,255,283,425,723,803,1023,1103,1894,1899,2343,2443,2563,2671,2672,2673,2674,2675,3225,3239,3273,3322,3345,3869,3870,3883,4066,4067,4074,4097,4098,4099,0 };
		uint32 CurBuff = BuffIds[ *BuffIndex ];
		if( CurBuff == 0 )
		{
			*BuffIndex = 0;
			CurBuff = BuffIds[ *BuffIndex ];
		}
		*BuffIndex = *BuffIndex + 1;
		p_caster->SetUInt32Value( PlayerIndex, CurBuff );
	}break;
	//add a random buff
	case 133459:
	{
		if( !p_caster )
			return;
		uint32 ExtensionIndex = crc32((const unsigned char*)"Random buff extension", (unsigned int)strlen("Random buff extension"));
		ExtensionIndex += i_caster->GetGUID();
		int64 *BuffIndex = p_caster->GetCreateIn64Extension( ExtensionIndex );
		static uint32 BuffIds[] = { 1236,1237,1238,1239,1240,1242,1243,1244,1245,1246,1247,1248,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,0 };
		uint32 CurBuff = BuffIds[ *BuffIndex ];
		if( CurBuff == 0 )
		{
			*BuffIndex = 0;
			CurBuff = BuffIds[ *BuffIndex ];
		}
		uint32 RemoveCount = p_caster->RemoveAura( CurBuff, 0, AURA_SEARCH_ALL, 1 );
		*BuffIndex = *BuffIndex + 1;
		if( CurBuff == 0 )
		{
			*BuffIndex = 0;
			CurBuff = BuffIds[ *BuffIndex ];
		}
		CurBuff = BuffIds[ *BuffIndex ];
		p_caster->CastSpell( p_caster, CurBuff, true );
		{
			uint32 ClientId = CurBuff;
			SpellEntry *sp = dbcSpell.LookupEntryForced( CurBuff );
			if( sp )
				ClientId = sp->spell_id_client;
			p_caster->BroadcastMessage( "Casting visual aura %d - %d", CurBuff, ClientId );
		}
	}break;
	//add 5 new mounts if possible
	case 21246:
	{
		if( !p_caster )
			return;
		uint32 cnt = dbcSkillLineSpell.GetNumRows();
		uint32 added=0;
		for(uint32 i=0; i < cnt; i++)
		{
			skilllinespell * spsk = dbcSkillLineSpell.LookupRow( i );
			if( spsk && spsk->skillId == SKILL_MOUNTS )
			{
				SpellEntry *sp = dbcSpell.LookupEntryForced( spsk->spellId );
				if( !sp )
					continue;
				if( p_caster->HasSpell( spsk->spellId ) )
					continue;
				p_caster->addSpell( spsk->spellId );
				added++;
				if( added == 5 )
					break;
			}
		}
		p_caster->_RemoveSkillLine(SKILL_MOUNTS);
		p_caster->_AddSkillLine(SKILL_MOUNTS, 300, 300);
	}break;
	//Long Dong John - adds 5 new titles
	case 21159:
	{
		if( !p_caster )
			return;
		//get titles 1 by 1 and see which ones we have or not
		uint32 added=0;
		CharTitlesEntry *ce = NULL;
		for(uint32 x=0; x < dbcCharTitle.GetNumRows(); x++)
		{
			ce = dbcCharTitle.LookupRow(x);
			if( p_caster->HasKnownTitle( (RankTitles)ce->ID ) )
				continue;
			p_caster->SetKnownTitle( (RankTitles)ce->ID, true );
			added++;
			if( added == 5 )
				break;
		}
	}break;
	//pimp my ride
	case 12831:
	case 29188:
	case 21924:
	case 133458:
	{
		if( !p_caster )
			return;
		if( p_caster->m_bg )
		{
			p_caster->BroadcastMessage("Cannot be used inside BG");
			return;	//not while inside BG
		}
		if( p_caster->CombatStatus.IsInCombat() == true )
		{
			p_caster->BroadcastMessage("Cannot be used while in combat");
			return;	//not while inside BG
		}
		//cast charger aura on us
		p_caster->CastSpell( p_caster, 66906, true );
		//now pick a new mount display :)
		//select EffectMiscValue_1,"," from dbc_spell where EffectApplyAuraName_1=78
		//select male_displayid,"," from creature_names where entry in (..
		//CreatureDisplayInfo.dbc col_1 will point to CreatureModelData.dbc col_0
/*
select col_0,',' from CreatureDisplayInfodbccsv where 1
and col_0 not in ( 207,247,953,995,1166,2320,2326,2327,2328,2346,2402,2404,2405,2408,2409,2410,2736,2784,2785,2786,2787,4805,4806,4807,5228,6080,6442,6443,6444,6447,6448,6468,6469,6471,6472,6473,6474,6475,6476,6477,6478,6569,8469,9473,9474,9475,9476,9695,9714,9991,10426,10661,10662,10664,10666,10670,10671,10672,10718,10719,10720,10721,11641,12241,12242,12245,12246,14329,14330,14331,14332,14333,14334,14335,14337,14338,14339,14342,14343,14344,14346,14347,14348,14349,14372,14374,14375,14376,14377,14388,14554,14573,14574,14575,14576,14577,14578,14579,14582,14583,14584,14632,14776,14777,15289,15290,15672,15676,15679,15680,15681,15791,15902,16314,17063,17142,17158,17255,17694,17696,17697,17699,17700,17701,17703,17717,17718,17719,17720,17721,17722,17759,17890,17906,18164,18696,18697,18724,19085,19250,19296,19303,19375,19376,19377,19378,19478,19479,19480,19482,19483,19484,19869,19870,19871,19872,19873,19996,20344,20359,21073,21074,21075,21076,21077,21152,21155,21156,21157,21158,21268,21473,21520,21521,21522,21523,21524,21525,21939,21973,21974,22265,22350,22464,22471,22473,22474,22620,22630,22631,22719,22720,22724,23647,23656,23928,23952,24693,24725,24745,24757,24758,24913,25159,25279,25280,25335,25511,25593,25831,25832,25833,25835,25836,25870,25871,26691,27237,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27507,27525,27567,27659,27660,27785,27796,27818,27819,27820,27821,27913,27914,28040,28041,28042,28043,28044,28045,28053,28060,28061,28063,28064,28082,28108,28402,28417,28428,28556,28571,28605,28606,28607,28612,28888,28889,28890,28912,28918,28919,28953,28954,29043,29102,29130,29161,29255,29256,29257,29258,29259,29260,29261,29262,29283,29284,29344,29378,29379,29696,29754,29755,29794,29937,29938,30141,30175,30346,30366,30501,30518,30989,31007,31047,31154,31156,31367,31368,31721,31803,31837,31958,31992,34410,34956,35134,35135,35136,35249,35250,35551,35553,35740,35750,35751,35754,35755,35757,36022,36213,37138,37145,37159,37160,37231 )
and col_0 not in ( 284,4268,305,308,306,307,356,4270,358,359,16597,304,4269,4271,4272,4710,4780,4778,4777,4779,6074,6075,6076,6486,7322,7684,7687,7686,7689,7690,7706,7707,7703,7708,7709,7710,7711,7712,7713,7739,7749,9158,10179,10178,10180,7322,10322,10336,10337,10338,4270,359,306,305,7704,11021,7706,11147,10180,11148,11149,10178,11150,4778,4780,11153,11154,11155,11156,30542,11689,12149,11689,12151,12148,14332,14333,14334,14335,14330,14331,14336,14329,14505,14565,14555,14557,14556,14551,14552,14553,14559,14560,14561,14546,14548,14547,14545,14543,14544,14558,14542,14550,14549,14540,14539,14541,14602,14744,14745,15090,15104,18768,15524,15665,15665,15711,15666,15716,15714,15715,15778,15711,15711,16597,11195,17266,17643,14565,32568,17643,18360,18357,18359,18406,18363,18364,18365,18377,18376,18375,18362,18378,18380,18379,18545,18474,7749,7749,19281,2188,19658,19659,20030,20029,20149,19280,20072,20151,20152,20150,20217,20220,20222,20224,20223,20225,20846,20847,20849,20848,20850,21354,21510,22510,22511,22512,22513,22514,7712,22958,22976,22975,22977,22978,22512,284,18545,16597,23408,23455,23456,23460,23458,23457,23459,23756,23756,23952,30305,24003,24004,21635,24379,24447,24463,24462,23588,24368,24488,24654,24653,21510,24906,24743,24906,24906,24906,17266,26192,26164,26131,26616,26439,23966,27152,26439,28302,27541,27637,27684,27706,27707,27902,27976,30507,24368,28363,28531,29582,29582,29582,29596,29767,24379,29929,31124,14561,31319,31319,31319,31694,31695,31717,31697,31698,31699,31700,31778,31849,31850,31851,31852,31854,31855,31857,31858,31902,31912,32151,32153,32156,32157,32158,32206,32207,32203,32205,32208,32212,32213,32286,32335,32336,23966,32562,33030,32633,32634,32635,32636,32640,33029,31862,31861,31857,31858,32931,31239,32944,25064,33297,33299,33408,33298,33301,33416,33409,33300,33418,33414,33848,33857,33892,33904,34154,34155,356,34156,32198,34187,32208,34225,34238,31319,31319,34425,34551,34550,34556,34557,34558,34553,34554,34549,34552,34555,34655,35147,35148,33840,33841,34655,34731,34732,35169,35168,35179,35180,35362,35445,35809,35808,35876,35878,36483,36484,36562,36837,36883,37059,38207,38361,38260,38695,38778,39046,39208,39209,40165,40165,40165,40191,40054,40426,40533,40625,40725,18545,18376,45338,32203,46754,46755,0,47352,47353,47631,47647,47648,47646,47651,47652,47653,47654,47841,48163,48632,51152,49487,49488,50269,50467,51195,52172,52178,52185,52672,52686,52748,52756,52807,52813,53276,53270,53273,53885,53985,54023,54335,54395,54423,54464,54498,54740,54741,54742,54879,54903,55188,55263,55272,55273,55715,14864,56921,57156,57157,57226,57227,57228,58166,58169 )
and col_1 in ( 2233,2375,2376,2434,2612,2633,2638,2639,2718,2746,2755,2758,2759,2760,2762,2764,2767,2771,2798,2810,2817,2823,2824,2844,2858,2871,2889,2890,2893,2897,2915,2917,2919,2920,2921,2922,2923,2930,2932,2971,2974,2975,3013,3014,3020,3022,3024,3045,3046,3093,3101,3132,3137,3138,3184,3200,3334,3365,3367,3447,3474,3571,3599,3604,3614,3649,3650,3720,3773,3795,3797,3806,3880,3907,3957,3989,4012,4028,4039,4088,4193,4203,4235,4263,4289,4351,4352,4468,4484,4519,4575,4600,4618,4639,4646,4692,4729,4754,4773,4804,4805,4857,4890,4934,4935 )
;
		// try 1 :
		// select mounts from wowhead : http://www.wowhead.com/spells=-5?filter=cr=16;crs=4;crv=0
		// get spell ids
		// get creature ids
		// get list of creature pages from wowhead
		// get list of displays from creature pages
		// optional : get the model id from CreatureDisplayInfo_16650.dbc.csv
		// optional : check if model exists for us : SELECT * from creaturemodeldata_16650dbccsv where col_0 in ( 4028,4352,4382,4352,4468,4484,4352,4352,4352,4484,4510,4521,4526,4510,4510,4510,4510,4562,4600,4618,4646,4729,4754,4646,4935,4935,4575,4575,4575,4382,4382,4521,4521,4521,4521,4521,4526,4526,4526,4526,4526,4692,4773,4692,4692,4804,4805,4804,4804,4484,4773,4773,4773,4646,4991,5015,5016,5039,5040,5046,5046,5046,5046,5046,458,458,458,458,5153,5046,5046 )

		// try 2 :
		// SELECT col_0 from creaturemodeldata_16650dbccsv where ( ( col_2 like "creature%mount%" or col_2 like "creature%riding%" ) and ( and col_2 not like "%mounted%" and col_2 not like "%mountain%" ) );
		// select col_0 from creaturedisplayinfo_16650dbccsv where col_1 in ( above result );
;
*/
#define WOTLK_MOUNT_COUNT 355
#define CATACLYSM_MOUNT_COUNT 392
#define MOP_MODEL_MOUNT_COUNT 420
#define MOP_NEW_MODEL_MOUNT_COUNT 122
#define STRANGE_MODEL_MOUNT_COUNT 318
#define ALL_MODEL_MOUNT_COUNT 736
#define CATA_52_MODEL_MOUNT_COUNT 153
#define ACTIVE_LIST ALL_MODEL_MOUNT_COUNT
		static int mount_displays[ACTIVE_LIST] =
		{
			//CATACLYSM_MOUNT_COUNT
//			207,229,247,262,953,995,1166,1281,1961,2320,2326,2327,2328,2346,2402,2404,2405,2408,2409,2410,2736,2784,2785,2786,2787,4805,4805,4806,4807,5228,6080,6442,6443,6444,6447,6448,6468,6469,6471,6472,6473,6474,6475,6476,6477,6478,6569,8469,9473,9474,9475,9476,9695,9714,9991,10426,10661,10662,10664,10666,10670,10671,10672,10718,10718,10718,10719,10720,10721,11641,12241,12242,12245,12246,14329,14330,14331,14332,14333,14334,14335,14337,14338,14339,14341,14342,14343,14344,14346,14347,14348,14349,14372,14374,14375,14376,14377,14388,14554,14573,14574,14575,14576,14577,14578,14579,14582,14583,14584,14632,14776,14777,14939,15289,15290,15672,15672,15676,15679,15680,15681,15791,15902,15902,16314,16992,17011,17063,17142,17158,17255,17694,17696,17697,17697,17699,17699,17700,17701,17701,17703,17717,17718,17719,17720,17721,17722,17759,17890,17906,18164,18696,18697,18724,19085,19250,19296,19303,19375,19376,19377,19378,19478,19479,19480,19482,19483,19484,19869,19870,19871,19872,19873,19996,20344,20359,21073,21074,21075,21076,21077,21152,21155,21156,21157,21158,21268,21473,21520,21521,21522,21523,21524,21525,21939,21939,21939,21973,21974,22265,22350,22464,22471,22473,22474,22620,22630,22631,22719,22720,22724,23647,23656,23928,23952,24693,24725,24745,24757,24758,24758,24913,25159,25279,25280,25335,25511,25511,25593,25831,25832,25833,25835,25836,25870,25871,26691,27237,27237,27238,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27507,27525,27567,27659,27659,27660,27785,27796,27818,27819,27820,27821,27913,27914,28040,28041,28042,28043,28044,28045,28053,28060,28061,28063,28063,28064,28082,28108,28402,28417,28428,28556,28571,28605,28606,28607,28612,28888,28889,28890,28912,28918,28918,28919,28953,28954,29043,29102,29130,29161,29255,29256,29257,29258,29259,29260,29261,29262,29283,29284,29344,29378,29379,29696,29754,29755,29794,29937,29938,30141,30175,30346,30366,30501,30518,30989,31007,31047,31154,31156,31367,31368,31721,31803,31837,31958,31992,34410,34955,34956,35134,35135,35136,35249,35250,35551,35553,35740,35750,35751,35754,35755,35757,36022,36213,37138,37145,37159,37160,37204,37231,37799,37800,38018,38031,38032,38046,38048,38260,38261,38482,38607,38613,38668,38755,38756,38783,38972,39060,39091,39095,39096,39192,39229,39530,39546,39547,39561,39562,39563,40029
			//STRANGE_MODEL_MOUNT_COUNT
//			15904,17693,17698,21147,22351,22462,22463,22465,22466,22467,22470,22472,24324,24472,24614,24665,24688,24710,24714,24784,24869,25278,25445,25450,25451,25579,25678,25679,25803,25834,25852,25853,25854,25958,26215,26303,26308,26319,26358,26363,26388,26424,26500,26510,26511,26512,26539,26540,26541,26558,26559,26572,26573,26578,26609,26610,26611,26612,26615,26624,26625,26681,26717,26718,26719,26720,26721,26722,26723,26724,26742,26755,26881,26882,26883,27454,27515,27517,27561,27649,27650,27781,27797,27798,28081,28083,28117,28421,28652,29327,29361,29364,29627,29674,29695,29752,29842,30177,30695,31484,31542,31549,31581,31627,31714,31987,32777,33105,33805,34408,34409,34411,34750,34890,34955,34957,34958,35005,35008,35010,35045,35137,35226,35358,35359,35520,35521,35534,35535,35548,35549,35762,36728,36787,36788,37167,37168,37169,37204,37212,37352,37359,37360,37361,37362,37371,37492,37493,37496,37539,37603,37604,37787,37800,37826,37960,38031,38032,38046,38177,38242,38261,38265,38320,38321,38404,38431,38482,38485,38607,38609,38610,38611,38613,38668,38755,38756,38757,38783,38784,38785,38972,39060,39091,39229,39497,39530,39533,39561,39562,39563,39686,39687,39688,39691,40029,40568,40590,41592,41711,41720,41903,41940,41943,41944,41945,41989,41990,41991,41992,41993,41994,41995,41996,41997,41998,41999,42000,42001,42014,42023,42024,42025,42026,42027,42145,42146,42147,42243,42269,42270,42271,42272,42294,42753,42837,42876,43090,43143,43155,43170,43192,43208,43253,43254,43351,43409,43425,43430,43431,43495,43562,43577,43637,43638,43686,43689,43692,43693,43695,43697,43704,43705,43706,43707,43708,43713,43714,43715,43716,43900,43935,43953,44096,44568,44607,44624,44627,44628,44633,44757,44758,44759,44807,44808,44836,44837,45009,45054,45203,45204,45264,45271,45520,45521,45522,45655,45733,45775,45797,45823,45824,45825,45826,45827,45828,45829,45830,45831,45832,45833,45834,45835,45836,45837,45838,46086,46087
			//ALL_MODEL_MOUNT_COUNT
			31988,207,247,304,1166,2188,2320,2326,2327,2328,2346,2402,2404,2405,2408,2409,2410,2736,2784,2785,2786,2787,4805,4806,4807,5228,6076,6080,6442,6443,6444,6447,6448,6468,6469,6471,6472,6473,6474,6475,6476,6477,6478,6569,7709,8469,9473,9474,9475,9476,9695,9714,9991,10426,10661,10662,10664,10666,10670,10671,10672,10718,10719,10720,10721,11641,12149,12241,12242,12245,12246,14329,14330,14331,14332,14333,14334,14335,14336,14337,14338,14339,14342,14343,14344,14346,14347,14348,14349,14372,14374,14375,14376,14377,14388,14541,14542,14544,14546,14547,14548,14549,14550,14551,14552,14553,14554,14573,14574,14575,14576,14577,14578,14579,14582,14583,14584,14632,14776,15289,15290,15672,15676,15679,15680,15681,15902,15904,16314,17063,17142,17158,17549,17693,17694,17696,17697,17698,17699,17700,17701,17703,17717,17718,17719,17720,17721,17722,17759,17890,17906,18164,18696,18697,18724,19085,19250,19296,19303,19375,19376,19377,19378,19478,19479,19480,19482,19483,19484,19608,19869,19870,19871,19872,19873,19996,20029,20344,20359,20846,21073,21074,21075,21076,21077,21147,21152,21155,21156,21157,21158,21268,21473,21486,21520,21521,21522,21523,21524,21525,21635,21939,21973,21974,22265,22350,22351,22462,22463,22464,22465,22466,22467,22470,22471,22472,22473,22474,22620,22630,22631,22719,22720,22724,22976,22977,23056,23458,23459,23460,23581,23647,23656,23928,23952,23966,24324,24447,24472,24614,24665,24688,24693,24710,24714,24725,24743,24745,24757,24758,24784,24869,24913,25159,25278,25279,25280,25335,25445,25450,25451,25511,25579,25593,25678,25679,25803,25831,25832,25833,25834,25835,25836,25852,25853,25854,25870,25871,25958,26164,26215,26303,26308,26363,26388,26424,26500,26539,26540,26541,26558,26559,26572,26573,26578,26609,26610,26611,26612,26616,26624,26625,26681,26691,26755,26881,26883,27237,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27480,27507,27515,27517,27525,27541,27561,27567,27649,27650,27659,27660,27781,27785,27796,27797,27798,27818,27819,27820,27821,27902,27913,27914,28040,28041,28042,28043,28044,28045,28053,28060,28061,28063,28064,28081,28082,28083,28108,28117,28402,28417,28421,28428,28556,28571,28605,28606,28607,28612,28652,28888,28889,28890,28912,28918,28919,28954,29043,29102,29130,29161,29255,29256,29257,29258,29259,29260,29261,29262,29282,29283,29284,29310,29311,29312,29313,29327,29344,29361,29364,29378,29379,29627,29674,29695,29696,29754,29755,29794,29842,29937,29938,30045,30046,30047,30070,30141,30175,30177,30305,30346,30366,30501,30518,30695,30989,31007,31047,31154,31156,31292,31367,31368,31484,31542,31549,31581,31627,31714,31721,31803,31837,31958,31987,31992,32335,32633,32634,32635,32636,32931,33105,33301,33408,33805,34408,34409,34410,34411,34550,34731,34732,34750,34890,34955,34956,34957,34958,35005,35008,35045,35134,35135,35136,35137,35226,35249,35250,35359,35520,35521,35534,35535,35548,35549,35551,35553,35740,35750,35751,35754,35755,35757,35762,36022,36213,36562,36787,36788,36837,37059,37138,37145,37159,37160,37168,37169,37204,37212,37231,37352,37371,37492,37493,37496,37787,37800,37826,37960,38031,38032,38046,38048,38177,38242,38260,38261,38265,38482,38485,38607,38609,38610,38611,38613,38668,38695,38755,38756,38757,38778,38783,38784,38785,38972,39060,39091,39209,39229,39530,39561,39562,39563,39686,39687,39688,40029,40568,40590,40854,41089,41090,41091,41240,41592,41711,41720,41884,41885,41903,41989,41990,41991,41992,41993,41994,41995,41996,41997,41998,41999,42000,42001,42014,42023,42024,42025,42026,42027,42145,42146,42147,42150,42151,42185,42192,42201,42243,42250,42269,42270,42271,42272,42294,42352,42499,42500,42501,42502,42703,42753,42837,42876,43090,43099,43208,43254,43495,43562,43577,43637,43638,43665,43686,43689,43692,43693,43695,43697,43704,43705,43706,43707,43708,43709,43710,43711,43712,43713,43714,43715,43716,43717,43718,43719,43720,43721,43722,43723,43724,43725,43726,43900,43910,44096,44624,44627,44628,44633,44664,44757,44758,44759,44777,44807,44808,44836,44837,45009,45054,45203,45204,45264,45271,45338,45520,45521,45522,45655,45733,45734,45775,45797,46086,46087,46267,46799,47640,47699,47825,47826,47827,47828,47981,47983,48014,48020,48100,48101,48247,51481,48858,48816,48815,47718,47717,47715,47716,47238,47256,47166,47165,46930,46929,1281,46729,46686,45163,42498,51484,51037,51048,51488,51361,39547,38018,51479,51485,51510,51511,51512,51323,47945,16943,479,
			//MOP_NEW_MODEL_MOUNT_COUNT
//			40568,40590,41592,41711,41720,41903,41940,41943,41944,41945,41989,41990,41991,41992,41993,41994,41995,41996,41997,41998,41999,42000,42001,42014,42023,42024,42025,42026,42027,42145,42146,42147,42243,42269,42270,42271,42272,42294,42753,42837,42876,43090,43143,43155,43170,43192,43208,43253,43254,43351,43409,43425,43430,43431,43495,43562,43577,43637,43638,43686,43689,43692,43693,43695,43697,43704,43705,43706,43707,43708,43713,43714,43715,43716,43900,43935,43953,44096,44568,44607,44624,44627,44628,44633,44757,44758,44759,44807,44808,44836,44837,45009,45054,45203,45204,45264,45271,45520,45521,45522,45655,45733,45775,45797,45823,45824,45825,45826,45827,45828,45829,45830,45831,45832,45833,45834,45835,45836,45837,45838,46086,46087
			//CATA_52_MODEL_MOUNT_COUNT
//			4806,6468,6469,6471,6472,6473,17549,19608,21486,23056,23581,24710,26308,27480,29102,29282,29310,29311,29312,29313,30045,30046,30047,30070,30141,31292,38048,38755,38756,38757,40590,40854,41089,41090,41091,41240,41592,41711,41720,41884,41885,41903,41989,41990,41991,41992,41993,41994,41995,41996,41997,41998,41999,42000,42001,42014,42023,42024,42025,42026,42027,42145,42146,42147,42150,42151,42185,42192,42201,42250,42352,42499,42500,42501,42502,42703,42837,43090,43099,43254,43562,43577,43637,43638,43665,43686,43689,43692,43693,43695,43697,43704,43705,43706,43707,43708,43709,43710,43711,43712,43713,43714,43715,43716,43717,43718,43719,43720,43721,43722,43723,43724,43725,43726,43900,43910,44624,44627,44628,44633,44664,44757,44758,44759,44777,44807,44808,44836,44837,45054,45271,45520,45521,45522,45733,45734,45775,45797,46267,46799,47600,47640,47662,47699,47825,47826,47827,47828,47976,47981,47983
		};
		// bad : 308,358,953,995,4268,4269,4270,4271,4272,4710,4777,4778,4779,4780,6074,6075,6470,6486,7689,7690,7749,10178,10179,10180,10322,10336,10337,10338,11021,11147,11148,11149,11150,11153,11154,11155,11156,11195,11689,12151,14505,14539,14540,14545,14555,14556,14557,14558,14559,14560,14561,14565,15524,15665,15666,15711,15714,15715,15716,15778,15791,16597,17255,17266,17643,18357,18359,18360,18362,18363,18364,18365,18375,18376,18377,18378,18379,18380,18406,18474,18545,18768,19280,19281,19658,19659,20030,20072,20149,20150,20151,20152,20217,20220,20222,20223,20224,20225,20847,20848,20849,20850,21354,21510,22510,22513,22514,22958,22975,22978,23408,23455,23456,23457,23588,23756,24003,24004,24368,24379,24462,24463,24488,24653,24654,24906,25064,26131,26192,26439,26319,26510,26511,26512,26615,27152,27454,27637,27684,27706,27707,27976,28302,28363,28531,29582,29596,29752,29767,29929,30507,30542,31124,31319,31694,31695,31697,31698,31699,31700,31717,31778,31849,31850,31851,31852,31854,31855,31857,31858,31861,31862,31902,31912,32151,32153,32156,32157,32158,32198,32203,32205,32206,32207,32208,32212,32213,32286,32336,32562,32568,32663,32640,32944,33029,33030,33297,33298,33299,33300,3330133408,33409,33414,33416,33418,33840,33841,33848,33857,33892,33904,34154,34155,34156,34187,34225,34238,34425,34551,34552,34553,34554,34555,34556,34557,34558,34655,35147,35148,35168,35169,35179,35180,35362,35445,35808,35809,35876,35878,36483,36484,36883,37509,38207,39046,40054,40165,40191,40625,40725,43192,43351,43430,43431,45823,32777,35010,36728,37167,37359,37360,37361,37362,37539,37603,37604,38320,38321,38404,38431,39533,39691,41940,41943,41944,41945,43143,43155,43170,43253,43409,43425,43935,44568,44607,45824,45825,45826,45827,45828,45829,45830,45831,45832,45833,45834,45835,45836,45837,45838
		// missing : 46630,46729,46929,46930,47165,47166,47238,47243,47253,47256,47260,47323,47324,47488,47539,47540,47541,47549,47582,4760047662,47689,47703,47705,47706,47715,47716,47717,47718,47600,47662,47976
		// too large ? : 17891,18511,26717,26718,26719,26720,26721,26722,26723,26724,26742,26882,29752,39497,43292,46628,46629,48014,48020,48100,48101,48134,48175,45242
		// cata 5.2 mounts : 4806,6468,6469,6470,6471,6472,6473,29102,30141,31292,38048,38755,38756,38757,39497,40590,40854,41089,41090,41091,41240,41592,41711,41720,41884,41885,41903,41989,41990,41991,41992,41993,41994,41995,41996,41997,41998,41999,42000,42001,42014,42023,42024,42025,42026,42027,42145,42146,42147,42150,42151,42185,42192,42201,42250,42352,42499,42500,42501,42502,42703,42837,43090,43099,43253,43254,43292,43562,43577,43637,43638,43665,43686,43689,43692,43693,43695,43697,43704,43705,43706,43707,43708,43709,43710,43711,43712,43713,43714,43715,43716,43717,43718,43719,43720,43721,43722,43723,43724,43725,43726,43900,43910,44624,44627,44628,44633,44664,44757,44758,44759,44777,44807,44808,44836,44837,45054,45271,45520,45521,45522,45733,45734,45775,45797,46267,46628,46629,46630,46729,46799,46929,46930,47165,47166,47238,47243,47253,47256,47260,47323,47324,47488,47539,47540,47541,47549,47582,47600,47640,47662,47689,47699,47703,47705,47706,47715,47716,47717,47718,47825,47826,47827,47828,47976,47981,47983,48014,48020,48100,48101,48134,48175,48247
		// maybe missed these : 17549,17891,18511,19608,21486,23056,23581,24710,26308,27480,29282,29310,29311,29312,29313,30045,30046,30047,30070,46628,46629,46630,47256,47260,47539,47540,47541,47549,47582,47600,47640,47689,47703,47705,47706,47976,47983,48020,48175
		int64 *holder = p_caster->GetCreateIn64Extension( EXTENSION_ID_RANDOM_MOUNT_INDEX );
		if( *holder == 0 )
			*holder = RandomUInt() % ACTIVE_LIST;
		//and set it. Should be restored when charger is removed
		uint32 SelectedDisplay = mount_displays[ (*holder) % ACTIVE_LIST ];
//		p_caster->BroadcastMessage( "Using Display %d", SelectedDisplay );
		p_caster->SetUInt32Value( UNIT_FIELD_MOUNTDISPLAYID, SelectedDisplay );
		p_caster->mount_look_override = SelectedDisplay;
		(*holder)++;
	}break;
	//add N honor points
	case 12832:
	{
		if( !p_caster )
			return;
//		p_caster->m_honorPoints += 50000;
		p_caster->ModCurrencyCount( CURRENCY_HONOR_POINT, 50000 );
#ifndef CATACLYSM_SUPPORT
		p_caster->ModUnsigned32Value(PLAYER_FIELD_HONOR_CURRENCY, 50000);
#endif
	}break; 
	//add N arena points
	case 15780:
	{
		if( !p_caster )
			return;
//		p_caster->m_arenaPoints += 3000;
		p_caster->ModCurrencyCount( CURRENCY_HONOR_POINT, 3000 );
#ifndef CATACLYSM_SUPPORT
		p_caster->ModUnsigned32Value(PLAYER_FIELD_ARENA_CURRENCY, 3000);
#endif

		//set rating to at least 2000
		for (i=0; i<NUM_ARENA_TEAM_TYPES; i++)
			if( p_caster->m_arenaTeams[i] != NULL )
			{
				ArenaTeamMember *m = p_caster->m_arenaTeams[i]->GetMemberByGuid( p_caster->m_playerInfo->guid );
				if ( m && m->PersonalRating < 2000 )
				{
					m->PersonalRating += 20000;
					p_caster->m_arenaTeams[i]->SaveToDB();
				}
			}
	}break; 

	//adjust faction standings for items
	case 12818:
	{
		if( !p_caster )
			return;
		//horde ?
		if( p_caster->GetTeam() )
		{
			p_caster->SetStanding(1, 66000);
			p_caster->SetStanding(59, 66000);
			p_caster->SetStanding(67, 66000);
			p_caster->SetStanding(68, 66000);
			p_caster->SetStanding(76, 66000);
			p_caster->SetStanding(81, 66000);
			p_caster->SetStanding(270, 66000);
			p_caster->SetStanding(510, 66000);
			p_caster->SetStanding(529, 66000);
			p_caster->SetStanding(530, 66000);
			p_caster->SetStanding(576, 66000);
			p_caster->SetStanding(609, 66000);
			p_caster->SetStanding(729, 66000);
			p_caster->SetStanding(889, 66000);
			p_caster->SetStanding(910, 66000);
			p_caster->SetStanding(911, 66000);
			p_caster->SetStanding(922, 66000);
			p_caster->SetStanding(932, 66000);
			p_caster->SetStanding(933, 66000);
			p_caster->SetStanding(934, 66000);
			p_caster->SetStanding(935, 66000);
			p_caster->SetStanding(941, 66000);
			p_caster->SetStanding(942, 66000);
			p_caster->SetStanding(947, 66000);
			p_caster->SetStanding(967, 66000);
			p_caster->SetStanding(970, 66000);
			p_caster->SetStanding(989, 66000);
			p_caster->SetStanding(990, 66000);
			p_caster->SetStanding(1011, 66000);
			p_caster->SetStanding(1012, 66000);
			p_caster->SetStanding(1015, 66000);
			p_caster->SetStanding(1124, 66000);
			p_caster->SetStanding(1031, 66000);
			p_caster->SetStanding(1038, 66000);
			p_caster->SetStanding(1052, 66000);
			p_caster->SetStanding(1064, 66000);
			p_caster->SetStanding(1073, 66000);
			p_caster->SetStanding(1077, 66000);
			p_caster->SetStanding(1085, 66000);
			p_caster->SetStanding(1090, 66000);
			p_caster->SetStanding(1091, 66000);
			p_caster->SetStanding(1098, 66000);
			p_caster->SetStanding(1104, 66000);
			p_caster->SetStanding(1105, 66000);
			p_caster->SetStanding(1106, 66000);
			p_caster->SetStanding(1119, 66000);
			p_caster->SetStanding(1124, 66000);
			p_caster->SetStanding(1156, 66000);
		}
		else
		{
			p_caster->SetStanding(1, 66000);
			p_caster->SetStanding(47, 66000);
			p_caster->SetStanding(54, 66000);
			p_caster->SetStanding(59, 66000);
			p_caster->SetStanding(67, 66000);
			p_caster->SetStanding(69, 66000);
			p_caster->SetStanding(72, 66000);
			p_caster->SetStanding(270, 66000);
			p_caster->SetStanding(471, 66000);
			p_caster->SetStanding(509, 66000);
			p_caster->SetStanding(529, 66000);
			p_caster->SetStanding(576, 66000);
			p_caster->SetStanding(589, 66000);
			p_caster->SetStanding(609, 66000);
			p_caster->SetStanding(730, 66000);
			p_caster->SetStanding(890, 66000);
			p_caster->SetStanding(910, 66000);
			p_caster->SetStanding(930, 66000);
			p_caster->SetStanding(932, 66000);
			p_caster->SetStanding(933, 66000);
			p_caster->SetStanding(934, 66000);
			p_caster->SetStanding(935, 66000);
			p_caster->SetStanding(942, 66000);
			p_caster->SetStanding(946, 66000);
			p_caster->SetStanding(967, 66000);
			p_caster->SetStanding(970, 66000);
			p_caster->SetStanding(978, 66000);
			p_caster->SetStanding(989, 66000);
			p_caster->SetStanding(990, 66000);
			p_caster->SetStanding(1011, 66000);
			p_caster->SetStanding(1012, 66000);
			p_caster->SetStanding(1015, 66000);
			p_caster->SetStanding(1031, 66000);
			p_caster->SetStanding(1037, 66000);
			p_caster->SetStanding(1038, 66000);
			p_caster->SetStanding(1050, 66000);
			p_caster->SetStanding(1068, 66000);
			p_caster->SetStanding(1073, 66000);
			p_caster->SetStanding(1077, 66000);
			p_caster->SetStanding(1090, 66000);
			p_caster->SetStanding(1091, 66000);
			p_caster->SetStanding(1094, 66000);
			p_caster->SetStanding(1098, 66000);
			p_caster->SetStanding(1104, 66000);
			p_caster->SetStanding(1105, 66000);
			p_caster->SetStanding(1106, 66000);
			p_caster->SetStanding(1119, 66000);
			p_caster->SetStanding(1124, 66000);
			p_caster->SetStanding(1126, 66000);
			p_caster->SetStanding(1156, 66000);
		}
	}break;

	//professions -> secondarys : SKILL_FIRST_AID + SKILL_COOKING + SKILL_FISHING + SKILL_ARCHAEOLOGY
	case 2404:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_FIRST_AID, true, false );
			p_caster->removeSpell(3273, 0, 0, 0);
			p_caster->removeSpell(3274, 0, 0, 0);
			p_caster->removeSpell(7924, 0, 0, 0);
			p_caster->removeSpell(10846, 0, 0, 0);
			p_caster->removeSpell(27028, 0, 0, 0);
			p_caster->removeSpell(45542, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_FIRST_AID);
			p_caster->_AddSkillLine(SKILL_FIRST_AID, 525, 525);

			p_caster->LearnAllSpellsFromSkillLine( SKILL_COOKING, true, false );
			p_caster->removeSpell(2550, 0, 0, 0);
			p_caster->removeSpell(3102, 0, 0, 0);
			p_caster->removeSpell(3413, 0, 0, 0);
			p_caster->removeSpell(18260, 0, 0, 0);
			p_caster->removeSpell(33359, 0, 0, 0);
			p_caster->removeSpell(51296, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_COOKING);
			p_caster->_AddSkillLine(SKILL_COOKING, 525, 525);

			p_caster->LearnAllSpellsFromSkillLine( SKILL_FISHING, true, false );
			p_caster->removeSpell(7620, 0, 0, 0);
			p_caster->removeSpell(7731, 0, 0, 0);
			p_caster->removeSpell(7732, 0, 0, 0);
			p_caster->removeSpell(18248, 0, 0, 0);
			p_caster->removeSpell(33095, 0, 0, 0);
			p_caster->removeSpell(51294, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_FISHING);
			p_caster->_AddSkillLine(SKILL_FISHING, 525, 525);

			p_caster->LearnAllSpellsFromSkillLine( SKILL_ARCHAEOLOGY, true, false );
			p_caster->removeSpell(78670, 0, 0, 0);
			p_caster->removeSpell(88961, 0, 0, 0);
			p_caster->removeSpell(89718, 0, 0, 0);
			p_caster->removeSpell(89719, 0, 0, 0);
			p_caster->removeSpell(89720, 0, 0, 0);
			p_caster->removeSpell(89721, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_ARCHAEOLOGY);
			p_caster->_AddSkillLine(SKILL_ARCHAEOLOGY, 525, 525);

		}break;
	//professions -> SKILL_SKINNING
	case 2405:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_SKINNING, true, false );
			p_caster->removeSpell(8613, 0, 0, 0);
			p_caster->removeSpell(8617, 0, 0, 0);
			p_caster->removeSpell(8618, 0, 0, 0);
			p_caster->removeSpell(10768, 0, 0, 0);
			p_caster->removeSpell(32678, 0, 0, 0);
			p_caster->removeSpell(53125, 0, 0, 0);
			p_caster->removeSpell(53662, 0, 0, 0);
			p_caster->removeSpell(53663, 0, 0, 0);
			p_caster->removeSpell(53664, 0, 0, 0);
			p_caster->removeSpell(53665, 0, 0, 0);
			p_caster->removeSpell(50305, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_SKINNING);
			p_caster->_AddSkillLine(SKILL_SKINNING, 525, 525);
		}break;
	//professions -> SKILL_MINING
	case 2599:		//worked in wotlk
	case 21369:		//worked in cataclysm
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_MINING, true, false );
			p_caster->removeSpell(2575, 0, 0, 0);
			p_caster->removeSpell(2576, 0, 0, 0);
			p_caster->removeSpell(3564, 0, 0, 0);
			p_caster->removeSpell(10248, 0, 0, 0);
			p_caster->removeSpell(29354, 0, 0, 0);
			p_caster->removeSpell(53120, 0, 0, 0);
			p_caster->removeSpell(53121, 0, 0, 0);
			p_caster->removeSpell(53122, 0, 0, 0);
			p_caster->removeSpell(53123, 0, 0, 0);
			p_caster->removeSpell(53124, 0, 0, 0);
			p_caster->removeSpell(50310, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_MINING);
			p_caster->_AddSkillLine(SKILL_MINING, 525, 525);
		}break;
	//professions -> SKILL_LEATHERWORKING
	case 2600:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_LEATHERWORKING, true, false );
			p_caster->removeSpell(2108, 0, 0, 0);
			p_caster->removeSpell(3104, 0, 0, 0);
			p_caster->removeSpell(3811, 0, 0, 0);
			p_caster->removeSpell(10662, 0, 0, 0);
			p_caster->removeSpell(32549, 0, 0, 0);
			p_caster->removeSpell(51302, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_LEATHERWORKING);
			p_caster->_AddSkillLine(SKILL_LEATHERWORKING, 525, 525);
		}break;
	//professions -> SKILL_HERBALISM
	case 2602:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_HERBALISM, true, false );
			p_caster->removeSpell(2366, 0, 0, 0);
			p_caster->removeSpell(2368, 0, 0, 0);
			p_caster->removeSpell(3570, 0, 0, 0);
			p_caster->removeSpell(11993, 0, 0, 0);
			p_caster->removeSpell(28695, 0, 0, 0);
			p_caster->removeSpell(55428, 0, 0, 0);
			p_caster->removeSpell(55480, 0, 0, 0);
			p_caster->removeSpell(55500, 0, 0, 0);
			p_caster->removeSpell(55501, 0, 0, 0);
			p_caster->removeSpell(55502, 0, 0, 0);
			p_caster->removeSpell(50300, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_HERBALISM);
			p_caster->_AddSkillLine(SKILL_HERBALISM, 525, 525);
		}break;
	//professions -> SKILL_BLACKSMITHING
	case 3677:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_BLACKSMITHING, true, false );
			p_caster->removeSpell(2018, 0, 0, 0);
			p_caster->removeSpell(3100, 0, 0, 0);
			p_caster->removeSpell(3538, 0, 0, 0);
			p_caster->removeSpell(9785, 0, 0, 0);
			p_caster->removeSpell(29844, 0, 0, 0);
			p_caster->removeSpell(51300, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_BLACKSMITHING);
			p_caster->_AddSkillLine(SKILL_BLACKSMITHING, 525, 525);
		}break;
	//professions -> SKILL_ALCHEMY
	case 4295:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_ALCHEMY, true, false );
			p_caster->removeSpell(2259, 0, 0, 0);
			p_caster->removeSpell(3101, 0, 0, 0);
			p_caster->removeSpell(3464, 0, 0, 0);
			p_caster->removeSpell(11611, 0, 0, 0);
			p_caster->removeSpell(28596, 0, 0, 0);
			p_caster->removeSpell(51304, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_ALCHEMY);
			p_caster->_AddSkillLine(SKILL_ALCHEMY, 525, 525);
		}break;
	//professions -> SKILL_JEWELCRAFTING
	case 4997:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_JEWELCRAFTING, true, false );
			p_caster->removeSpell(25229, 0, 0, 0);
			p_caster->removeSpell(25230, 0, 0, 0);
			p_caster->removeSpell(28894, 0, 0, 0);
			p_caster->removeSpell(28895, 0, 0, 0);
			p_caster->removeSpell(28897, 0, 0, 0);
			p_caster->removeSpell(51311, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_JEWELCRAFTING);
			p_caster->_AddSkillLine(SKILL_JEWELCRAFTING, 525, 525);
		}break;
	//professions -> SKILL_ENGINEERING
	case 6273:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_ENGINEERING, true, false );
			p_caster->removeSpell(4036, 0, 0, 0);
			p_caster->removeSpell(4037, 0, 0, 0);
			p_caster->removeSpell(4038, 0, 0, 0);
			p_caster->removeSpell(12656, 0, 0, 0);
			p_caster->removeSpell(30350, 0, 0, 0);
			p_caster->removeSpell(51306, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_ENGINEERING);
			p_caster->_AddSkillLine(SKILL_ENGINEERING, 525, 525);
		}break;
	//professions -> SKILL_TAILORING
	case 7977:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_TAILORING, true, false );
			p_caster->removeSpell(3908, 0, 0, 0);
			p_caster->removeSpell(3909, 0, 0, 0);
			p_caster->removeSpell(3910, 0, 0, 0);
			p_caster->removeSpell(12180, 0, 0, 0);
			p_caster->removeSpell(26790, 0, 0, 0);
			p_caster->removeSpell(51309, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_TAILORING);
			p_caster->_AddSkillLine(SKILL_TAILORING, 525, 525);
		}break;
	//professions -> SKILL_ENCHANTING
	case 8388:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_ENCHANTING, true, false );
			p_caster->removeSpell(7411, 0, 0, 0);
			p_caster->removeSpell(7412, 0, 0, 0);
			p_caster->removeSpell(7413, 0, 0, 0);
			p_caster->removeSpell(13920, 0, 0, 0);
			p_caster->removeSpell(28029, 0, 0, 0);
			p_caster->removeSpell(51313, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_ENCHANTING);
			p_caster->_AddSkillLine(SKILL_ENCHANTING, 525, 525);
		}break;
	//professions -> SKILL_INSCRIPTION
	case 12817:
		{
			if( !p_caster )
				return;

			p_caster->LearnAllSpellsFromSkillLine( SKILL_INSCRIPTION, true, false );
			p_caster->removeSpell(45357, 0, 0, 0);
			p_caster->removeSpell(45358, 0, 0, 0);
			p_caster->removeSpell(45359, 0, 0, 0);
			p_caster->removeSpell(45360, 0, 0, 0);
			p_caster->removeSpell(45361, 0, 0, 0);
			p_caster->removeSpell(45363, 0, 0, 0);
			p_caster->_RemoveSkillLine(SKILL_INSCRIPTION);
			p_caster->_AddSkillLine(SKILL_INSCRIPTION, 525, 525);
		}break;
	//#Fat rich junk food - increase health in pct
	case 1450:
		{
			if( !p_caster )
				return;

			SpellEntry *spellInfo = dbcSpell.LookupEntry( 22 );
			Spell *spell = SpellPool.PooledNew( __FILE__, __LINE__ );
			spell->Init(p_caster, spellInfo ,false , NULL);
			SpellCastTargets targets;
			targets.m_unitTarget = p_caster->GetGUID();
			spell->prepare(&targets);
		}break;

	//Geekness proof - apply one more buff from many
	case 2638:
		{
			if( !p_caster )
				return;

			static uint32 geek_spellidlist[6]={33077,33078,33079,33080,33081,33082};
			for(int i=0;i<6;i++)
				if( !p_caster->HasAura( geek_spellidlist[i] ) )
				{
					SpellEntry *spellInfo = dbcSpell.LookupEntry( geek_spellidlist[i] );
					Spell *spell = SpellPool.PooledNew( __FILE__, __LINE__ );
					spell->Init(p_caster, spellInfo ,false , NULL);
					SpellCastTargets targets;
					targets.m_unitTarget = p_caster->GetGUID();
					spell->prepare(&targets);
					break;
				}
		}break;

	//nuclear fart
	case 836:
		{
			//stun people in radious
			if( !p_caster ) 
				return;

			float r = (float)10*10;
			SpellEntry* spellInfo = dbcSpell.LookupEntryForced( 34510 );
			if( !spellInfo )
				return;
			InrangeLoopExitAutoCallback AutoLock;
			for( InRangeSetRecProt::iterator itr = p_caster->GetInRangeSetBegin( AutoLock ); itr != p_caster->GetInRangeSetEnd(); itr++ )
			{
				if( !( (*itr)->IsUnit() ) || ! static_cast< Unit* >( *itr )->isAlive() )
					continue;

				if( !IsInrange( p_caster, (*itr), r ) )
					continue;

				//cast spell on it
				Spell* spell = SpellPool.PooledNew( __FILE__, __LINE__ );
				spell->Init( ( *itr ), spellInfo, true, NULL );
				SpellCastTargets targets;
				targets.m_unitTarget = (*itr)->GetGUID();
				spell->prepare( &targets );
			}
			Spell* spell = SpellPool.PooledNew( __FILE__, __LINE__ );
			spell->Init( p_caster, spellInfo, true, NULL );
			SpellCastTargets targets;
			targets.m_unitTarget = p_caster->GetGUID();
			spell->prepare( &targets );
		}break;

	//Mr fix it - repair items on the fly
	case 35517:
		{
			if( !p_caster )
				return;

			for( int i = 0; i < MAX_INVENTORY_SLOT; i++ )
			{
				Item *pItem = p_caster->GetItemInterface()->GetInventoryItem( i );
				if( pItem != NULL )
				{
					if( pItem->IsContainer() )
					{
						Container *pContainer = static_cast<Container*>( pItem );
						for( unsigned int j = 0; j < pContainer->GetProto()->ContainerSlots; ++j )
						{
							pItem = pContainer->GetItem( j );
							if( pItem != NULL )
							{
								int32 cost = 0;
								DurabilityCostsEntry * dcosts = dbcDurabilityCosts.LookupEntry(pItem->GetProto()->ItemLevel);
								DurabilityQualityEntry * dquality = dbcDurabilityQuality.LookupEntry((pItem->GetProto()->Quality + 1) * 2);
								if(dcosts && dquality)
								{
									uint32 dmodifier = dcosts->modifier[pItem->GetProto()->Class == ITEM_CLASS_WEAPON ? pItem->GetProto()->SubClass : pItem->GetProto()->SubClass + 21];
									cost = long2int32((pItem->GetDurabilityMax() - pItem->GetDurability()) * dmodifier * double(dquality->quality_modifier));
								}

								if( cost <= (int32)p_caster->GetUInt32Value( PLAYER_FIELD_COINAGE ) )
								{
									p_caster->ModUnsigned32Value( PLAYER_FIELD_COINAGE, -cost );
									pItem->SetDurabilityToMax();
									pItem->m_isDirty = true;
								}
							}
						}
					}
					else
					{
						if( pItem->GetProto()->MaxDurability > 0 && i < INVENTORY_SLOT_BAG_END && pItem->GetDurability() <= 0 )
						{
							int32 cost = 0;
							DurabilityCostsEntry * dcosts = dbcDurabilityCosts.LookupEntry(pItem->GetProto()->ItemLevel);
							DurabilityQualityEntry * dquality = dbcDurabilityQuality.LookupEntry((pItem->GetProto()->Quality + 1) * 2);
							if(dcosts && dquality)
							{
								uint32 dmodifier = dcosts->modifier[pItem->GetProto()->Class == ITEM_CLASS_WEAPON ? pItem->GetProto()->SubClass : pItem->GetProto()->SubClass + 21];
								cost = long2int32((pItem->GetDurabilityMax() - pItem->GetDurability()) * dmodifier * double(dquality->quality_modifier));
							}
							if( cost <= (int32)p_caster->GetUInt32Value( PLAYER_FIELD_COINAGE ) )
							{
								p_caster->ModUnsigned32Value( PLAYER_FIELD_COINAGE, -cost );
								pItem->SetDurabilityToMax();
								pItem->m_isDirty = true;
							}
							p_caster->ApplyItemMods( pItem, i, true );
						}
						else
						{
							int32 cost = 0;
							DurabilityCostsEntry * dcosts = dbcDurabilityCosts.LookupEntry(pItem->GetProto()->ItemLevel);
							DurabilityQualityEntry * dquality = dbcDurabilityQuality.LookupEntry((pItem->GetProto()->Quality + 1) * 2);
							if(dcosts && dquality)
							{
								uint32 dmodifier = dcosts->modifier[pItem->GetProto()->Class == ITEM_CLASS_WEAPON ? pItem->GetProto()->SubClass : pItem->GetProto()->SubClass + 21];
								cost = long2int32((pItem->GetDurabilityMax() - pItem->GetDurability()) * dmodifier * double(dquality->quality_modifier));
							}
							if( cost <= (int32)p_caster->GetUInt32Value( PLAYER_FIELD_COINAGE ) )
							{
								p_caster->ModUnsigned32Value( PLAYER_FIELD_COINAGE, -cost );
								pItem->SetDurabilityToMax();
								pItem->m_isDirty = true;
							}
						}					
					}
				}
			}
		}break;

	//Server Colonizer - level up 1 level
	case 27421:
		{
			if( !p_caster )
				return;

			int32 xp_to_lvl = p_caster->GetUInt32Value( PLAYER_NEXT_LEVEL_XP ) - p_caster->GetUInt32Value( PLAYER_XP );

			if( xp_to_lvl > 0 )
				p_caster->GiveXP( xp_to_lvl + 10, p_caster->GetGUID(), false );

			Pet *pet = p_caster->GetSummon();
			if( pet )
			{
				xp_to_lvl = pet->GetUInt32Value( UNIT_FIELD_PETNEXTLEVELEXP ) - pet->GetUInt32Value( UNIT_FIELD_PETEXPERIENCE ) ;

				if( xp_to_lvl > 0 )
					pet->GiveXP( xp_to_lvl );
			}
				
		}break;

	//Beam me Scotty - teleport you to your selection
	case 3512:
		{
			if( !p_caster )
				return;
			
			Unit *target = u_caster->GetMapMgr()->GetUnit( p_caster->GetSelection() );

			if( !target || !target->isAlive() || !target->IsPlayer()) 
				return;

			if( static_cast<Player*>(target)->GetMapId() != p_caster->GetMapId() ||
				p_caster->CombatStatus.IsInCombat() || static_cast<Player*>(target)->CombatStatus.IsInCombat() )
				return;
			if( static_cast<Player*>(target)->getClass() != WARRIOR && static_cast<Player*>(target)->getClass() != PALADIN )
				return;
			p_caster->SafeTeleport( target->GetMapMgr(), target->GetPosition() );
		}break;

	//Blue coffe  - restore X% mana instantly
	case 951:
		{
			if( !p_caster )
				return;

			uint32 power_index = p_caster->GetPowerType();
			uint32 add;
			add = p_caster->GetUInt32Value( UNIT_FIELD_MAXPOWER1 + power_index ) * 80 / 100;
			if( add + p_caster->GetUInt32Value( UNIT_FIELD_POWER1 + power_index) > p_caster->GetUInt32Value( UNIT_FIELD_MAXPOWER1 + power_index) )
				add = p_caster->GetUInt32Value( UNIT_FIELD_MAXPOWER1 + power_index) - p_caster->GetUInt32Value( UNIT_FIELD_POWER1 + power_index);
			p_caster->ModSignedInt32Value( UNIT_FIELD_POWER1 + power_index, add );
			
		}break;

	//Tag, you're it  - swap health from someone in your group
	case 27419:
		{
			if( !p_caster )
				return;
			
			//search a player in group that it is in range that has full hp
			SubGroup * sgr = p_caster->GetGroup() ? p_caster->GetGroup()->GetSubGroup( p_caster->GetSubGroup() ) : 0;;

			if( !sgr )
				return;

			Player *target=NULL;
            p_caster->GetGroup()->Lock();
            for(GroupMembersSet::iterator itr = sgr->GetGroupMembersBegin(); itr != sgr->GetGroupMembersEnd(); ++itr)
            {
				if((*itr)->m_loggedInPlayer 
					&& (*itr)->m_loggedInPlayer->GetUInt32Value( UNIT_FIELD_HEALTH) == (*itr)->m_loggedInPlayer->GetUInt32Value( UNIT_FIELD_MAXHEALTH) 
					&& p_caster->GetDistance2dSq( (*itr)->m_loggedInPlayer ) < 80*80
					)
				{
                    target = (*itr)->m_loggedInPlayer;
					break;
				}
            }
            p_caster->GetGroup()->Unlock();
			if( target )
			{
				uint32 HP1 = target->GetUInt32Value( UNIT_FIELD_HEALTH) + 1;
				uint32 HP2 = p_caster->GetUInt32Value( UNIT_FIELD_HEALTH) + 1;
				if( HP1 > p_caster->GetUInt32Value( UNIT_FIELD_MAXHEALTH ) )
					HP1 = p_caster->GetUInt32Value( UNIT_FIELD_MAXHEALTH );
				if( HP2 > target->GetUInt32Value( UNIT_FIELD_MAXHEALTH ) )
					HP2 = target->GetUInt32Value( UNIT_FIELD_MAXHEALTH );

				target->SetUInt32Value( UNIT_FIELD_HEALTH, HP2 );
				p_caster->SetUInt32Value( UNIT_FIELD_HEALTH, HP2 );
			}
		}break;

	//normal horadric cube - add random property to the selected item
	case 13642:
		{
			if( !p_caster ) 
			{
				sLog.outDebug("Missing player caster");
				return;
			}

			//get item from first inventory slot
			itemTarget = p_caster->GetItemInterface()->GetInventoryItem( INVENTORY_SLOT_ITEM_1 );
			if( !itemTarget )
			{
				sLog.outDebug("No item in backpack slot 1");
				return;
			}

			int32 recordcount = dbcRandomProps.GetNumRows();
			if( !recordcount )
			{
				sLog.outDebug("Randomprop dbc is empty");
				return;
			}

			int32 retry_count = 10;
			int32 selectedrow = RandomUInt( recordcount - 1 );
			RandomProps* rp= dbcRandomProps.LookupRow( selectedrow );

			//make sure we get one
			while( !rp || rp->enchantments[ 0 ]==0 )
			{
				selectedrow--;
				if( selectedrow == 0 )
				{
					if( retry_count == 0 )
					{
						sLog.outDebug("We could not find any randomprop to select");
						return;
					}
					selectedrow = retry_count + RandomUInt( recordcount - 1 );
				}
				rp = dbcRandomProps.LookupRow( selectedrow );
			}

			//get a random slot
			EnchantEntry* re = dbcEnchant.LookupEntry( rp->enchantments[0] );
			if( !re )
			{
				sLog.outDebug("Selected random property has invalid enchantment");
				return;
			}
			uint32 intoslot = 2 + RandomUInt( 8 );
			itemTarget->RemoveEnchantment( intoslot );
			itemTarget->AddEnchantment( re, 30*60, false, true, false, intoslot, 1 );
//			itemTarget->ApplyEnchantmentBonus( intoslot, true );
			//randomly apply rest
			for(int i=1;i<3;i++)
				if( RandChance( 10 ) )
				{
					EnchantEntry* re = dbcEnchant.LookupEntry( rp->enchantments[i] );
					if( !re )
						continue;
					uint32 intoslot = 2 + RandomUInt( 8 );
					itemTarget->RemoveEnchantment( intoslot );
					itemTarget->AddEnchantment( re, 30*60, false, true, false, intoslot, 1 );
//					itemTarget->ApplyEnchantmentBonus( intoslot, true );
				}
		}break;

	//Blessed horadric cube - random property but does not expire
	case 16181:
		{
			//add random property to the selected item
			if( !p_caster ) 
				return;

			itemTarget = p_caster->GetItemInterface()->GetInventoryItem( INVENTORY_SLOT_ITEM_1 );
			if( !itemTarget )
				return;

			//get weakest enchantment
			int32 intoslot = -1;
			int32 weakest = 0x00FFFFFF;
			//no more free slots ? Let's try to find a weakest
			//get each enchantment
			for(int ei=0;ei<(ITEM_FIELD_ENCHANTMENT_12_3-ITEM_FIELD_ENCHANTMENT_1_1)/3;ei++)
			{
				uint32 eid = itemTarget->GetUInt32Value( ITEM_FIELD_ENCHANTMENT_1_1 + ei*3 );
				if( eid )
				{
					EnchantEntry* tre = dbcEnchant.LookupEntry( eid );
					if( !tre )
						continue;
					if(tre->type[0] == 2 || tre->type[0] == 4 || tre->type[0] == 5 )
					{
						if( tre->min[0] < weakest )
						{
							intoslot = ei;
							weakest = tre->min[0];
						}
					}
					else if( tre->spell[0] )
					{
						SpellEntry *spbase = dbcSpell.LookupEntryForced( tre->spell[0] );
						if( spbase && spbase->eff[0].EffectBasePoints < weakest )
						{
							weakest = spbase->eff[0].EffectBasePoints;
							intoslot = ei;
						}
					}
					else
					{
						weakest = 0;
						intoslot = ei;
					}
				}
				else
				{
					intoslot = ei;
					weakest = 0;
					break; //we found one so no need to continue;
				}
			}

			static int selected_enchants[11][647] =
			{
				//WARRIOR
				{ 69,73,93,105,109,113,195,196,197,198,352,356,368,372,403,411,436,583,591,684,763,852,856,863,924,1046,1050,1054,1058,1062,1066,1070,1074,1078,1082,1086,1090,1094,1098,1102,1106,1110,1114,1203,1207,1211,1215,1219,1506,1563,1586,1590,1594,1598,1602,1606,1610,1614,1618,1622,1626,1885,1943,1947,1951,1955,1959,1963,1967,1971,1983,1984,1985,1986,2078,2506,2545,2622,2647,2653,2655,2658,2687,2691,2695,2697,2703,2711,2713,2724,2730,2731,2735,2736,2739,2743,2751,2754,2755,2764,2767,2769,2771,2772,2773,2775,2783,2784,2785,2786,2787,2796,2797,2830,2831,2838,2839,2843,2844,2845,2849,2850,2851,2857,2858,2860,2864,2870,2871,2873,2874,2875,2876,2879,2880,2883,2884,2885,2886,2887,2888,2895,2899,2902,2907,2908,2909,2913,2914,2918,2923,2926,2927,2934,2935,2939,2941,2942,2943,2950,2951,2952,2955,2965,2966,2967,2971,2972,2975,2977,2983,2991,2994,2996,2999,3003,3011,3015,3017,3047,3055,3062,3063,3067,3068,3071,3075,3092,3094,3103,3104,3105,3107,3115,3119,3120,3121,3127,3128,3129,3132,3135,3139,3152,3159,3204,3205,3208,3212,3217,3218,3219,3220,3224,3227,3228,3231,3234,3248,3249,3253,3256,3261,3263,3268,3276,3280,3301,3304,3312,3314,3316,3324,3325,3329,3336,3337,3340,3351,3357,3358,3359,3360,3361,3362,3363,3375,3376,3377,3378,3379,3382,3383,3387,3391,3395,3407,3411,3419,3420,3423,3428,3434,3435,3450,3451,3452,3453,3459,3460,3464,3468,3492,3496,3497,3500,3506,3507,3522,3523,3525,3527,3528,3532,3536,3540,3565,3569,3570,3573,3579,3580,3621,3624,3631,3636,3646,3647,3648,3652,3657,3660,3664,3668,3676,3696,3698,3700,3703,3704,3754,3765,3766,3777,3778,3798,3800,3801,3814,3818,3822, },
				//PALADIN
				{ 34,65,69,73,81,97,105,109,113,195,196,197,198,209,352,356,364,372,411,429,436,441,587,591,684,763,804,852,856,863,903,924,931,1046,1050,1054,1058,1062,1066,1070,1074,1078,1082,1086,1090,1118,1122,1126,1130,1134,1138,1142,1203,1207,1211,1223,1245,1249,1253,1257,1261,1265,1269,1273,1277,1281,1289,1293,1297,1301,1305,1309,1313,1317,1321,1325,1337,1341,1345,1349,1353,1357,1361,1365,1369,1373,1381,1385,1389,1393,1397,1401,1405,1409,1413,1417,1429,1433,1437,1441,1445,1449,1453,1457,1461,1465,1506,1563,1586,1590,1594,1598,1602,1606,1610,1614,1618,1622,1626,1885,1901,1943,1947,1951,1955,1959,1963,1967,1971,1983,1984,1985,1986,2078,2308,2312,2316,2320,2324,2328,2332,2336,2340,2344,2484,2488,2506,2543,2545,2566,2584,2588,2607,2619,2622,2647,2651,2653,2655,2658,2683,2691,2695,2697,2711,2713,2721,2724,2727,2730,2731,2735,2736,2739,2743,2747,2751,2754,2755,2756,2759,2760,2761,2762,2763,2764,2767,2769,2771,2772,2773,2775,2783,2784,2785,2786,2787,2796,2797,2827,2830,2831,2838,2839,2843,2844,2845,2849,2850,2851,2856,2857,2858,2859,2860,2862,2863,2864,2867,2870,2871,2873,2874,2875,2876,2878,2879,2880,2883,2884,2885,2886,2887,2888,2891,2895,2899,2902,2907,2908,2909,2910,2913,2914,2916,2918,2923,2926,2927,2933,2934,2935,2941,2942,2943,2950,2951,2952,2955,2959,2965,2966,2967,2971,2972,2975,2977,2979,2982,2983,2991,2994,2995,2996,2999,3002,3003,3007,3011,3015,3017,3047,3051,3055,3061,3062,3063,3067,3068,3069,3071,3075,3076,3079,3081,3083,3084,3087,3090,3091,3092,3094,3099,3103,3104,3105,3107,3110,3111,3115,3119,3120,3121,3127,3128,3129,3131,3132,3135,3139,3140,3142,3143,3146,3151,3152,3159,3163,3204,3205,3208,3212,3215,3216,3217,3218,3219,3220,3227,3228,3229,3231,3234,3240,3245,3248,3249,3253,3261,3263,3267,3268,3270,3271,3272,3276,3280,3284,3286,3287,3300,3301,3303,3304,3308,3309,3312,3314,3316,3324,3325,3329,3336,3337,3338,3340,3351,3353,3357,3358,3359,3360,3361,3362,3363,3375,3376,3377,3378,3379,3382,3383,3385,3386,3387,3391,3395,3399,3403,3406,3407,3410,3411,3412,3413,3414,3415,3416,3417,3419,3420,3423,3428,3432,3434,3435,3436,3437,3443,3444,3445,3448,3450,3451,3452,3453,3459,3460,3462,3463,3464,3468,3472,3476,3480,3482,3483,3484,3485,3487,3488,3489,3490,3492,3496,3497,3500,3504,3506,3507,3508,3509,3515,3516,3517,3520,3522,3523,3525,3527,3528,3530,3531,3532,3536,3540,3548,3552,3554,3555,3556,3557,3559,3560,3561,3563,3565,3569,3570,3573,3577,3579,3580,3581,3582,3588,3589,3590,3600,3602,3621,3622,3624,3626,3631,3635,3636,3639,3646,3647,3648,3652,3657,3659,3660,3662,3664,3668,3676,3677,3680,3684,3686,3687,3688,3690,3691,3692,3693,3696,3698,3700,3701,3703,3704,3707,3708,3709,3715,3716,3720,3754,3765,3766,3775,3777,3778,3792,3794,3796,3797,3798,3800,3801,3802,3806,3810,3814,3818,3821,3822,3825,3830,3831,3834,3842, },
				//HUNTER
				{ 69,73,81,93,97,105,109,113,195,196,197,198,352,356,364,368,372,403,411,436,583,587,591,684,763,852,856,863,924,1046,1050,1054,1058,1062,1066,1070,1074,1078,1082,1086,1090,1094,1098,1102,1106,1110,1114,1118,1122,1126,1130,1134,1138,1142,1203,1207,1211,1215,1219,1223,1506,1885,1901,1943,1947,1951,1955,1959,1963,1967,1971,1983,1984,1985,1986,2040,2044,2048,2052,2056,2060,2064,2068,2072,2076,2078,2506,2523,2545,2584,2588,2622,2647,2655,2658,2687,2691,2695,2697,2703,2711,2713,2721,2724,2730,2731,2735,2736,2739,2743,2747,2751,2754,2755,2760,2761,2762,2763,2764,2767,2769,2771,2772,2773,2775,2783,2784,2785,2786,2787,2796,2797,2827,2830,2831,2838,2839,2843,2844,2845,2849,2850,2851,2857,2858,2860,2863,2864,2870,2871,2873,2874,2875,2876,2879,2880,2883,2884,2885,2886,2887,2895,2899,2902,2907,2908,2909,2913,2914,2916,2918,2923,2926,2927,2934,2935,2939,2941,2942,2950,2951,2952,2955,2965,2966,2967,2972,2977,2982,2991,2994,2995,2996,2999,3002,3003,3011,3015,3017,3047,3051,3055,3061,3062,3063,3067,3068,3071,3075,3076,3081,3091,3092,3094,3099,3103,3104,3105,3107,3110,3111,3115,3120,3121,3127,3128,3129,3132,3135,3139,3140,3143,3146,3152,3155,3159,3204,3205,3212,3216,3217,3218,3219,3220,3224,3227,3231,3234,3248,3249,3253,3256,3261,3263,3268,3280,3301,3304,3312,3314,3316,3324,3325,3329,3336,3337,3338,3340,3351,3353,3357,3358,3359,3360,3361,3362,3376,3377,3378,3379,3382,3383,3387,3391,3395,3407,3411,3414,3415,3419,3420,3423,3428,3434,3435,3443,3444,3450,3451,3452,3453,3459,3460,3464,3468,3487,3488,3492,3496,3497,3500,3506,3507,3515,3516,3522,3523,3525,3527,3528,3532,3536,3540,3559,3560,3565,3569,3570,3573,3579,3580,3588,3589,3621,3622,3624,3631,3636,3643,3646,3647,3648,3652,3657,3660,3664,3668,3676,3690,3691,3696,3698,3700,3703,3704,3709,3715,3720,3754,3765,3766,3775,3777,3778,3800,3801,3806,3810,3814,3818,3822, },
				//ROGUE
				{ 73,93,105,113,195,196,197,198,356,368,403,411,436,583,763,852,863,924,1070,1074,1078,1082,1086,1090,1094,1098,1102,1106,1110,1114,1211,1215,1219,1943,1947,1951,1955,1959,1963,1967,1971,1983,1984,1985,1986,2078,2506,2545,2622,2655,2658,2687,2695,2697,2703,2711,2713,2724,2730,2731,2735,2736,2739,2743,2751,2752,2753,2754,2755,2759,2764,2767,2769,2771,2772,2773,2775,2783,2784,2785,2786,2787,2796,2797,2830,2831,2838,2839,2843,2844,2845,2849,2850,2851,2856,2857,2858,2859,2860,2862,2864,2867,2870,2871,2873,2874,2875,2876,2878,2880,2883,2884,2885,2886,2887,2891,2895,2899,2902,2907,2908,2909,2913,2914,2915,2918,2923,2926,2933,2934,2935,2939,2941,2942,2950,2951,2952,2955,2965,2966,2967,2972,2977,2991,2994,2996,2999,3003,3011,3017,3047,3055,3057,3062,3063,3067,3068,3071,3072,3075,3079,3084,3087,3090,3092,3094,3104,3105,3107,3120,3121,3127,3128,3129,3131,3132,3135,3139,3152,3159,3204,3205,3212,3215,3217,3218,3219,3220,3224,3227,3229,3231,3234,3245,3248,3249,3253,3256,3261,3263,3268,3280,3284,3301,3304,3314,3316,3324,3325,3329,3336,3337,3340,3351,3358,3359,3360,3361,3362,3376,3377,3378,3379,3382,3383,3385,3387,3391,3395,3405,3407,3408,3411,3419,3420,3423,3428,3434,3435,3436,3450,3451,3452,3453,3459,3460,3462,3464,3468,3477,3478,3480,3484,3492,3496,3497,3500,3506,3507,3508,3522,3523,3525,3527,3528,3530,3532,3536,3540,3549,3550,3552,3556,3565,3569,3570,3573,3579,3580,3581,3600,3621,3624,3631,3636,3646,3647,3648,3652,3657,3660,3662,3664,3668,3676,3680,3681,3682,3684,3688,3696,3698,3700,3703,3704,3707,3708,3754,3765,3766,3777,3778,3792,3800,3801,3814,3818,3821,3822,3842, },
				//PRIEST
				{ 34,65,73,81,97,101,105,206,207,208,209,210,211,212,356,360,364,407,411,423,424,426,427,428,429,430,431,432,440,441,442,583,587,591,804,847,852,866,903,907,928,931,1070,1074,1078,1082,1086,1090,1118,1122,1126,1130,1134,1138,1142,1146,1150,1154,1158,1162,1166,1211,1223,1227,1231,1245,1253,1261,1269,1277,1293,1301,1309,1317,1325,1341,1349,1357,1365,1373,1381,1389,1397,1405,1413,1429,1437,1445,1453,1461,1510,1891,1901,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2488,2504,2505,2543,2544,2566,2604,2605,2607,2608,2609,2610,2612,2617,2619,2650,2651,2652,2661,2669,2674,2683,2690,2692,2699,2700,2711,2713,2727,2728,2731,2739,2747,2759,2765,2768,2770,2778,2779,2780,2828,2831,2832,2851,2856,2859,2862,2863,2867,2872,2878,2883,2889,2891,2895,2896,2900,2901,2910,2912,2915,2918,2924,2933,2937,2938,2953,2955,2958,2959,2970,2974,2979,2981,3007,3011,3051,3066,3069,3071,3083,3087,3094,3098,3099,3117,3118,3123,3125,3131,3151,3153,3163,3198,3210,3211,3212,3215,3216,3229,3231,3240,3243,3245,3246,3248,3252,3254,3255,3257,3258,3267,3268,3270,3271,3272,3277,3278,3279,3282,3283,3284,3286,3287,3300,3303,3308,3309,3325,3329,3338,3339,3353,3362,3367,3378,3379,3380,3385,3386,3387,3390,3391,3399,3403,3408,3409,3412,3413,3416,3417,3432,3436,3445,3448,3452,3453,3457,3462,3463,3464,3472,3476,3480,3481,3484,3485,3489,3490,3504,3508,3517,3520,3525,3530,3531,3532,3535,3536,3548,3552,3553,3556,3557,3561,3563,3577,3581,3590,3595,3596,3600,3602,3615,3616,3617,3618,3619,3620,3626,3632,3635,3639,3647,3650,3652,3656,3659,3662,3674,3677,3684,3685,3688,3692,3693,3708,3716,3720,3749,3750,3752,3753,3765,3766,3778,3792,3794,3796,3797,3799,3802,3805,3814,3820,3821,3822,3825,3830,3831,3832,3834,3841,3842, },
				//Dk
				{ 34,65,73,81,97,101,105,195,196,197,198,206,207,208,209,210,211,212,356,360,364,407,411,423,424,426,427,428,429,430,431,432,436,440,441,442,583,587,591,804,847,852,866,903,907,928,931,1070,1074,1078,1082,1086,1090,1118,1122,1126,1130,1134,1138,1142,1146,1150,1154,1158,1162,1166,1211,1223,1227,1231,1245,1253,1261,1269,1277,1293,1301,1309,1317,1325,1341,1349,1357,1365,1373,1381,1389,1397,1405,1413,1429,1437,1445,1453,1461,1510,1563,1586,1590,1594,1598,1602,1606,1610,1614,1618,1622,1626,1891,1901,2078,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2488,2504,2505,2506,2543,2544,2545,2566,2585,2588,2604,2605,2607,2608,2609,2610,2612,2617,2619,2622,2650,2651,2652,2658,2661,2669,2674,2683,2690,2692,2695,2697,2699,2700,2711,2713,2717,2721,2724,2727,2728,2730,2731,2735,2736,2739,2747,2751,2752,2753,2755,2756,2759,2760,2761,2762,2763,2764,2765,2767,2768,2769,2770,2771,2772,2773,2775,2778,2779,2780,2783,2784,2785,2786,2787,2796,2797,2827,2828,2830,2831,2832,2838,2839,2843,2844,2845,2849,2850,2851,2856,2857,2858,2859,2860,2862,2863,2864,2867,2871,2872,2873,2874,2875,2876,2878,2880,2883,2884,2885,2886,2887,2889,2891,2895,2896,2899,2900,2901,2902,2908,2909,2910,2912,2913,2914,2915,2916,2918,2923,2924,2926,2933,2934,2935,2937,2938,2941,2942,2943,2946,2950,2951,2952,2953,2955,2958,2959,2965,2966,2967,2970,2971,2974,2977,2979,2981,2982,2983,2986,2994,2995,2996,2997,3002,3003,3007,3010,3011,3012,3047,3051,3052,3055,3057,3061,3062,3066,3067,3068,3069,3070,3071,3072,3076,3079,3081,3083,3084,3087,3091,3092,3094,3098,3099,3104,3105,3107,3110,3111,3112,3113,3117,3118,3119,3120,3123,3125,3127,3128,3129,3131,3132,3135,3139,3140,3142,3143,3144,3146,3151,3152,3153,3159,3163,3198,3204,3205,3208,3210,3211,3212,3215,3216,3217,3218,3219,3220,3227,3228,3229,3231,3234,3240,3243,3245,3246,3248,3249,3252,3254,3255,3257,3258,3261,3263,3267,3268,3270,3271,3272,3276,3277,3278,3279,3280,3282,3283,3284,3286,3287,3300,3301,3303,3304,3308,3309,3314,3316,3324,3325,3326,3328,3329,3332,3336,3337,3338,3339,3340,3351,3353,3358,3362,3367,3375,3376,3378,3379,3380,3382,3383,3385,3386,3387,3390,3391,3395,3399,3403,3405,3406,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3420,3422,3423,3424,3426,3428,3432,3436,3443,3444,3445,3448,3450,3452,3453,3457,3459,3460,3462,3463,3464,3468,3472,3476,3477,3478,3480,3481,3482,3483,3484,3485,3487,3488,3489,3490,3491,3492,3493,3494,3497,3500,3504,3508,3515,3516,3517,3520,3522,3525,3527,3528,3530,3531,3532,3535,3536,3540,3548,3549,3550,3552,3553,3554,3555,3556,3557,3559,3560,3561,3563,3564,3565,3566,3567,3570,3573,3577,3581,3588,3589,3590,3595,3596,3600,3602,3615,3616,3617,3618,3619,3620,3621,3622,3624,3626,3632,3635,3636,3639,3646,3647,3650,3652,3656,3657,3659,3660,3662,3664,3668,3674,3676,3677,3678,3679,3680,3681,3682,3684,3685,3686,3687,3688,3690,3691,3692,3693,3696,3704,3708,3709,3715,3716,3720,3749,3750,3752,3753,3754,3755,3765,3766,3767,3775,3776,3778,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3805,3806,3808,3810,3814,3817,3820,3821,3822,3823,3825,3830,3831,3832,3834,3841,3842, },
				//SHAMAN
				{ 34,65,73,81,97,105,113,195,196,197,198,356,364,372,411,436,591,763,804,856,863,903,931,1050,1058,1066,1074,1082,1090,1122,1130,1138,1203,1211,1245,1253,1261,1269,1277,1293,1301,1309,1317,1325,1341,1349,1357,1365,1373,1381,1389,1397,1405,1413,1429,1437,1445,1453,1461,1506,1563,1590,1598,1606,1614,1622,1885,1901,1947,1955,1963,1971,1983,1984,1985,1986,2078,2488,2506,2543,2545,2584,2588,2619,2622,2653,2655,2658,2683,2691,2695,2697,2713,2721,2724,2730,2731,2735,2736,2739,2747,2751,2754,2755,2756,2759,2760,2761,2762,2763,2764,2767,2769,2771,2772,2773,2775,2783,2784,2785,2786,2787,2796,2797,2827,2830,2838,2839,2843,2844,2845,2849,2850,2851,2856,2857,2858,2859,2860,2862,2864,2867,2870,2871,2873,2874,2875,2876,2878,2880,2883,2884,2885,2886,2887,2888,2891,2899,2902,2907,2908,2909,2913,2914,2916,2918,2926,2927,2933,2934,2935,2941,2942,2943,2950,2951,2952,2955,2965,2966,2967,2972,2975,2977,2982,2983,2991,2994,2995,2996,2999,3002,3007,3015,3017,3047,3055,3061,3062,3063,3068,3069,3071,3076,3079,3081,3084,3087,3090,3091,3092,3094,3103,3104,3105,3110,3111,3119,3120,3121,3127,3128,3129,3131,3132,3135,3140,3142,3143,3146,3152,3159,3204,3205,3208,3215,3216,3217,3218,3219,3220,3227,3229,3231,3234,3245,3248,3249,3253,3261,3263,3267,3270,3271,3272,3280,3286,3287,3301,3303,3304,3308,3309,3312,3314,3316,3324,3329,3336,3337,3338,3340,3351,3353,3358,3359,3360,3361,3362,3363,3376,3377,3378,3379,3382,3383,3385,3386,3387,3395,3406,3410,3411,3412,3413,3414,3415,3416,3417,3419,3420,3428,3434,3435,3436,3437,3443,3444,3445,3450,3451,3452,3453,3459,3460,3462,3463,3468,3482,3483,3484,3485,3487,3488,3489,3490,3492,3497,3500,3506,3507,3508,3509,3515,3516,3517,3522,3523,3525,3527,3528,3530,3531,3532,3540,3554,3555,3556,3557,3559,3560,3561,3563,3565,3570,3573,3579,3580,3581,3582,3588,3589,3590,3600,3621,3622,3624,3631,3636,3646,3647,3648,3652,3657,3659,3660,3662,3664,3677,3680,3686,3687,3688,3690,3691,3692,3693,3696,3698,3701,3703,3704,3707,3709,3715,3716,3720,3754,3765,3775,3777,3778,3792,3794,3796,3797,3800,3801,3806,3810,3818,3821,3825,3831,3842, },
				//MAGE
				{ 34,65,73,81,97,101,105,206,207,208,209,210,211,212,356,360,364,407,411,423,424,426,427,428,429,430,431,432,440,441,442,583,587,591,804,847,852,866,903,907,928,931,1070,1074,1078,1082,1086,1090,1118,1122,1126,1130,1134,1138,1142,1146,1150,1154,1158,1162,1166,1211,1223,1227,1231,1245,1253,1261,1269,1277,1293,1301,1309,1317,1325,1341,1349,1357,1365,1373,1381,1389,1397,1405,1413,1429,1437,1445,1453,1461,1510,1891,1901,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2488,2504,2505,2543,2544,2566,2604,2605,2607,2608,2609,2610,2612,2617,2619,2650,2651,2652,2661,2669,2674,2683,2690,2692,2699,2700,2711,2713,2727,2728,2731,2739,2747,2759,2765,2768,2770,2778,2779,2780,2828,2831,2832,2851,2856,2859,2862,2863,2867,2872,2878,2883,2889,2891,2895,2896,2900,2901,2910,2912,2915,2918,2924,2933,2937,2938,2953,2955,2958,2959,2970,2974,2979,2981,3007,3011,3051,3066,3069,3071,3083,3087,3094,3098,3099,3117,3118,3123,3125,3131,3151,3153,3163,3198,3210,3211,3212,3215,3216,3229,3231,3240,3243,3245,3246,3248,3252,3254,3255,3257,3258,3267,3268,3270,3271,3272,3277,3278,3279,3282,3283,3284,3286,3287,3300,3303,3308,3309,3325,3329,3338,3339,3353,3362,3367,3378,3379,3380,3385,3386,3387,3390,3391,3399,3403,3408,3409,3412,3413,3416,3417,3432,3436,3445,3448,3452,3453,3457,3462,3463,3464,3472,3476,3480,3481,3484,3485,3489,3490,3504,3508,3517,3520,3525,3530,3531,3532,3535,3536,3548,3552,3553,3556,3557,3561,3563,3577,3581,3590,3595,3596,3600,3602,3615,3616,3617,3618,3619,3620,3626,3632,3635,3639,3647,3650,3652,3656,3659,3662,3674,3677,3684,3685,3688,3692,3693,3708,3716,3720,3749,3750,3752,3753,3765,3766,3778,3792,3794,3796,3797,3799,3802,3805,3814,3820,3821,3822,3825,3830,3831,3832,3834,3841,3842, },
				//WARLOCK
				{ 34,65,73,81,97,105,206,207,208,209,210,211,212,356,364,411,423,424,426,427,428,429,430,431,432,440,441,442,587,804,847,852,866,903,928,931,1070,1074,1078,1082,1086,1090,1118,1122,1126,1130,1134,1138,1142,1211,1223,1245,1253,1261,1269,1277,1293,1301,1309,1317,1325,1341,1349,1357,1365,1373,1381,1389,1397,1405,1413,1429,1437,1445,1453,1461,1891,1901,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2488,2504,2505,2543,2544,2566,2604,2605,2607,2608,2609,2610,2612,2617,2619,2650,2651,2652,2661,2669,2674,2683,2690,2692,2700,2711,2713,2727,2728,2731,2739,2747,2759,2765,2768,2770,2778,2780,2828,2831,2832,2851,2856,2859,2862,2863,2867,2872,2878,2883,2889,2891,2895,2896,2900,2901,2910,2912,2915,2918,2924,2933,2937,2938,2953,2955,2958,2959,2970,2974,2979,2981,3007,3011,3051,3066,3069,3071,3083,3087,3094,3098,3099,3117,3118,3125,3131,3151,3153,3163,3198,3210,3211,3212,3215,3216,3229,3231,3240,3243,3245,3246,3248,3252,3254,3255,3257,3258,3267,3268,3270,3271,3272,3277,3278,3279,3282,3283,3284,3286,3287,3300,3303,3308,3309,3325,3329,3338,3339,3353,3362,3367,3378,3379,3380,3385,3386,3387,3390,3391,3399,3403,3408,3409,3412,3413,3416,3417,3432,3436,3445,3448,3452,3453,3457,3462,3463,3464,3472,3476,3480,3481,3484,3485,3489,3490,3504,3508,3517,3520,3525,3530,3531,3532,3535,3536,3548,3552,3553,3556,3557,3561,3563,3577,3581,3590,3595,3596,3600,3602,3615,3616,3617,3618,3619,3620,3626,3632,3635,3639,3647,3650,3652,3656,3659,3662,3674,3677,3684,3685,3688,3692,3693,3708,3716,3720,3749,3750,3752,3753,3765,3766,3778,3792,3794,3796,3797,3799,3802,3805,3814,3820,3821,3822,3825,3830,3831,3832,3834,3841,3842, },
				{ 0 },
				//DRUID
				{ 34,65,73,81,97,101,105,113,195,196,197,198,356,360,364,407,411,436,583,587,591,763,804,852,863,903,907,931,1070,1074,1078,1082,1086,1090,1118,1122,1126,1130,1134,1138,1142,1146,1150,1154,1158,1162,1166,1211,1223,1227,1231,1245,1253,1261,1269,1277,1293,1301,1309,1317,1325,1341,1349,1357,1365,1373,1381,1389,1397,1405,1413,1429,1437,1445,1453,1461,1510,1901,1947,1955,1963,1971,1983,1984,1985,1986,2078,2488,2506,2543,2545,2584,2585,2588,2619,2622,2653,2655,2658,2683,2695,2697,2699,2711,2713,2717,2721,2724,2730,2731,2735,2736,2739,2747,2751,2752,2753,2754,2755,2756,2759,2760,2761,2762,2763,2764,2767,2769,2771,2772,2773,2775,2779,2783,2784,2785,2786,2787,2796,2797,2827,2830,2831,2838,2839,2843,2844,2845,2849,2850,2851,2856,2857,2858,2859,2860,2862,2863,2864,2867,2870,2871,2873,2874,2875,2876,2878,2880,2883,2884,2885,2886,2887,2888,2891,2895,2899,2902,2907,2908,2909,2913,2914,2915,2916,2918,2923,2926,2933,2934,2935,2941,2942,2946,2950,2951,2952,2955,2965,2966,2967,2972,2975,2977,2982,2986,2991,2994,2995,2996,2997,2999,3002,3003,3007,3010,3011,3012,3017,3047,3051,3052,3055,3057,3061,3062,3063,3067,3068,3069,3070,3071,3072,3076,3079,3081,3083,3084,3087,3090,3091,3092,3094,3099,3104,3105,3107,3110,3111,3112,3113,3120,3121,3123,3127,3128,3129,3131,3132,3135,3139,3140,3142,3143,3144,3146,3152,3159,3204,3205,3212,3215,3216,3217,3218,3219,3220,3227,3229,3231,3234,3245,3248,3249,3253,3261,3263,3267,3268,3270,3271,3272,3280,3284,3286,3287,3301,3303,3304,3308,3309,3314,3316,3324,3325,3326,3328,3329,3332,3336,3337,3338,3340,3351,3353,3358,3359,3360,3361,3362,3363,3376,3377,3378,3379,3382,3383,3385,3386,3387,3391,3395,3399,3405,3406,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3419,3420,3422,3423,3424,3426,3428,3432,3436,3443,3444,3445,3450,3451,3452,3453,3459,3460,3462,3463,3464,3468,3472,3477,3478,3480,3481,3482,3483,3484,3485,3487,3488,3489,3490,3491,3492,3493,3494,3497,3500,3504,3508,3515,3516,3517,3522,3523,3525,3527,3528,3530,3531,3532,3536,3540,3549,3550,3552,3553,3554,3555,3556,3557,3559,3560,3561,3563,3564,3565,3566,3567,3570,3573,3577,3581,3588,3589,3590,3600,3621,3622,3624,3631,3636,3646,3647,3648,3652,3657,3659,3660,3662,3664,3668,3676,3677,3678,3679,3680,3681,3682,3684,3685,3686,3687,3688,3690,3691,3692,3693,3696,3704,3708,3709,3715,3716,3720,3754,3755,3765,3766,3767,3775,3776,3777,3778,3792,3793,3794,3795,3796,3797,3800,3801,3806,3808,3810,3814,3817,3818,3821,3822,3823,3825,3831,3842, }
			};

			static int search_limits[11] = 
			{ 
				321,//WARRIOR
				556,//PALADIN
				371,//HUNTER
				320,//ROGUE
				375,//PRIEST
				646,//DK
				415,//SHAMAN
				375,//MAGE
				357,//WARLOCK
				1,
				492 //DRUID
			};
			int32 pc = p_caster->getClass()-1;
			if( pc > 11 || pc < 0 )
				return;

			int32 startindex = RandomUInt( search_limits[ pc ] );
			int32 iters_made=0;
			int32 cur_value=0; 
			do{
				iters_made++;
				startindex = ( startindex + 1 ) % search_limits[ pc ];

				//one of these is enough ?
				bool already_have_it=false;
				for(int ei=0;ei<11;ei++)
					if( itemTarget->GetUInt32Value( ITEM_FIELD_ENCHANTMENT_1_1 + ei*3 ) == selected_enchants[ pc ] [ startindex ] )
					{
						already_have_it = true;
						break;
					}
				if( already_have_it )
					continue;

				EnchantEntry* tre = dbcEnchant.LookupEntry( selected_enchants[ pc ] [ startindex ] );
				if(tre->type[0] == 2 || tre->type[0] == 4 || tre->type[0] == 5 )
					cur_value = tre->min[0];
				else if( tre->spell[0] )
				{
					SpellEntry *spbase = dbcSpell.LookupEntryForced( tre->spell[0] );
					if( spbase )
						cur_value = spbase->eff[0].EffectBasePoints;
				}
				else cur_value = 0;
			}while( cur_value < weakest && iters_made < search_limits[ pc ] );
			if( iters_made < search_limits[ pc ] )
			{
				EnchantEntry* re = dbcEnchant.LookupEntry( selected_enchants[ pc ] [ startindex ] );
				itemTarget->RemoveEnchantment( intoslot );
				itemTarget->AddEnchantment( re, 48*60*60, false, true, false, intoslot, 1 );
//				itemTarget->ApplyEnchantmentBonus( intoslot, true );
			}
		}break;

	//Blessed Dumbness - remove most of the threath from target
	case 1356:
		{
			if( !p_caster )
				return;

			Unit *target = u_caster->GetMapMgr()->GetUnit( p_caster->GetSelection() );

			if( !target || !target->isAlive() || !target->IsCreature() || !target->GetAIInterface() ) 
				return;

			if( target->GetAIInterface()->GetMostHated() == target )
				return;

			int32 oldthreat = target->GetAIInterface()->getThreatByPtr( target );
			target->GetAIInterface()->modThreatByPtr( target, -oldthreat*90/100 ); //almost make us invisible
		}break;

	//Mirror world - change the orientation of someone
	case 34103:
		{
			if( !p_caster )
				return;

			Unit *target = u_caster->GetMapMgr()->GetUnit( p_caster->GetSelection() );

			if( !target || !target->isAlive() || !target->IsPlayer()) 
				return;

			float newo = target->GetOrientation() + 3.14f;
			if( newo > 6.28f )
				newo -= 6.28f;
			target->SetOrientation( newo );
			target->SetFacing( newo );
		}break;

	//second hand Omnigel - morph item that is max blue
	case 35519:
		{
			if( !p_caster )
				return;
		
			itemTarget = p_caster->GetItemInterface()->GetInventoryItem( INVENTORY_SLOT_ITEM_1 );
			if( !itemTarget )
				return;

			if( itemTarget->GetProto()->Quality > 2 )
				return;

			uint32 next_id = itemTarget->GetProto()->ItemId;
			uint32 at_least_lvl = itemTarget->GetProto()->ItemLevel;
			uint32 needclass = itemTarget->GetProto()->Class;
			uint32 needsclass = itemTarget->GetProto()->SubClass;
			uint32 invtype = itemTarget->GetProto()->InventoryType;
			uint32 need_ql = itemTarget->GetProto()->Quality;

			StorageContainerIterator<ItemPrototype> * itr;
			ItemPrototype *pItemPrototype,*newitem=NULL;
			//try to get better quality now
			do
			{
				itr = ItemPrototypeStorage.MakeIterator();
				while(!itr->AtEnd())
				{
					pItemPrototype = itr->Get();
					if( pItemPrototype->ItemId > next_id 
						&& at_least_lvl <= pItemPrototype->ItemLevel 
						&& needclass == pItemPrototype->Class 
						&& needsclass == pItemPrototype->SubClass
						&& invtype == pItemPrototype->InventoryType 
						&& need_ql == pItemPrototype->Quality
						)
					{
						newitem = pItemPrototype;
						break; //we actually found one
					}
					if(!itr->Inc())
						break;
				}
				next_id = 0;
				at_least_lvl = 0;
				need_ql++;
			}while( need_ql < 6 && !newitem );

			if( newitem )
			{
				uint32 oldcount = itemTarget->GetStackCount();
				//create new
				Item *itm = objmgr.CreateItem( newitem->ItemId, p_caster );
				uint32 new_count = MIN( itm->GetProto()->MaxCount, oldcount );
				itm->SetStackCount( new_count );
				//remove old
				p_caster->GetItemInterface()->SafeFullRemoveItemFromSlot( INVENTORY_SLOT_NOT_SET, INVENTORY_SLOT_ITEM_1 );
				//add new
				itm->m_isDirty=true;
				p_caster->GetItemInterface()->SafeAddItem(itm, INVENTORY_SLOT_NOT_SET, INVENTORY_SLOT_ITEM_1 );
				p_caster->GetSession()->SendItemPushResult(itm, false, true, false, true, INVENTORY_SLOT_NOT_SET, INVENTORY_SLOT_ITEM_1, 1 );
			}
		}break;

	//Omnigel - morph item into something else
	case 35518:
		{
			if( !p_caster )
				return;
		
			itemTarget = p_caster->GetItemInterface()->GetInventoryItem( INVENTORY_SLOT_ITEM_1 );
			if( !itemTarget )
				return;

			uint32 next_id = itemTarget->GetProto()->ItemId;
			uint32 at_least_lvl = itemTarget->GetProto()->ItemLevel;
			uint32 needclass = itemTarget->GetProto()->Class;
			uint32 needsclass = itemTarget->GetProto()->SubClass;
			uint32 invtype = itemTarget->GetProto()->InventoryType;
			uint32 need_ql = itemTarget->GetProto()->Quality;

			StorageContainerIterator<ItemPrototype> * itr;
			ItemPrototype *pItemPrototype,*newitem=NULL;
			//try to get better quality now
			do
			{
				itr = ItemPrototypeStorage.MakeIterator();
				while(!itr->AtEnd())
				{
					pItemPrototype = itr->Get();
					if( pItemPrototype->ItemId > next_id 
						&& pItemPrototype->MapID == 0
						&& at_least_lvl <= pItemPrototype->ItemLevel 
						&& needclass == pItemPrototype->Class 
						&& needsclass == pItemPrototype->SubClass
						&& invtype == pItemPrototype->InventoryType 
						&& need_ql == pItemPrototype->Quality
						)
					{
						newitem = pItemPrototype;
						break; //we actually found one
					}
					if(!itr->Inc())
						break;
				}
				next_id = 0;
				at_least_lvl = 0;
				need_ql++;
			}while( need_ql < 6 && !newitem );

			if( newitem )
			{
				//remove old
				p_caster->GetItemInterface()->SafeFullRemoveItemFromSlot( INVENTORY_SLOT_NOT_SET, INVENTORY_SLOT_ITEM_1 );
				//add new
				Item *itm = objmgr.CreateItem( newitem->ItemId, p_caster );
				itm->m_isDirty=true;
				p_caster->GetItemInterface()->SafeAddItem(itm, INVENTORY_SLOT_NOT_SET, INVENTORY_SLOT_ITEM_1 );
				p_caster->GetSession()->SendItemPushResult(itm, false, true, false, true, INVENTORY_SLOT_NOT_SET, INVENTORY_SLOT_ITEM_1, 1 );
			}
		}break;

	//The Q - do X% damage to something
	case 3507:
		{
			if( !p_caster )
				return;

			Unit *target = u_caster->GetMapMgr()->GetUnit( p_caster->GetSelection() );
			//add random property to the selected item
			if( !target || !isAttackable(target, p_caster, false) ) 
				return;

			uint32 cur_hp = target->GetUInt32Value( UNIT_FIELD_HEALTH );
			uint32 dmg_hp = cur_hp*15/100;
			p_caster->Strike(target,MELEE,m_spellInfo,0,0,dmg_hp,false,true);
		}break;

	//disco ball
	case 24228:
		{
			//selfcast we redirect it to selection
//			target = GetUnitCaster()->GetMapMgr()->GetUnit( static_cast<Player*>(GetUnitCaster())->GetSelection() );
			InrangeLoopExitAutoCallback AutoLock;
			for(InRangeSetRecProt::iterator itr = u_caster->GetInRangeSetBegin( AutoLock ); itr != u_caster->GetInRangeSetEnd(); ++itr)
			{
				if( !(*itr)->IsPlayer() || !static_cast<Player*>((*itr))->isAlive() || !static_cast<Player*>((*itr))->IsInWorld() )
					continue;

				static_cast<Unit*>((*itr))->SetUInt32Value(UNIT_NPC_EMOTESTATE, EMOTE_STATE_DANCE );
			}
			if(p_caster)
				p_caster->SetUInt32Value(UNIT_NPC_EMOTESTATE, EMOTE_STATE_DANCE );
		}break;

	//etheral horadric cube
	case 13643:
		{
			//add random property to the selected item
			if( !p_caster ) 
				return;

			itemTarget = p_caster->GetItemInterface()->GetInventoryItem( INVENTORY_SLOT_ITEM_1 );
			if( !itemTarget )
				return;

			int32 recordcount = dbcRandomProps.GetNumRows();
			if( !recordcount )
				return;
			int32 selectedrow = RandomUInt( recordcount - 1 );
			RandomProps* rp = dbcRandomProps.LookupRow( selectedrow );

			//make sure we get one
			while( !rp || rp->enchantments[ 0 ]==0 )
			{
				selectedrow--;
				if( selectedrow == 0 )
					selectedrow = RandomUInt( recordcount - 1 );
				rp = dbcRandomProps.LookupRow( selectedrow );
			}

			//random props might have more then 1 property
			for(int i=0;i<3;i++)
				if( rp->enchantments[i] )
				{
					EnchantEntry* re = dbcEnchant.LookupEntry( rp->enchantments[0] );
					if( !re )
						continue;
					int intoslot = -1;
					//first try to find a free slot
					for(int ei=2;ei<11;ei++)
						if( itemTarget->GetUInt32Value( ITEM_FIELD_ENCHANTMENT_1_1 + ei*3 ) == 0 )
						{
							intoslot = ei;
							break; //we found one so no need to continue;
						}
					//no more free slots ? Let's try to find a weaker 
					if( intoslot == -1 )
					{
						//comparing to this spell
						int32 strongesteff=0;
						for(uint32 ts=0;ts<3;ts++)
							if( re->spell[ts] )
							{
								SpellEntry *spbase = dbcSpell.LookupEntryForced( re->spell[ts] );
								if( !spbase )
									continue;
								if( spbase->eff[0].EffectBasePoints > strongesteff )
									strongesteff = spbase->eff[0].EffectBasePoints;
							}
						//get each enchantment
						for(int ei=2;ei<11;ei++)
						{
							uint32 eid = itemTarget->GetUInt32Value( ITEM_FIELD_ENCHANTMENT_1_1 + ei*3 );
							if( eid )
							{
								EnchantEntry* tre = dbcEnchant.LookupEntry( eid );
								if( !tre )
									continue;
								if(re->type[0] == 2 || re->type[0] == 4 || re->type[0] == 5 || re->type[0] == 5)
								{
									if( re->min[0] < re->min[0] )
									{
										intoslot = ei;
										break; //we found one so no need to continue;
									}
								}
								else
								{
									int32 tstrongesteff=0;
									for(uint32 ts=0;ts<3;ts++)
										if( tre->spell[ts] )
										{
											SpellEntry *spbase = dbcSpell.LookupEntryForced( tre->spell[ts] );
											if( !spbase )
												continue;
											if( spbase->eff[0].EffectBasePoints > tstrongesteff )
												tstrongesteff = spbase->eff[0].EffectBasePoints;
										}
									//if this enchantment is weaker then the one we are trying to add
									if( strongesteff > tstrongesteff )
									{
										intoslot = ei;
										break; //we found one so no need to continue;
									}
								}
							}
						}
					}
					if( intoslot == -1 || intoslot > 11 )
						continue; //it seems this enchantment is too weak to upgrade item
					itemTarget->RemoveEnchantment( intoslot );
					itemTarget->AddEnchantment( re, 48*60*60, true, true, false, intoslot, 1 );
//					itemTarget->ApplyEnchantmentBonus( intoslot, true );
				}
		}break;

	//Real pro man - add talent points
	case 35522:
		{
			if( !p_caster )
				return;

			p_caster->m_Talent_point_mods += 10;
			p_caster->ModUnsigned32Value( PLAYER_CHARACTER_POINTS, 10);
		}break;
	//Nuclear waste - change the looks
	case 24229:
		{
			if( !p_caster )
				return;
			//cast mohawk spell :P
			p_caster->CastSpell(p_caster,24709,true);

			int32 selectedrow = 100 + RandomUInt( 39311 - 100 );
			//make sure we get one
			CreatureInfo *creature_info = CreatureNameStorage.LookupEntry( selectedrow );
			while( !creature_info && selectedrow>0 )
			{
				selectedrow--;
				if( selectedrow == 0 )
				{
					selectedrow = 100 + RandomUInt( 24764 - 100 );
					return;	//might block in case sql table was empty
				}
				creature_info = CreatureNameStorage.LookupEntry( selectedrow );
			}

			p_caster->SetUInt32Value( UNIT_FIELD_DISPLAYID, creature_info->Male_DisplayID );
		}break;
	//Pet shop boys - change the looks of your pet
	case 23227:
		{
			if( !p_caster )
				return;

			Unit *target=p_caster->GetSummon();
			if( !target )
				return;

			//cast mohawk spell :P
			target->CastSpell(target,24709,true);

			int32 selectedrow = 100 + RandomUInt( 39311 - 100 );
			//make sure we get one
			CreatureInfo *creature_info = CreatureNameStorage.LookupEntry( selectedrow );
			while( !creature_info && selectedrow>0 )
			{
				selectedrow--;
				if( selectedrow == 0 )
				{
					selectedrow = 100 + RandomUInt( 24764 - 100 );
					return;	//might block in case sql table was empty
				}
				creature_info = CreatureNameStorage.LookupEntry( selectedrow );
			}

			target->SetUInt32Value( UNIT_FIELD_DISPLAYID, creature_info->Male_DisplayID );
		}break;
	//bad day -> give huge agro
	case 34104:
	{
			if( !p_caster )
				return;
			Unit *target = u_caster->GetMapMgr()->GetUnit( p_caster->GetSelection() );

			if( !target || !target->isAlive() || !target->IsCreature() || !target->GetAIInterface() ) 
				return;

//			target->GetAIInterface()->modThreatByPtr( p_caster, 100000 ); //almost make us really hated
			InRangeSetRecProt::iterator itr,itr2;
			m_caster->AquireInrangeLock(); //make sure to release lock before exit function !
			InrangeLoopExitAutoCallback AutoLock;
			for( itr2 = m_caster->GetInRangeSetBegin( AutoLock ); itr2 != m_caster->GetInRangeSetEnd(); )
			{
				itr = itr2;
				itr2++;
				if( !((*itr)->IsCreature()) || !SafeUnitCast((*itr))->isAlive() )
					continue;

				if(isAttackable(u_caster,(*itr)) == false )
					continue;
				uint32 old_agro = SafeUnitCast(*itr)->GetAIInterface()->getThreatByPtr( u_caster );
				if( old_agro == 0 )
					continue;

				target->GetAIInterface()->modThreatByPtr( p_caster, MAX( old_agro * 10, 100000 ) ); //almost make us really hated
			}
			m_caster->ReleaseInrangeLock();
	}break;
	//Healbot - running after you and healing it pretty good
	case 35521:
		{
			if( !p_caster )
				return;

			//spawn a new healbot
			uint8 race = p_caster->getRace();
			uint32 Entry;

			if( race == RACE_HUMAN || race == RACE_DWARF || race == RACE_NIGHTELF || race == RACE_GNOME || race == RACE_DRAENEI )
				Entry = 1826;
			else
				Entry = 1826;

			//check if there are other healbots arround and despawn them
			InRangeSetRecProt::iterator itr,itr3;
			InrangeLoopExitAutoCallback AutoLock;
			for( itr3 = p_caster->GetInRangeSetBegin( AutoLock ); itr3 != p_caster->GetInRangeSetEnd(); )
			{
				itr = itr3;
				itr3++;
				if( !((*itr)->IsUnit()) || !static_cast<Unit*>((*itr))->isAlive() )
					continue;

				if( (*itr)->GetEntry() != Entry )
					continue;
				if( (*itr)->GetUInt64Value( UNIT_FIELD_CREATEDBY ) != p_caster->GetGUID() )
					continue;
				((Creature *)(*itr))->SummonExpire();
				break;
			}

			CreatureProto * pTemplate = CreatureProtoStorage.LookupEntry(Entry);
			CreatureInfo * pCreatureInfo = CreatureNameStorage.LookupEntry(Entry);
			if(!pTemplate || !pCreatureInfo)
				return;
			Unit *newguard = p_caster->create_guardian( Entry, 60*60*1000 );
			AiAgentHealSupport *new_interface = new AiAgentHealSupport;
			new_interface->Init(newguard,AITYPE_PET,MOVEMENTTYPE_NONE,p_caster);
			newguard->ReplaceAIInterface( (AIInterface *) new_interface );
		}break;

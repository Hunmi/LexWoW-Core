/*
 * ArcEmu MMORPG Server
 * Copyright (C) 2005-2007 Ascent Team <http://www.ascentemu.com/>
 * Copyright (C) 2008 <http://www.ArcEmu.org/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include "StdAfx.h"

SpellEntry * CreateDummySpell(uint32 id)
{
	if( dbcSpell.LookupEntryForced( id ) )
		return NULL;	//yep, we do want to crash it to signal that we are doing it wrong

	const char * name = "Dummy Trigger";
	SpellEntry * sp = new SpellEntry;
	memset(sp, 0, sizeof(SpellEntry));
	sp->Id = id;
	sp->Attributes = 384;
	sp->AttributesEx = 268435456;
	sp->AttributesExB = 4;
	sp->CastingTimeIndex=1;
	sp->procChance=0;
	sp->rangeIndex=13;
//	sp->GetEquippedItemClass()=uint32(-1);
	sp->eff[0].Effect=SPELL_EFFECT_DUMMY;
	sp->eff[0].EffectImplicitTargetA=EFF_TARGET_SELF;
	sp->NameHash=crc32((const unsigned char*)name, (unsigned int)strlen(name));
	sp->eff[0].EffectChainMultiplier=1.0f;
//	sp->spell_id_client = sp->Id;
	sp->spell_id_client = 0;	//should we send auras like these to the client at all ?
//	sp->StanceBarOrder=-1;
	dbcSpell.SetRow(id,sp);
//	sWorld.dummyspells.push_back(sp);
	return sp;
} 

EnchantEntry * CreateDummyEnchant(uint32 id)
{
	if( dbcEnchant.LookupEntryForced( id ) )
		return NULL;	//yep, we do want to crash it to signal that we are doing it wrong

	const char * name = "Dummy Trigger";
	EnchantEntry * sp = new EnchantEntry;
	memset(sp, 0, sizeof(EnchantEntry));
	sp->Id = id;
	sp->Name = (char*)name;
	sp->custom_ScriptCreated = 1;
	dbcEnchant.SetRow( id, sp );
	return sp;
} 

#define EPL_REALM_MOD
#ifdef EPL_REALM_MOD
	static int EPL_Initialized;
	static int EPL_SpellsStartAtId;
	static int EPL_StatsPosStartAtId;
	static int EPL_StatsNegStartAtId;
#endif

inline void swapval( int32 &a, int32 &b ){	int32 c; c=a; a=b; b=c; }
inline void swapval( uint32 &a, uint32 &b ){	uint32 c; c=a; a=b; b=c; }
inline void swapval( float &a, float &b ){	float c; c=a; a=b; b=c; }

#define SetPPMForChance( sp, scale, min, max ) sp->proc_interval = MAX( min, MIN( max, 60000 * ( 100 - sp->procChance ) / 100 / scale ) );

#define SetSpellPowerCoeffsAll(sp,x) { 			sp->eff[0].EffectSpellPowerCoef = x; \
sp->eff[1].EffectSpellPowerCoef = x; \
sp->eff[2].EffectSpellPowerCoef = x; }

#define SetNoEffeCanCrit( sp ) { sp->EffectCanCrit[0] = false; sp->EffectCanCrit[1] = false; sp->EffectCanCrit[2] = false; }

void SpellEntryEffectSwap(SpellEntry *src,SpellEntry *dst,uint32 indsrc,uint32 inddst)
{
	if( indsrc>2 || inddst>2 )
		return;
	swapval( dst->eff[ inddst ].Effect, src->eff[ indsrc ].Effect);
	swapval( dst->eff[ inddst ].EffectConversionCoef, src->eff[ indsrc ].EffectConversionCoef);
	swapval( dst->eff[ inddst ].EffectApplyAuraName, src->eff[ indsrc ].EffectApplyAuraName);
	swapval( dst->eff[ inddst ].EffectAmplitude, src->eff[ indsrc ].EffectAmplitude);
	swapval( dst->eff[ inddst ].EffectBasePoints, src->eff[ indsrc ].EffectBasePoints);
	swapval( dst->eff[ inddst ].EffectSpellPowerCoef, src->eff[ indsrc ].EffectSpellPowerCoef);
	swapval( dst->eff[ inddst ].EffectChainMultiplier, src->eff[ indsrc ].EffectChainMultiplier);
	swapval( dst->eff[ inddst ].EffectChainTarget, src->eff[ indsrc ].EffectChainTarget);
	swapval( dst->eff[ inddst ].EffectDieSides, src->eff[ indsrc ].EffectDieSides);
	swapval( dst->eff[ inddst ].EffectItemType, src->eff[ indsrc ].EffectItemType);
	swapval( dst->eff[ inddst ].EffectMechanic, src->eff[ indsrc ].EffectMechanic);
	swapval( dst->eff[ inddst ].EffectMiscValue, src->eff[ indsrc ].EffectMiscValue);
	swapval( dst->eff[ inddst ].EffectMiscValueB, src->eff[ indsrc ].EffectMiscValueB);
	swapval( dst->eff[ inddst ].EffectPointsPerComboPoint, src->eff[ indsrc ].EffectPointsPerComboPoint);
	swapval( dst->eff[ inddst ].EffectRadiusIndex, src->eff[ indsrc ].EffectRadiusIndex);
	swapval( dst->eff[ inddst ].EffectRadiusMaxIndex, src->eff[ indsrc ].EffectRadiusMaxIndex);
	swapval( dst->eff[ inddst ].EffectRealPointsPerLevel, src->eff[ indsrc ].EffectRealPointsPerLevel);
	swapval( dst->eff[ inddst ].EffectSpellGroupRelation[0], src->eff[ indsrc ].EffectSpellGroupRelation[0]);
	swapval( dst->eff[ inddst ].EffectSpellGroupRelation[1], src->eff[ indsrc ].EffectSpellGroupRelation[1]);
	swapval( dst->eff[ inddst ].EffectSpellGroupRelation[2], src->eff[ indsrc ].EffectSpellGroupRelation[2]);
	swapval( dst->eff[ inddst ].EffectTriggerSpell, src->eff[ indsrc ].EffectTriggerSpell);
	swapval( dst->eff[ inddst ].EffectImplicitTargetA, src->eff[ indsrc ].EffectImplicitTargetA);
	swapval( dst->eff[ inddst ].EffectImplicitTargetB, src->eff[ indsrc ].EffectImplicitTargetB);
	swapval( dst->eff[ inddst ].EffectIndex, src->eff[ indsrc ].EffectIndex);
//	swapval( dst->eff[ inddst ].EffectBaseDice, src->eff[ indsrc ].EffectBaseDice);
//	swapval( dst->eff[ inddst ].EffectDicePerLevel, src->eff[ indsrc ].EffectDicePerLevel);
//	swapval( dst->GetSpellGroupType()[ inddst ], src->GetSpellGroupType()[ indsrc ]);
	swapval( dst->ss.coeff_points_gtscale[ inddst ], src->ss.coeff_points_gtscale[ indsrc ] );
	swapval( dst->ss.coeff_randompoints_gtscale[ inddst ], src->ss.coeff_randompoints_gtscale[ indsrc ] );
	swapval( dst->ss.coeff_combopoint_extra_gtscale[ inddst ], src->ss.coeff_combopoint_extra_gtscale[ indsrc ] );
}

void SpellEntryEffectCopy(SpellEntry *src,SpellEntry *dst,uint32 indsrc,uint32 inddst)
{
	if( indsrc>2 || inddst>2 )
		return;
	dst->eff[ inddst ].Effect = src->eff[ indsrc ].Effect;
	dst->eff[ inddst ].EffectDieSides = src->eff[ indsrc ].EffectDieSides;
//	dst->EffectBaseDice[ inddst ] = src->EffectBaseDice[ indsrc ];
//	dst->EffectDicePerLevel[ inddst ] = src->EffectDicePerLevel[ indsrc ];
	dst->eff[ inddst ].EffectRealPointsPerLevel = src->eff[ indsrc ].EffectRealPointsPerLevel;
	dst->eff[ inddst ].EffectBasePoints = src->eff[ indsrc ].EffectBasePoints;
	dst->eff[ inddst ].EffectMechanic = src->eff[ indsrc ].EffectMechanic;
	dst->eff[ inddst ].EffectImplicitTargetA = src->eff[ indsrc ].EffectImplicitTargetA;
	dst->eff[ inddst ].EffectImplicitTargetB = src->eff[ indsrc ].EffectImplicitTargetB;
	dst->eff[ inddst ].EffectRadiusIndex = src->eff[ indsrc ].EffectRadiusIndex;
	dst->eff[ inddst ].EffectApplyAuraName = src->eff[ indsrc ].EffectApplyAuraName;
	dst->eff[ inddst ].EffectAmplitude = src->eff[ indsrc ].EffectAmplitude;
	dst->eff[ inddst ].EffectConversionCoef = src->eff[ indsrc ].EffectConversionCoef;
	dst->eff[ inddst ].EffectChainTarget = src->eff[ indsrc ].EffectChainTarget;
	dst->eff[ inddst ].EffectItemType = src->eff[ indsrc ].EffectItemType;
	dst->eff[ inddst ].EffectMiscValue = src->eff[ indsrc ].EffectMiscValue;
	dst->eff[ inddst ].EffectMiscValueB = src->eff[ indsrc ].EffectMiscValueB;
	dst->eff[ inddst ].EffectTriggerSpell = src->eff[ indsrc ].EffectTriggerSpell;
	dst->eff[ inddst ].EffectPointsPerComboPoint = src->eff[ indsrc ].EffectPointsPerComboPoint;
	dst->eff[ inddst ].EffectSpellGroupRelation[0] = src->eff[ indsrc ].EffectSpellGroupRelation[0];
	dst->eff[ inddst ].EffectSpellGroupRelation[1] = src->eff[ indsrc ].EffectSpellGroupRelation[1];
	dst->eff[ inddst ].EffectSpellGroupRelation[2] = src->eff[ indsrc ].EffectSpellGroupRelation[2];
//	dst->GetSpellGroupType()[ inddst ] = src->GetSpellGroupType()[ indsrc ];
	dst->eff[ inddst ].EffectChainMultiplier = src->eff[ indsrc ].EffectChainMultiplier;
	dst->ss.coeff_points_gtscale[ inddst ] = src->ss.coeff_points_gtscale[ indsrc ];
	dst->ss.coeff_combopoint_extra_gtscale[ inddst ] = src->ss.coeff_combopoint_extra_gtscale[ indsrc ];
}

void SpellEntryScalingCopy(SpellEntry *src,SpellEntry *dst,uint32 indsrc,uint32 inddst)
{
	if( indsrc>2 || inddst>2 )
		return;
	dst->SpellScalingId = src->SpellScalingId;
	dst->ss.castTimeMin = src->ss.castTimeMin;
	dst->ss.castTimeMax = src->ss.castTimeMax;
	dst->ss.castScalingMaxLevel = src->ss.castScalingMaxLevel;
	dst->ss.playerClass = src->ss.playerClass;
	dst->ss.effLevelDiffCoeff = src->ss.effLevelDiffCoeff;
	dst->ss.effScalingMinLevel = src->ss.effScalingMinLevel;
	dst->ss.coeff_points_gtscale[ inddst ] = src->ss.coeff_points_gtscale[ indsrc ];
	dst->ss.coeff_combopoint_extra_gtscale[ inddst ] = src->ss.coeff_combopoint_extra_gtscale[ indsrc ];
}

//instead making a jumped cast we use directly copy
void SpellEntryCopyToEntry(SpellEntry *src,SpellEntry *dst)
{
	uint32 temp_entry = dst->Id; //-> the only thing we save from old spell
	memcpy(dst,src,sizeof(SpellEntry));
	dst->Id = temp_entry;
}

void SafeSetAuraStateFlag( SpellEntry *sp, uint32 State, bool RemoveAlso = true )
{
	for( uint32 i=0;i<MAX_AURA_STATES_TO_SET;i++)
		if( sp->SetAuraStates[i] == State )
		{
			return;
		}
	if( sp->SetAuraStatesCount >= MAX_AURA_STATES_TO_SET )
	{
		sLog.outDebug( "Warning. Can't add more aura states to spell %s\n", sp->Name );
		return;
	}
	sp->SetAuraStates[ sp->SetAuraStatesCount ] = State;
	if( RemoveAlso )
		sp->RemAuraStates[ sp->SetAuraStatesCount ] = State;
	sp->SetAuraStatesCount++;
}

static int32 FirstFree32bitMask = 0;
static int32 FirstFree32bitMaskIndex = 5;
static int32 FirstFreeBitForMask = FirstFree32bitMaskIndex * 32 + FirstFree32bitMask;
static map<uint32,uint32> FreeMaskMap;

//spells in same group will not stack on target no matter of the caster. The strongest aura will be present
void DynamicCreateAssignSpellStackGroup(SpellEntry *sp, uint32 MyGroup, char *MyGroupStr, bool IsSet )
{
	if( MyGroup == 0 )
	{
		if( MyGroupStr != NULL )
			MyGroup = crc32((const unsigned char*)MyGroupStr, (unsigned int)strlen(MyGroupStr));
		else
			ASSERT( false );
	}

	//create a new if one does not exist
	if( FreeMaskMap.find( MyGroup ) == FreeMaskMap.end() )
	{
		FreeMaskMap[ MyGroup ] = FirstFreeBitForMask;
		FirstFreeBitForMask++;
	}

	//get group mask 
	uint32 BitIndex = FreeMaskMap[ MyGroup ];
	uint32 bitIndex32 = BitIndex / 32;
	ASSERT( bitIndex32 < MAX_SPELL_STACK_GROUPS * 2 );
	uint32 bitMask = 1 << ( BitIndex % 32 );

	//assign this mask
	sp->HasStackGroupFlags = 1;
	if( IsSet == true )
		sp->StackGroupMasks32[bitIndex32] |= bitMask;
	else
		sp->StackGroupMasks32[bitIndex32] &= ~bitMask;
}

void Apply112SpellFixes()
{
	SpellEntry * sp;

	// Spell 3391 Proc Chance (Thrash )
	sp = dbcSpell.LookupEntryForced(3391);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 8185 Proc Chance (Fire Resistance Rank 1)
	sp = dbcSpell.LookupEntryForced(8185);
	//if(sp != NULL)
		sp->procChance = 100;

	// Spell 11175 Group Relation (Permafrost Rank 1)
/*	//Increases the duration of your Chill effects by $/1000;S1 $lsec:secs;, reduces the target's speed by an additional $s2%, and reduces the target's healing received by $s3%.
	sp = dbcSpell.LookupEntryForced(11175);
	//if(sp != NULL) 
	{
		sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[1].EffectBasePoints = MIN( sp->eff[1].EffectBasePoints,sp->eff[2].EffectBasePoints );
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced(12569);
	//if(sp != NULL)
	{
		sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[1].EffectBasePoints = MIN( sp->eff[1].EffectBasePoints,sp->eff[2].EffectBasePoints );
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced(12571);
	//if(sp != NULL) 
	{
		sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[1].EffectBasePoints = MIN( sp->eff[1].EffectBasePoints,sp->eff[2].EffectBasePoints );
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}*/

	// Spell 12292 Proc Chance (Death Wish )
	sp = dbcSpell.LookupEntryForced(12292);
	//if(sp != NULL)
		sp->procChance = 100;
	// Glyph of Death Wish
	sp = dbcSpell.LookupEntryForced(94374);
	//if(sp != NULL)
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;

	// Spell 12322 Proc Chance (Unbridled Wrath Rank 1)
//	sp = dbcSpell.LookupEntryForced(12322);
	//if(sp != NULL)
//		sp->procChance = 8;

	// Spell 23689 Proc Chance (Darkmoon Card: Heroism)
	sp = dbcSpell.LookupEntryForced(23689);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 14177 Group Relation\Interrupt Flag (Cold Blood )
	sp = dbcSpell.LookupEntryForced(14177);
	//if(sp != NULL) 
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_HOSTILE_SPELL_INFLICTED;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges++; //no idea if this is required 
	}

	// Spell 15494 Proc Chance (Fury of Forgewright )
	sp = dbcSpell.LookupEntryForced(15494);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 15600 Proc Chance (Hand of Justice )
	sp = dbcSpell.LookupEntryForced(15600);
	//if(sp != NULL)
		sp->procChance = 2;

	// Spell 15601 Proc Chance (Hand of Justice )
	sp = dbcSpell.LookupEntryForced(15601);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 15642 Proc Chance (Ironfoe )
	sp = dbcSpell.LookupEntryForced(15642);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 16246 Group Relation (Clearcasting )
	sp = dbcSpell.LookupEntryForced(16246);
	//if(sp != NULL)
	{
		sp->procCharges = 2; // Should be 2 but now 1 is used when spell triggers leaving 2
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	// Spell 16459 Proc Chance (Sword Specialization )
	sp = dbcSpell.LookupEntryForced(16459);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 16843 Proc Chance (Crimson Fury )
	sp = dbcSpell.LookupEntryForced(16843);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 18797 Proc Chance (Flurry Axe )
	sp = dbcSpell.LookupEntryForced(18797);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 18803 Proc Chance (Focus )
	sp = dbcSpell.LookupEntryForced(18803);
	//if(sp != NULL)
		sp->procChance = 100;

	// Spell 19105 Proc Chance (MHTest01 Effect )
	sp = dbcSpell.LookupEntryForced(19105);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 19109 Proc Chance (MHTest02 Effect )
	sp = dbcSpell.LookupEntryForced(19109);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 20178 Proc Chance (Reckoning )
	sp = dbcSpell.LookupEntryForced(20178);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 21919 Proc Chance (Thrash )
	sp = dbcSpell.LookupEntryForced(21919);
	//if(sp != NULL)
		sp->procChance = 10;

	// Spell 23158 Proc Chance (Concussive Shot Cooldown Reduction )
	sp = dbcSpell.LookupEntryForced(23158);
	//if(sp != NULL)
		sp->procChance = 4;

	// Spell 26022 Proc Chance (Pursuit of Justice Rank 1)
	sp = dbcSpell.LookupEntryForced(26022);
	//if(sp != NULL)
		sp->procChance = 100;

	// Spell 26023 Proc Chance (Pursuit of Justice Rank 2)
	sp = dbcSpell.LookupEntryForced(26023);
	//if(sp != NULL)
		sp->procChance = 100;

	// Spell 27521 Proc Chance (Mana Restore )
	sp = dbcSpell.LookupEntryForced(27521);
	//if(sp != NULL)
		sp->procChance = 2;

	// Spell 27867 Proc Chance (Freeze )
	sp = dbcSpell.LookupEntryForced(27867);
	//if(sp != NULL)
		sp->procChance = 2;

	// Spell 38617 Proc Chance (Frostbrand Attack )
	sp = dbcSpell.LookupEntryForced(38617);
	//if(sp != NULL)
		sp->procChance = 10;
}

void MarkSpellLineAsTalentSpecSpecific(SpellEntry *sp)
{
	//get skill line of this spell
	uint32 skillline = sp->spell_skilline[0];
/*	do
	{
		sp->spell_learn_is_linked_to_talent = true;
		sp = dbcSpell.LookupEntryForced( sp->spell_learn_next_level_spell );
	}while( sp );*/
	for(uint32 x=0; x < dbcSkillLineSpell.GetNumRows(); x++)
	{
		skilllinespell * spsk = dbcSkillLineSpell.LookupRow(x);
		if( spsk->skillId != skillline )
			continue;
		SpellEntry *spt = dbcSpell.LookupEntryForced( spsk->spellId );
		if( !spt || spt->NameHash != sp->NameHash )
			continue;
		spt->spell_learn_is_linked_to_talent = true;
	}
	sp->spell_learn_is_linked_to_talent = true;
}

void SetSpellSkillRecursive(SpellEntry *sp, uint32 skill,uint32 recursive_call_count )
{
	if( sp == NULL || recursive_call_count > 10 )
		return;
	sp->spell_skilline[0] = skill;
	for(uint32 i=0;i<MAX_SPELL_EFFECT_COUNT;i++)
		if( sp->eff[i].EffectTriggerSpell != 0 )
			SetSpellSkillRecursive( dbcSpell.LookupEntryForced( sp->eff[i].EffectTriggerSpell ), skill, recursive_call_count++ );
}

//link spell to skill lines. 
//a spell can be in multiple lines but most of the time only in 1
//set spell next level id
void SetSpellSkillines()
{
	//set spell skilline
	for(uint32 x=0; x < dbcSkillLineSpell.GetNumRows(); x++)
	{
		skilllinespell * spsk = dbcSkillLineSpell.LookupRow(x);
		SpellEntry *sp = dbcSpell.LookupEntryForced( spsk->spellId );
		if( !sp )
			continue;
		//just a shortcut so we do not have to search for spell skilline then get "next" of the skilline
		//!! maybe just pet spells have this set. Player spells do not have it
		sp->spell_learn_next_level_spell = spsk->forward_spellid;
		if( sp->spell_skilline_assoc_counter >= SPELL_SKILL_LINK_LIMIT )
			continue;
		sp->spell_skilline[ sp->spell_skilline_assoc_counter ] = spsk->skillId;
		sp->spell_skilline_assoc_counter++;
		//try to find a prev for this skill in case we need to remove it while learning
		for(uint32 y=0; y < dbcSkillLineSpell.GetNumRows(); y++)
		{
			skilllinespell * spsk2 = dbcSkillLineSpell.LookupRow(y);
			if( spsk2->forward_spellid == spsk->Id )
			{
				spsk->prev = spsk2->Id;
				break;
			}
		}
	}
	//force all spells that trigger other spells to inherit skilline
	uint32 cnt = dbcSpell.GetNumRows();
	for(uint32 x=0; x < cnt; x++)
	{
		SpellEntry * sp = dbcSpell.LookupRow(x);
		if( sp->spell_skilline[0] != 0 )
			SetSpellSkillRecursive( sp, sp->spell_skilline[0], 0 );
	}
}

void SetSpellTalentLines()
{
	uint32 i,j;
	for(i = 0; i < dbcTalent.GetNumRows(); ++i)
	{
		TalentEntry * tal = dbcTalent.LookupRow(i);
		for(j = 0; j < 5; ++j)
			if(tal->RankID[j] != 0)
			{
				//as quick lookup we add these info to spells structs
				SpellEntry *sp = dbcSpell.LookupEntryForced( tal->RankID[j] );
				if( sp == NULL )
				{
					sLog.outDebug( "!!!!!!!Talent is a non existing spell !!! %u",tal->RankID[j]);
					continue;
				}
				if( sp->talent_entry_assoc_counter < SPELL_SKILL_LINK_LIMIT )
				{
					sp->talent_entry[sp->talent_entry_assoc_counter] = tal;
					sp->talent_entry_rank[sp->talent_entry_assoc_counter] = j;
//					sp->talent_tree[sp->talent_entry_assoc_counter] = tal->TalentTree;
					sp->talent_entry_assoc_counter++;
				}
				MarkSpellLineAsTalentSpecSpecific( sp );
//				sp->c_is_flags2 |= SPELL_FLAG2_IS_TALENT_SPEC;
				for(uint32 k=0;k<3;k++)
				{
					if( sp->eff[k].Effect == SPELL_EFFECT_LEARN_SPELL 
						|| sp->eff[k].Effect == SPELL_EFFECT_LEARN_PET_SPELL 
						//these are only marked since skillines would teach us when using ".learn all"
						//we are not learning these in standard way
						|| sp->eff[k].Effect == SPELL_EFFECT_TRIGGER_SPELL
						|| sp->eff[k].EffectApplyAuraName == SPELL_AURA_PROC_TRIGGER_SPELL
						)
					{
						SpellEntry *sp2 = dbcSpell.LookupEntryForced( sp->eff[k].EffectTriggerSpell );
						if( sp2 )
						{
							MarkSpellLineAsTalentSpecSpecific( sp2 );
							//not learn spell, just chain cast spell
//							if( sp->eff[k].Effect == SPELL_EFFECT_TRIGGER_SPELL )
//								sp2->c_is_flags2 |= SPELL_FLAG2_IS_TALENT_SPEC;
						}
					}
				}
			}
	}
	//the specializations
	for(uint32 x=0; x < dbcTalentPrimarySpells.GetNumRows(); x++)
	{
		TalentPrimarySpellsEntry *tps = dbcTalentPrimarySpells.LookupRow(x);
		SpellEntry *sp = dbcSpell.LookupEntryForced( tps->SpellID );
		MarkSpellLineAsTalentSpecSpecific( sp );
		for(uint32 k=0;k<3;k++)
		{
			if( sp->eff[k].Effect == SPELL_EFFECT_LEARN_SPELL 
				|| sp->eff[k].Effect == SPELL_EFFECT_LEARN_PET_SPELL 
				//these are only marked since skillines would teach us when using ".learn all"
				//we are not learning these in standard way
				|| sp->eff[k].Effect == SPELL_EFFECT_TRIGGER_SPELL
				|| sp->eff[k].EffectApplyAuraName == SPELL_AURA_PROC_TRIGGER_SPELL
				)
			{
				SpellEntry *sp2 = dbcSpell.LookupEntryForced( sp->eff[k].EffectTriggerSpell );
				if( sp2 )
				{
					MarkSpellLineAsTalentSpecSpecific( sp2 );
					//not learn spell, just chain cast spell
//							if( sp->eff[k].Effect == SPELL_EFFECT_TRIGGER_SPELL )
//								sp2->c_is_flags2 |= SPELL_FLAG2_IS_TALENT_SPEC;
				}
			}
		}
	}
	//the specializations
	for(uint32 x=0; x < dbcTalentTab.GetNumRows(); x++)
	{
		TalentTabEntry *talentTabInfo = dbcTalentTab.LookupRow( x );
		for( uint32 i=0;i<2;i++)
		{
			SpellEntry *sp = dbcSpell.LookupEntryForced( talentTabInfo->MasterySpellIds[i] );
			if( sp == NULL )
				continue;
			MarkSpellLineAsTalentSpecSpecific( sp );
			for(uint32 k=0;k<3;k++)
			{
				if( sp->eff[k].Effect == SPELL_EFFECT_LEARN_SPELL 
					|| sp->eff[k].Effect == SPELL_EFFECT_LEARN_PET_SPELL 
					//these are only marked since skillines would teach us when using ".learn all"
					//we are not learning these in standard way
					|| sp->eff[k].Effect == SPELL_EFFECT_TRIGGER_SPELL
					|| sp->eff[k].EffectApplyAuraName == SPELL_AURA_PROC_TRIGGER_SPELL
					)
				{
					SpellEntry *sp2 = dbcSpell.LookupEntryForced( sp->eff[k].EffectTriggerSpell );
					if( sp2 )
					{
						MarkSpellLineAsTalentSpecSpecific( sp2 );
						//not learn spell, just chain cast spell
	//							if( sp->eff[k].Effect == SPELL_EFFECT_TRIGGER_SPELL )
	//								sp2->c_is_flags2 |= SPELL_FLAG2_IS_TALENT_SPEC;
					}
				}
			}
		}
	}
}

void SetSpellSkill()
{
	for(uint32 i = 0; i < dbcSkillLineSpell.GetNumRows(); i++)
	{
		skilllinespell *sps = dbcSkillLineSpell.LookupRow(i);
		if (sps)
		{
			SpellEntry *sp = dbcSpell.LookupEntryForced( sps->spellId );
			if( sp )
				sp->spell_skill = sps;
		}
	}
}

//comes after loading spells, items ....
void LoadSpellForcedTargetting()
{
	QueryResult *spt_sql = WorldDatabase.Query(	"SELECT * FROM Spell_Forced_Targetting" );

	if(spt_sql)
	{
		do 
		{
			Field *fields = spt_sql->Fetch();
			uint32 spellid = fields[0].GetUInt32();
			uint32 tt = fields[1].GetUInt32();
			uint32 tv = fields[2].GetUInt32();
			SpellEntry *sp = dbcSpell.LookupEntryForced( spellid );
			if( sp )
			{
				sp->required_target_type = tt + 1;
				sp->required_target_value.push_back( tv );
			}
		} while(spt_sql->NextRow());
		delete spt_sql;
		spt_sql = NULL;
	}
}

void ApplyNormalFixes()
{
	//lockpicking seems to be missing ?
	if( dbcSkillLine.LookupEntryForced(SKILL_LOCKPICKING) == NULL )
	{
		skilllineentry *sle = new skilllineentry;
		memset( sle, 0, sizeof( skilllineentry ) );
		sle->id = SKILL_LOCKPICKING;
		sle->Name = "Lockpicking custom inserted";
		sle->type = SKILL_TYPE_PROFESSION; //no idea actually :(
		dbcSkillLine.SetRow( SKILL_LOCKPICKING, sle );
	}
	Log.Notice("World", "Setting Spell SkillLines....");
	SetSpellSkillines();
	Log.Notice("World", "Setting Spell Skills....");
	SetSpellSkill();
	//Updating spell.dbc

	Log.Notice("World", "Processing %u spells...", dbcSpell.GetNumRows());
	Apply112SpellFixes();

	//this is so lame. But we we do not do it then our spell fixes will be doomed !
	for(uint32 i=0;i<dbcSpellEffect.GetNumRows();i++)
	{
		SpellEffectEntry * spee = dbcSpellEffect.LookupRow( i );
		if( spee->EffectIndex > MAX_SPELL_EFFECT_COUNT )
		{
			sLog.outDebug("Warning spell has index greater then maxindex, skipping it");
			continue;
		}
		SpellEntry * sp = dbcSpell.LookupEntryForced( spee->EffectSpellId );
		memcpy( &sp->eff[ spee->EffectIndex ], spee, sizeof( SpellEffectEntry ) );
//		sp->eff_count++;
	}

	uint32 i;
	uint32 cnt = dbcSpell.GetNumRows();
	uint32 effect;
	// Relation Groups

	for(uint32 x=0; x < cnt; x++)
	{
		// Read every SpellEntry row
		SpellEntry * sp = dbcSpell.LookupRow(x);

		//let's fill in cached values
		if( sp->SpellAuraOptionsId )
		{
			SpellAuraOptionsEntry *sao = dbcSpellAuraOptions.LookupEntryForced( sp->SpellAuraOptionsId );
			if( sao )
			{
				sp->maxstack = sao->StackAmount;
				sp->procChance = sao->procChance;
				sp->procCharges = sao->procCharges;
			}
		}
		if( sp->SpellInterruptsId )
		{
			SpellInterruptsEntry *sie = dbcSpellInterrupts.LookupEntryForced( sp->SpellInterruptsId );
			if( sie )
			{
				sp->InterruptFlags = sie->InterruptFlags;
				sp->AuraInterruptFlags = sie->AuraInterruptFlags;
				sp->ChannelInterruptFlags = sie->ChannelInterruptFlags;
			}
		}
		if( sp->SpellCooldownsId )
		{
			SpellCooldownsEntry *sce = dbcSpellCooldowns.LookupEntryForced( sp->SpellCooldownsId );
			if( sce )
			{
				sp->CategoryRecoveryTime = sce->CategoryRecoveryTime;
				sp->RecoveryTime = sce->RecoveryTime;
				sp->StartRecoveryTime = sce->StartRecoveryTime;
			}
		}
		if( sp->SpellCategoriesId )
		{
			SpellCategoriesEntry *sce = dbcSpellCategories.LookupEntryForced( sp->SpellCategoriesId );
			if( sce )
			{
				sp->Category = sce->Category;
				sp->StartRecoveryCategory = sce->StartRecoveryCategory;
				sp->MechanicsType = sce->Mechanic;
				sp->PreventionType = sce->PreventionType;
				sp->dmg_type = sce->DmgClass;
				if( sp->dmg_type == SPELL_DMG_TYPE_NONE )
					sp->dmg_type = SPELL_DMG_TYPE_MAGIC;
				if( sp->dmg_type >= SPELL_DMG_TYPE_COUNT )
				{
					sLog.outDebug("Unhandled DMG type. Inspect this");
					sp->dmg_type = SPELL_DMG_TYPE_MAGIC;
				}
			}
		}
		sp->MechanicsTypeFlags = 0;
		if( sp->MechanicsType > 0 )
			sp->MechanicsTypeFlags |= ( 1 << sp->MechanicsType );
		for(uint32 k=0;k<MAX_SPELL_EFFECT_COUNT;k++)
		{
			if( sp->eff[k].EffectMechanic > 0 )
				sp->MechanicsTypeFlags |= ( 1 << sp->eff[k].EffectMechanic );
		}
/*		if( sp->SpellLevelsId )
		{
			SpellLevelsEntry *sle = dbcSpellLevels.LookupEntryForced( sp->SpellLevelsId );
			if( sle )
				sp->SpellLevel.spellLevel = sle->spellLevel;	//might be required to hack for trainers
		} */
		if( sp->SpellTargetRestrictionsId )
		{
			SpellCastingRequirementsEntry *str = dbcSpellCastingRequirements.LookupEntryForced( sp->SpellTargetRestrictionsId );
			if( str )
			{
				sp->FacingCasterFlags = str->FacingCasterFlags;
				sp->RequiredAreaId = str->AreaGroupId;
			}
		}
		if( sp->SpellShapeshiftId )
		{
			SpellShapeshiftEntry *ssse = dbcSpellShapeshift.LookupEntryForced( sp->SpellShapeshiftId );
			if( ssse )
				sp->RequiredShapeShift = ssse->Stances;
		}
		if( sp->SpellClassOptionsId )
		{
			SpellClassOptionsEntry *sco = dbcSpellClassOptions.LookupEntryForced( sp->SpellClassOptionsId );
			if( sco )
			{
				sp->SpellGroupType[0] = sco->SpellFamilyFlags[0];
				sp->SpellGroupType[1] = sco->SpellFamilyFlags[1];
				sp->SpellGroupType[2] = sco->SpellFamilyFlags[2];
			}
		}
		if( sp->SpellScalingId )
		{
			SpellScalingEntry *ss = dbcSpellScaling.LookupEntryForced( sp->SpellScalingId );
			if( ss )
				memcpy( &sp->ss, ss, sizeof( SpellScalingEntry ) );
		}
		if( sp->SpellAuraRestrictionsId )
		{
			SpellAuraRestrictionsEntry *sar = dbcSpellAuraRestrictions.LookupEntryForced( sp->SpellAuraRestrictionsId );
			if( sar )
				memcpy( &sp->sar, sar, sizeof( SpellAuraRestrictionsEntry ) );
		}
		if( sp->SpellTargetRestrictionsId )
		{
			SpellTargetRestrictionsEntry *str = dbcSpellTargetRestrictions.LookupEntryForced( sp->SpellTargetRestrictionsId );
			if( str )
				sp->MaxAffectedTargets = str->MaxAffectedTargets;
		}
		if( sp->MaxAffectedTargets <= 0 )
			sp->MaxAffectedTargets =  NO_MAX_TARGETS_DEFINED;
		if( sp->SpellLevelsId )
		{
			SpellLevelsEntry *ss = dbcSpellLevels.LookupEntryForced( sp->SpellLevelsId );
			if( ss )
				memcpy( &sp->SpellLevel, ss, sizeof( SpellLevelsEntry ) );
		}
		if( sp->SpellPowerId )
		{
			SpellPowerEntry *ss = dbcSpellPower.LookupEntryForced( sp->SpellPowerId );
			if( ss )
				memcpy( &sp->PowerEntry, ss, sizeof( SpellPowerEntry ) );
		}

		//try to set spell skillines even recuresively
		for(int pclass=1;pclass<12;pclass++)
			for( int skill_trees=0;skill_trees<4;skill_trees++)
				if( sp->spell_skilline[0] == class_skillines[pclass][skill_trees] )
				{
					sp->belongs_to_player_class = pclass;
					break;
				}

		uint32 rank = 0;
		uint32 namehash = 0;

		sp->self_cast_only = false;
		sp->apply_on_shapeshift_change = false;
		sp->chained_cast = NULL;

		if( sp->spell_skilline[0] == SKILL_ARCHAEOLOGY )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_BY_ANYONE;
		// hash the name
		//!!!!!!! representing all strings on 32 bits is dangerous. There is a chance to get same hash for a lot of strings ;)
        namehash = crc32((const unsigned char*)sp->Name, (unsigned int)strlen(sp->Name));
		sp->NameHash   = namehash; //need these set before we start processing spells

		float radius=std::max(::GetRadius(dbcSpellRadius.LookupEntry(sp->eff[0].EffectRadiusIndex)),::GetRadius(dbcSpellRadius.LookupEntry(sp->eff[1].EffectRadiusIndex)));
		radius=std::max(::GetRadius(dbcSpellRadius.LookupEntry(sp->eff[2].EffectRadiusIndex)),radius);
		radius=std::max(GetMaxRange(dbcSpellRange.LookupEntry(sp->rangeIndex)),radius);
		sp->base_range_or_radius_sqr = radius*radius;

		sp->ai_target_type = GetAiTargetType( sp );
		// NEW SCHOOLS AS OF 2.4.0:
		/* (bitwise)
		SCHOOL_NORMAL = 1,
		SCHOOL_HOLY   = 2,
		SCHOOL_FIRE   = 4,
		SCHOOL_NATURE = 8,
		SCHOOL_FROST  = 16,
		SCHOOL_SHADOW = 32,
		SCHOOL_ARCANE = 64
		*/

		//charge auras should still stack anytime :P
		if( (int32)sp->procCharges > (int32)sp->maxstack )
			sp->maxstack = sp->procCharges;
		// Save School as SchoolMask, and set School as an index
//		sp->SchoolMask = sp->School;
		for (i=0; i<SCHOOL_COUNT; i++)
		{
			if (sp->SchoolMask & (1<<i))
			{
				sp->School = i;
				break;
			}
		}

		sp->spell_id_client = sp->Id;

		//spells that self cast leading to stack consume = 0 size dump
		for(uint32 k=0;k<MAX_SPELL_EFFECT_COUNT;k++)
		{
			if( sp->eff[ k ].Effect == SPELL_EFFECT_TRIGGER_SPELL && sp->eff[ k ].EffectTriggerSpell == sp->Id )
			{
				sp->eff[ k ].Effect = SPELL_EFFECT_NULL;
				sp->eff[ k ].EffectTriggerSpell = 0; 
			}
			if( sp->eff[ k ].Effect == SPELL_EFFECT_APPLY_AREA_AURA || sp->eff[ k ].Effect == SPELL_EFFECT_APPLY_AREA_AURA2 )
				sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;	//visible for caster also even though it is considered passive aura

			if( sp->eff[ k ].EffectApplyAuraName != 0 )
				sp->ForcedAuraVisibleFlags |= (1<<k);//VISUALAURA_FLAG_VISIBLE_1 | VISUALAURA_FLAG_VISIBLE_2 | VISUALAURA_FLAG_VISIBLE_3
			if( sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_ADD_TEMPORARY_SPELL || sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_REPLACE_SPELL )
				sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES;
			if( sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_SCHOOL_ABSORB )
				sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES;
			//!!!need to manually set spell hash to misc value !
			if( sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_IGNORE_INTERRUPT )
			{
				if( sp->activeIconID == 0 )
					sp->activeIconID = sp->SpellIconID;
				sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
			}
			if( sp->eff[ k ].Effect == SPELL_EFFECT_SUMMON_PET )
				sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
			if( sp->eff[ k ].Effect == SPELL_EFFECT_RESURRECT )
			{
				sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
				sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
			}
			if( sp->eff[ k ].Effect == SPELL_EFFECT_SELF_RESURRECT )
				sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
			if( sp->eff[ k ].EffectApplyAuraName == APELL_AURA_CLONE_CASTER )
			{
				if( sp->speed == 0 )
					sp->speed = -1; //force sending spell_go
				sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
				if( sp->activeIconID == 0 )
					sp->activeIconID = sp->SpellIconID; //need to make aura visible
			}
			if( sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOUNTED || sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_STEALTH || sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_INVISIBILITY )
				sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
			if( sp->eff[ k ].Effect == SPELL_EFFECT_SUMMON_TARGET )
				sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
			//there might be special cases here
			if( sp->eff[ k ].Effect == SPELL_EFFECT_CHARGE || sp->eff[ k ].Effect == SPELL_EFFECT_LEAP || sp->eff[ k ].Effect == SPELL_EFFECT_CHARGE2 || sp->eff[ k ].Effect == SPELL_EFFECT_KNOCK_BACK || sp->eff[ k ].Effect == SPELL_EFFECT_KNOCK_BACK2 )
				sp->c_is_flags3 |= SPELL_FLAG3_IS_NOT_CASTABLE_ROOTED;
		}

		if( strstr( sp->ToolTip, "$w3" ) )
			sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_3;
		if( strstr( sp->ToolTip, "$w2" ) )
			sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_2;
		if( strstr( sp->ToolTip, "$w1" ) )
			sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1;
		if( strstr( sp->ToolTip, "$w " ) || strstr( sp->ToolTip, "$w%" ) )	//blizz messed up like 6 times = fail
			sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES;

		{
			if( sp->MechanicsType == MECHANIC_ROOTED || sp->MechanicsType == MECHANIC_ENSNARED || sp->MechanicsType == MECHANIC_FROZEN
//				|| sp->MechanicsType == MECHANIC_DISORIENTED 
				|| sp->MechanicsType == MECHANIC_HORRIFIED || sp->MechanicsType == MECHANIC_SLOWED
				|| sp->MechanicsType == MECHANIC_CHARMED || sp->MechanicsType == MECHANIC_DISTRACED || sp->MechanicsType == MECHANIC_FLEEING
//				|| sp->MechanicsType == MECHANIC_INCAPACIPATED 
				|| sp->MechanicsType == MECHANIC_POLYMORPHED )
				sp->c_is_flags2 |= SPELL_FLAG2_IS_MOVEMENT_IMPAIRING_SPELL;
			for(uint32 k=0;k<MAX_SPELL_EFFECT_COUNT;k++)
			{
				if( sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_ROOT 
					|| sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_CONFUSE	//Sharstar said this is movement imparing for PVP trinkets
					|| sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_FEAR //not sure
					|| sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_DECREASE_SPEED 
					|| sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_SPEED_LIMIT 
					|| ( sp->eff[ k ].EffectApplyAuraName == SPELL_AURA_MOD_INCREASE_SPEED && sp->eff[ k ].EffectBasePoints < 0 )
					)
					sp->c_is_flags2 |= SPELL_FLAG2_IS_MOVEMENT_IMPAIRING_SPELL;
			}
		}

		// Unleashed Rage
		if( sp->NameHash == SPELL_HASH_UNLEASHED_RAGE)
			sp->procFlags = PROC_ON_CRIT_ATTACK;

//		if( sp->NameHash == SPELL_HASH_BLOOD_FURY || sp->NameHash == SPELL_HASH_SHADOWSTEP )
//			sp->always_apply = true;

		//no idea wtf for this is. Appeared in 3.2.x client
/*		for(int i=0;i<8;i++)
			if( sp->Reagent[i] == -1 || sp->Reagent[i] == 4294967294 )
			{
				sp->Reagent[i] = 0;
				sp->ReagentCount[i] = 0;
			}*/

		//there are some spells that change the "damage" value of 1 effect to another : devastate = bonus first then damage
		//this is a total bullshit so remove it when spell system supports effect overwriting
		for( uint32 col1_swap = 0; col1_swap < 2 ; col1_swap++ )
			for( uint32 col2_swap = col1_swap + 1 ; col2_swap < 3 ; col2_swap++ )
				if( sp->eff[col1_swap].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE && ( sp->eff[col2_swap].Effect == SPELL_EFFECT_DUMMYMELEE || sp->eff[col2_swap].Effect == SPELL_EFFECT_WEAPON_DAMAGE ) )
					SpellEntryEffectSwap(sp,sp,col1_swap,col2_swap);

		for(uint32 b=0;b<MAX_SPELL_EFFECT_COUNT;++b)
		{
/*			if( sp->EffectTriggerSpell[b] != 0 && dbcSpell.LookupEntryForced(sp->EffectTriggerSpell[b]) == NULL)
			{
				// proc spell referencing non-existant spell. create a dummy spell for use w/ it. 
				CreateDummySpell(sp->EffectTriggerSpell[b]);
			}*/

/*			if( sp->Attributes & ATTRIBUTES_ONLY_OUTDOORS && sp->eff[b].EffectApplyAuraName == SPELL_AURA_MOUNTED )
			{
				sp->Attributes &= ~ATTRIBUTES_ONLY_OUTDOORS;
			} */

			// fill in more here
			/*switch( sp->EffectImplicitTargetA[b] )
			{
			case 1:
			case 9:
				sp->self_cast_only = true;
				break;
			}

			// fill in more here too
			switch( sp->EffectImplicitTargetB[b] )
			{
			case 1:
			case 9:
				sp->self_cast_only = true;
				break;
			}*/
			if( sp->eff[b].EffectImplicitTargetA == EFF_TARGET_SINGLE_ENEMY
				|| sp->eff[b].EffectImplicitTargetA == EFF_TARGET_ALL_ENEMIES_AROUND_CASTER
				|| sp->eff[b].EffectImplicitTargetA == EFF_TARGET_IN_FRONT_OF_CASTER
				|| sp->eff[b].EffectImplicitTargetA == EFF_TARGET_DUEL
				|| sp->eff[b].EffectImplicitTargetB == EFF_TARGET_SINGLE_ENEMY
				|| sp->eff[b].EffectImplicitTargetB == EFF_TARGET_ALL_ENEMIES_AROUND_CASTER
				|| sp->eff[b].EffectImplicitTargetB == EFF_TARGET_IN_FRONT_OF_CASTER
				|| sp->eff[b].EffectImplicitTargetB == EFF_TARGET_DUEL
				)
			{
				sp->c_is_flags2 |= SPELL_FLAG2_IS_REFLECTABLE;
			}
			if( (sp->eff[b].EffectApplyAuraName == SPELL_AURA_REFLECT_SPELLS_SCHOOL ||sp->eff[b].EffectApplyAuraName == SPELL_AURA_REFLECT_SPELLS))
				sp->c_is_flags2 |= SPELL_FLAG2_IS_NON_REFLECTABLE;
			//only spells can be reflected. Physical abilities go through everything
			if( ( sp->SchoolMask & SCHOOL_MASK_NORMAL ) || sp->powerType != POWER_TYPE_MANA )
				sp->c_is_flags2 |= SPELL_FLAG2_IS_NON_REFLECTABLE;
		}

		if( sp->NameHash == SPELL_HASH_KILLING_SPREE )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE;
		if( sp->NameHash == SPELL_HASH_BLADESTORM )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE;
		if( sp->Id == 42292 ) //PvP Trinket - Medallion of the Alliance ..........
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED | SPELL_FLAG2_IS_CASTABLE_PACIFIED | SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE | SPELL_FLAG2_IS_CASTABLE_SILANCED;
		if( sp->NameHash == SPELL_HASH_EVERY_MAN_FOR_HIMSELF )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED | SPELL_FLAG2_IS_CASTABLE_PACIFIED | SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE | SPELL_FLAG2_IS_CASTABLE_SILANCED;
		if( sp->NameHash == SPELL_HASH_LIVING_FREE_ACTION )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED | SPELL_FLAG2_IS_CASTABLE_PACIFIED | SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE | SPELL_FLAG2_IS_CASTABLE_SILANCED;
		if( sp->NameHash == SPELL_HASH_TREMENDOUS_FORTITUDE )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED | SPELL_FLAG2_IS_CASTABLE_PACIFIED | SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE | SPELL_FLAG2_IS_CASTABLE_SILANCED;
		if( sp->NameHash == SPELL_HASH_WILL_OF_THE_FORSAKEN )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_DEATH_WISH )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_FEAR_WARD )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_BARKSKIN )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_STUNNED;
		if( sp->NameHash == SPELL_HASH_ICE_BLOCK )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_SILANCED;
		if( sp->NameHash == SPELL_HASH_DIVINE_SHIELD )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_SILANCED;
		if( sp->NameHash == SPELL_HASH_DISPERSION )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_SILANCED;
		if( sp->NameHash == SPELL_HASH_ICE_BLOCK )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_STUNNED;
		if( sp->NameHash == SPELL_HASH_DIVINE_SHIELD )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_DIVINE_PROTECTION )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_DISPERSION )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_STUNNED;
//		if( sp->NameHash == SPELL_HASH_HAND_OF_FREEDOM )
//			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_BLINK )
//			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_STUNNED;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED;
		if( sp->NameHash == SPELL_HASH_LICHBORNE )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_THUNDERSTORM )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_STUNNED;
		if( sp->NameHash == SPELL_HASH_BERSERKER_RAGE )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP | SPELL_FLAG2_IS_CASTABLE_STUNNED;
		if( sp->NameHash == SPELL_HASH_BERSERK )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_SHAMANISTIC_RAGE )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED;
		if( sp->NameHash == SPELL_HASH_TREMOR_TOTEM )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_FEARED_CHARM_SLEEP;
		if( sp->NameHash == SPELL_HASH_ICEBOUND_FORTITUDE ) 
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED;
		/*if( sp->self_cast_only && !(sp->Attributes&64))
			printf("SPELL SELF CAST ONLY: %s %u\n", sp->Name, sp->Id);*/

		if(!strcmp(sp->Name, "Hearthstone") || !strcmp(sp->Name, "Stuck") || !strcmp(sp->Name, "Astral Recall"))
			sp->self_cast_only = true;

		uint32 max_amplitude = MAX(MAX(sp->eff[0].EffectAmplitude,sp->eff[1].EffectAmplitude),sp->eff[2].EffectAmplitude);
		bool does_not_expire_aura = false;
		sp->quick_duration_min = max_amplitude;
        if(sp->DurationIndex)
        {
            SpellDuration *sd=dbcSpellDuration.LookupEntry(sp->DurationIndex);
            if(sd)
            {
				//base duration to which we add dur2 that is based on level
				//duration 3 is limitation to dur1+dur2 ? false if you ask me 
				sp->quick_duration_min = MAX( sd->Duration3, sd->Duration1 );
				if( sd->Duration2 )
					sp->quick_duration_min = MIN( sp->quick_duration_min, sd->Duration2 );
            }
            else
			{
//                sp->quick_duration_min = (uint32)-1; //this is huge
				does_not_expire_aura = true;
			}
        }
		else 
		{
			sp->quick_duration_min = MAX( sp->quick_duration_min, 1); //avoid division by 0 errors ?
			does_not_expire_aura = true;
		}
		sp->quick_maxAmplitude = max_amplitude;
		sp->quick_ExtendDuration = 0;
		if( does_not_expire_aura == false && max_amplitude > 0 )
		{
			sp->quick_tickcount = MAX(1,sp->quick_duration_min / MAX(1,max_amplitude));
			if( sp->quick_duration_min != (uint32)-1)
			{
				if( sp->quick_tickcount <= 1 )
					sp->quick_ExtendDuration = 100;	//just 1 tick over all.Let's not double duration
				else
//					sp->quick_ExtendDuration = sp->quick_maxAmplitude + 100;
					sp->quick_ExtendDuration = 150;
			}
		}
		else
			sp->quick_tickcount = 1;	//consider spell not having ticks at all

//		if( sp->procChanceOriginal < 100 && sp->procChanceOriginal > 0 )
//			sp->proc_interval = MAX( DEFAULT_SPELL_PROC_INTERVAL, 60000 * ( 100 - sp->procChanceOriginal ) / 100 ); //10% proc chance ?
//		else
			sp->proc_interval = DEFAULT_SPELL_PROC_INTERVAL;//trigger at each event but no spams pls

		sp->c_is_flags = 0;

		if( sp->eff[0].Effect == SPELL_EFFECT_APPLY_AURA || sp->eff[0].Effect == SPELL_EFFECT_APPLY_AREA_AURA || sp->eff[0].Effect == SPELL_EFFECT_APPLY_AREA_AURA2 ||
			sp->eff[1].Effect == SPELL_EFFECT_APPLY_AURA || sp->eff[1].Effect == SPELL_EFFECT_APPLY_AREA_AURA || sp->eff[1].Effect == SPELL_EFFECT_APPLY_AREA_AURA2 ||
			sp->eff[2].Effect == SPELL_EFFECT_APPLY_AURA || sp->eff[2].Effect == SPELL_EFFECT_APPLY_AREA_AURA || sp->eff[2].Effect == SPELL_EFFECT_APPLY_AREA_AURA2 
			)
			sp->c_is_flags |= SPELL_FLAG_IS_BUFF;

		if( sp->spell_skilline[0] && ( sp->spell_skilline[0] == SKILL_FIRST_AID 
			|| sp->spell_skilline[0] == SKILL_BLACKSMITHING
			|| sp->spell_skilline[0] == SKILL_LEATHERWORKING
			|| sp->spell_skilline[0] == SKILL_ALCHEMY
			|| sp->spell_skilline[0] == SKILL_HERBALISM
			|| sp->spell_skilline[0] == SKILL_COOKING
			|| sp->spell_skilline[0] == SKILL_MINING
			|| sp->spell_skilline[0] == SKILL_TAILORING
			|| sp->spell_skilline[0] == SKILL_ENGINEERING
			|| sp->spell_skilline[0] == SKILL_ENCHANTING
			|| sp->spell_skilline[0] == SKILL_FISHING
			|| sp->spell_skilline[0] == SKILL_SKINNING
			|| sp->spell_skilline[0] == SKILL_FIRST_AID
			|| sp->spell_skilline[0] == SKILL_JEWELCRAFTING
			|| sp->spell_skilline[0] == SKILL_INSCRIPTION
			|| sp->spell_skilline[0] == SKILL_RUNEFORGING
			|| sp->spell_skilline[0] == SKILL_ARCHAEOLOGY ) )
		{
				sp->c_is_flags3 |= SPELL_FLAG3_IS_DISABLE_OTHER_SPELL_CPROC;	//maybe not for all but mostly all
				sp->c_is_flags2 |= SPELL_FLAG2_IS_PROFESSION_SPELL;
				SetNoEffeCanCrit( sp );
				sp->Spell_value_is_scripted = true;
				SetSpellPowerCoeffsAll(sp,0.0f);
		}
//		if( sp->spell_skilline[0] &&
//			( sp->eff[0].EffectApplyAuraName == SPELL_AURA_ADD_FLAT_MODIFIER || sp->eff[1].EffectApplyAuraName == SPELL_AURA_ADD_FLAT_MODIFIER || sp->eff[2].EffectApplyAuraName == SPELL_AURA_ADD_FLAT_MODIFIER ||
//				sp->eff[0].EffectApplyAuraName == SPELL_AURA_ADD_PCT_MODIFIER || sp->eff[1].EffectApplyAuraName == SPELL_AURA_ADD_PCT_MODIFIER || sp->eff[2].EffectApplyAuraName == SPELL_AURA_ADD_PCT_MODIFIER ) )
//		{
//			sp->RequiredPlayerClass = xxx;
//		}
		

		// parse rank text
		if( !sscanf( sp->Rank, "Rank %u", (unsigned int*)&rank) )
			rank = 0;

		if( sp->SchoolMask & SCHOOL_MASK_FROST )
		{
		/*	if( sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_ROOT 
				|| sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_ROOT 
				|| sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_ROOT )
				sp->c_is_flags |= SPELL_FLAG_IS_CHILL_SPELL;*/
			//spell is decreasing speed -> not sure about this part
			if( sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_DECREASE_SPEED
				|| sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_DECREASE_SPEED 
				|| sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_DECREASE_SPEED )
				sp->c_is_flags |= SPELL_FLAG_IS_CHILL_SPELL;
			else if( ( sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_HASTE && sp->eff[0].EffectBasePoints < 0 )
				|| ( sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_HASTE && sp->eff[1].EffectBasePoints < 0 ) 
				|| ( sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_HASTE && sp->eff[2].EffectBasePoints < 0 )
				)
				sp->c_is_flags |= SPELL_FLAG_IS_CHILL_SPELL;
		}
		
		if( namehash == SPELL_HASH_DEEP_WOUND 
			|| namehash == SPELL_HASH_CHILLED )
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;

		//Rogue: Posion time fix for 2.3
		if( strstr( sp->Name, "Crippling Poison") && sp->eff[0].Effect == 54 ) //I, II
			sp->eff[0].EffectBasePoints = 3599;
		if( strstr( sp->Name, "Mind-numbing Poison") && sp->eff[0].Effect == 54 ) //I,II,III
			sp->eff[0].EffectBasePoints = 3599;
		if( strstr( sp->Name, "Instant Poison") && sp->eff[0].Effect == 54 ) //I,II,III,IV,V,VI,VII    
			sp->eff[0].EffectBasePoints = 3599;
		if( strstr( sp->Name, "Deadly Poison") && sp->eff[0].Effect == 54 ) //I,II,III,IV,V,VI,VII
			sp->eff[0].EffectBasePoints = 3599;
		if( strstr( sp->Name, "Wound Poison") && sp->eff[0].Effect == 54 ) //I,II,III,IV,V
			sp->eff[0].EffectBasePoints = 3599;
		if( strstr( sp->Name, "Anesthetic Poison") && sp->eff[0].Effect == 54 ) //I
			sp->eff[0].EffectBasePoints = 3599;

        if( strstr( sp->Name, "Sharpen Blade") && sp->eff[0].Effect == 54 ) //All BS stones
            sp->eff[0].EffectBasePoints = 3599;

		//these mostly do not mix so we can use else 
        // look for seal, etc in name
		if( namehash == SPELL_HASH_INCREASED_RESILIENCE_100 || namehash == SPELL_HASH_INCREASED_RESILIENCE_400 )
		{
//            sp->BGR_one_buff_on_target |= SPELL_TYPE_PVP_SET_RESILIANCE_BONUS;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
			DynamicCreateAssignSpellStackGroup( sp, 0, "PVP RESILIANCE BONUS" );
		}	
		else if( namehash == SPELL_HASH_MARK_OF_THE_WILD || namehash == SPELL_HASH_BLESSING_OF_KINGS )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_BLESSING;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "MARK BLESSING" );
		}	
		else if( namehash == SPELL_HASH_BANE_OF_HAVOC || namehash == SPELL_HASH_BANE_OF_AGONY || namehash == SPELL_HASH_BANE_OF_DOOM )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_WARLOCK_BANE;
//			sp->BGR_one_buff_on_target_skip_caster_check = true;	
			sp->BGR_one_buff_on_target_skip_caster_check = false;	//bane of doome will not be able to cast on 2 warlocks when dueling
//			DynamicCreateAssignSpellStackGroup( sp, 0, "Warlock Bane" );
		}	
        else if( strstr( sp->Name, "Blessing") && strstr( sp->Name, "mproved") == NULL )
		{
			//there should be levels for this, you may stak GBOM with BOK for example
           sp->BGR_one_buff_on_target |= SPELL_TYPE_BLESSING;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "MARK BLESSING 2" );
		}
		else if( sp->NameHash != SPELL_HASH_CURSE_OF_GUL_DAN && ( sp->NameHash == SPELL_HASH_BANE_OF_HAVOC || strstr( sp->Name, "Curse") ) )
            sp->BGR_one_buff_on_target |= SPELL_TYPE_CURSE;
        else if( strstr( sp->Name, "Seal of"))
            sp->BGR_one_buff_on_target |= SPELL_TYPE_SEAL;
        else if( strstr( sp->Name, "Corruption"))
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_CORRUPTION;
		}
        else if( strstr( sp->Name, "Chakra"))
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_CHACKRA;
		}
        else if( strstr( sp->Name, "Aspect") && (sp->Attributes & ATTRIBUTES_PASSIVE) == 0  )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_ASPECT;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "ASPECT" );
		}
        else if( (strstr( sp->Name, "Sting") || strstr( sp->Name, "sting"))  && (sp->Attributes & ATTRIBUTES_PASSIVE) == 0 )
            sp->BGR_one_buff_on_target |= SPELL_TYPE_STING;
        // don't break armor items!
        else if((strstr( sp->Name, "Fel Armor") || strstr( sp->Name, "Frost Armor") || strstr( sp->Name, "Ice Armor") || strstr( sp->Name, "Mage Armor") || strstr( sp->Name, "Molten Armor") || strstr( sp->Name, "Demon Skin") || strstr( sp->Name, "Demon Armor"))  && (sp->Attributes & ATTRIBUTES_PASSIVE) == 0)
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_ARMOR;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "Armor types" );
		}
        else if( strstr( sp->Name, "Aura") 
//			&& !strstr( sp->Name, "Trueshot") && !strstr( sp->Name, "Moonkin")
//			&& !strstr( sp->Name, "Crusader") && !strstr( sp->Name, "Sanctity") && !strstr( sp->Name, "Devotion") && !strstr( sp->Name, "Retribution") && !strstr( sp->Name, "Concentration") && !strstr( sp->Name, "Shadow Resistance") && !strstr( sp->Name, "Frost Resistance") && !strstr( sp->Name, "Fire Resistance") && !strstr( sp->Name, "Resistance")
			&& ( strstr( sp->Name, "Crusader") || strstr( sp->Name, "Sanctity") || strstr( sp->Name, "Devotion") || strstr( sp->Name, "Retribution") || strstr( sp->Name, "Concentration") || strstr( sp->Name, "Resistance") )
			)
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_AURA;
//			sp->BGR_one_buff_on_target_skip_caster_check = true;
		}
		//this can stack since cataclysm ?
/*		else if( strstr( sp->Name, "Track")==sp->Name)
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_TRACK;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "Track objects on minimap" );
		} */
		else if( namehash == SPELL_HASH_IMMOLATION_TRAP || namehash == SPELL_HASH_EXPLOSIVE_TRAP || namehash == SPELL_HASH_SNAKE_TRAP )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_HUNTER_TRAP;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "Hunter trap fire" );
			sp->c_is_flags3 |= SPELL_FLAG3_IS_HUNTER_TRAP;
		}
		else if( namehash == SPELL_HASH_FREEZING_TRAP || namehash == SPELL_HASH_FROST_TRAP || namehash == SPELL_HASH_SNAKE_TRAP )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_HUNTER_TRAP;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "hunter trap frost" );
			sp->c_is_flags3 |= SPELL_FLAG3_IS_HUNTER_TRAP;
		}
//		else if( namehash == SPELL_HASH_ARCANE_INTELLECT || namehash == SPELL_HASH_ARCANE_BRILLIANCE || namehash == SPELL_HASH_DALARAN_INTELLECT || namehash == SPELL_HASH_DALARAN_BRILLIANCE )
		else if( namehash == SPELL_HASH_ARCANE_INTELLECT || namehash == SPELL_HASH_ARCANE_BRILLIANCE 
			|| namehash == SPELL_HASH_DALARAN_BRILLIANCE 
			|| strstr( sp->Name, "Scroll of Intellect") 
			)
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_MAGE_INTEL;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "intellect buffs" );
		}
		else if( namehash == SPELL_HASH_AMPLIFY_MAGIC || namehash == SPELL_HASH_DAMPEN_MAGIC )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_MAGE_MAGI;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "dumpen and amplify" );
		}
		else if( namehash == SPELL_HASH_FIRE_WARD || namehash == SPELL_HASH_FROST_WARD )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_MAGE_WARDS;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "wards" );
		}
		else if( namehash == SPELL_HASH_SHADOW_PROTECTION || namehash == SPELL_HASH_PRAYER_OF_SHADOW_PROTECTION )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_PRIEST_SH_PPROT;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "shadow protection" );
		}
		else if( namehash == SPELL_HASH_WATER_SHIELD || namehash == SPELL_HASH_EARTH_SHIELD || namehash == SPELL_HASH_LIGHTNING_SHIELD )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_SHIELD;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "shields" );
		}
		else if( namehash == SPELL_HASH_POWER_WORD__FORTITUDE 
			|| namehash == SPELL_HASH_PRAYER_OF_FORTITUDE 
			|| namehash == SPELL_HASH_RUNESCROLL_OF_FORTITUDE 
			|| namehash == SPELL_HASH_FORTITUDE 
			|| namehash == SPELL_HASH_RUNESCROLL_OF_FORTITUDE_II 
			|| strstr( sp->Name, "Scroll of Stamina") 
			)
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_FORTITUDE;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "fortitude buffs" );
		}
/*		else if( namehash == SPELL_HASH_DIVINE_SPIRIT || namehash == SPELL_HASH_PRAYER_OF_SPIRIT )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_SPIRIT;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
		}*/
		else if( namehash == SPELL_HASH_WINDFURY_WEAPON__PASSIVE_ || namehash == SPELL_HASH_WINDFURY_WEAPON )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_WINDFURRY;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "windfurry pass" );
		}
		else if( namehash == SPELL_HASH_FLAMETONGUE_WEAPON__PASSIVE_ || namehash == SPELL_HASH_FLAMETONGUE_WEAPON )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_FLAMETONGUE;
			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			DynamicCreateAssignSpellStackGroup( sp, 0, "flametongue" );
		}
//		else if( strstr( sp->Name, "Curse of Weakness") || strstr( sp->Name, "Curse of Agony") || strstr( sp->Name, "Curse of Recklessness") || strstr( sp->Name, "Curse of Tongues") || strstr( sp->Name, "Curse of the Elements") || strstr( sp->Name, "Curse of Idiocy") || strstr( sp->Name, "Curse of Shadow") || strstr( sp->Name, "Curse of Doom"))
//		else if(namehash==4129426293 || namehash==885131426 || namehash==626036062 || namehash==3551228837 || namehash==2784647472 || namehash==776142553 || namehash==3407058720 || namehash==202747424)
//		else if( strstr( sp->Name, "Curse of "))
//            type |= SPELL_TYPE_WARLOCK_CURSES;
//		else if( strstr( sp->Name, "Immolate") || strstr( sp->Name, "Conflagrate"))
//			sp->BGR_one_buff_on_target |= SPELL_TYPE_WARLOCK_IMMOLATE;
		else if( strstr( sp->Name, "Immolate") || strstr( sp->Name, "Unstable Affliction"))
			sp->BGR_one_buff_on_target |= SPELL_TYPE_WARLOCK_IMMOLATE;
		else if( strstr( sp->Name, "Amplify Magic") || strstr( sp->Name, "Dampen Magic"))
		{
			sp->BGR_one_buff_on_target |= SPELL_TYPE_MAGE_AMPL_DUMP;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "amplify dumpen" );
		}
		else if( ( strstr( sp->Name, "Inner Will") || strstr( sp->Name, "Inner Fire")) && !strstr( sp->Name, "Glyph") )
		{
			sp->BGR_one_buff_on_target |= SPELL_TYPE_INNER_FIRE_WILL;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "inner firewill" );
		}
		else if( strstr( sp->Description, "Battle Elixir"))
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_ELIXIR_BATTLE;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "battle elixir" );
		}
        else if( strstr( sp->Description, "Guardian Elixir"))
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_ELIXIR_GUARDIAN;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "Guardian elixir" );
		}
        else if( strstr( sp->Description, "Battle and Guardian elixir"))
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_ELIXIR_FLASK;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "battle elixir" );
//			DynamicCreateAssignSpellStackGroup( sp, 0, "Guardian elixir" );
		}
		else if( namehash == SPELL_HASH_HUNTER_S_MARK )		// hunter's mark
		{
			sp->BGR_one_buff_on_target |= SPELL_TYPE_HUNTER_MARK;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "hunter mark" );
		}
        else if( namehash == SPELL_HASH_COMMANDING_SHOUT || namehash == SPELL_HASH_BATTLE_SHOUT )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_WARRIOR_SHOUT;
//			sp->BGR_one_buff_on_target_skip_caster_check = true;
		}
		else if( strstr( sp->Description, "Finishing move")==sp->Description)
			sp->c_is_flags |= SPELL_FLAG_IS_FINISHING_MOVE;
        else if( strstr( sp->Name, "Presence") && strstr( sp->Description, "Only one") )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_PRESENCE;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "presence" );
		}
        if( strstr( sp->Name, "Increased Resilience") )
		{
			DynamicCreateAssignSpellStackGroup( sp, 0, "PVP set resiliance bonus" );
			sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
			sp->maxstack = 1;
		}
//		else if( namehash == SPELL_HASH_FROST_SHOCK || namehash == SPELL_HASH_EARTH_SHOCK || namehash == SPELL_HASH_FLAME_SHOCK )
		{
//          sp->BGR_one_buff_on_target |= SPELL_TYPE_SHOCK;
//			sp->BGR_one_buff_on_target_skip_caster_check = true;	//cause name is not the same and it would stack otherwise
//			sp->BGR_one_buff_on_target_skip_caster_check = false;	//cause name is not the same and it would stack otherwise
		}

		if( IsDamagingSpell( sp ) )
			sp->c_is_flags |= SPELL_FLAG_IS_DAMAGING;
		if( IsHealingSpell( sp ) )
			sp->c_is_flags |= SPELL_FLAG_IS_HEALING;
		if( IsEnergizingSpell( sp ) )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_ENERGIZING;
		if( IsTargetingStealthed( sp ) )
			sp->c_is_flags |= SPELL_FLAG_IS_TARGETINGSTEALTHED;
		if( sp->eff[0].EffectApplyAuraName == SPELL_AURA_PERIODIC_HEAL || sp->eff[1].EffectApplyAuraName == SPELL_AURA_PERIODIC_HEAL || sp->eff[2].EffectApplyAuraName == SPELL_AURA_PERIODIC_HEAL )
			sp->c_is_flags |= SPELL_FLAG_IS_HEAL_OVER_TIME;
		if( sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT || sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT || sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT )
			sp->c_is_flags |= SPELL_FLAG_IS_HEAL_OVER_TIME;		
		if( sp->eff[0].EffectApplyAuraName == SPELL_AURA_PERIODIC_HEALTH_FUNNEL || sp->eff[1].EffectApplyAuraName == SPELL_AURA_PERIODIC_HEALTH_FUNNEL || sp->eff[2].EffectApplyAuraName == SPELL_AURA_PERIODIC_HEALTH_FUNNEL )
			sp->c_is_flags |= SPELL_FLAG_IS_HEAL_OVER_TIME;		
		if( IsSpellEnemyAoeTargetting( sp ) )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_ENEMY_AOE_TARGETTING;
		if( IsSpellEnemyAoeTargetting( sp ) || IsHealingSpell( sp ) )
		{
			sp->FacingCasterFlags &= ~(CASTER_FACE_FACING|TARGET_FACE_CASTER|CASTER_FACE_TARGET);
		}
		else
		{
			sp->FacingCasterFlags |= (CASTER_FACE_FACING|CASTER_FACE_TARGET);
			sp->FacingCasterFlags &= ~TARGET_FACE_CASTER;
		}
		if( IsSpellDirectTargetting( sp ) )
			sp->c_is_flags3 |= SPELL_FLAG3_IS_DIRECT_TARGET;
		if( IsSpellFriendlyAoeTargetting( sp ) )
			sp->c_is_flags3 |= SPELL_FLAG3_IS_FRIENDLY_AOE_TARGETING;

		if( sp->MechanicsType == MECHANIC_INVULNERABLE && sp->Id != 25771) // Cast spell Forbearance
			sp->chained_cast = dbcSpell.LookupEntryForced(25771);
		else if( sp->MechanicsType == MECHANIC_HEALING && sp->Id != 11196) // Cast spell Recently Bandaged
			sp->chained_cast = dbcSpell.LookupEntryForced(11196);
		else if( sp->MechanicsType == MECHANIC_SHIELDED && sp->Id != 6788) // Cast spell Weakened Soul
			sp->chained_cast = dbcSpell.LookupEntryForced(6788);

		//mixology targets
		if(  ( sp->eff[0].Effect == SPELL_EFFECT_APPLY_AURA || sp->eff[0].Effect == SPELL_EFFECT_NULL ) 
					 && ( sp->eff[1].Effect == SPELL_EFFECT_APPLY_AURA || sp->eff[1].Effect == SPELL_EFFECT_NULL ) 
					 && ( sp->eff[2].Effect == SPELL_EFFECT_APPLY_AURA || sp->eff[2].Effect == SPELL_EFFECT_NULL ) 
					 && ( strstr(sp->Name, "flask") || strstr(sp->Name, "elixir") || strstr(sp->Name, "Flask") || strstr(sp->Name, "Elixir") 
						|| strstr(sp->Description, "flask") || strstr(sp->Description, "elixir") || strstr(sp->Description, "Flask") || strstr(sp->Description, "Elixir") )
					 )
			sp->c_is_flags |= SPELL_FLAG_IS_FLASK_OR_ELIXIR | SPELL_FLAG_IS_REQ_ITEM_CASTER_MOD_CHK;
		//alchemist stone targets
		if(  
				//( sp->c_is_flags & (SPELL_FLAG_IS_HEALING | SPELL_FLAG_IS_HEAL_OVER_TIME) ) ||
				sp->eff[0].Effect == SPELL_EFFECT_ENERGIZE || sp->eff[0].Effect == SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT
				|| sp->eff[1].Effect == SPELL_EFFECT_ENERGIZE || sp->eff[1].Effect == SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT
				|| sp->eff[2].Effect == SPELL_EFFECT_ENERGIZE || sp->eff[2].Effect == SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT
				|| sp->eff[0].Effect == SPELL_EFFECT_HEAL || sp->eff[0].Effect == SPELL_EFFECT_HEAL_MAX_HEALTH || sp->eff[0].Effect == SPELL_EFFECT_HEAL_MAXHEALTH_PCT
				|| sp->eff[1].Effect == SPELL_EFFECT_HEAL || sp->eff[1].Effect == SPELL_EFFECT_HEAL_MAX_HEALTH || sp->eff[1].Effect == SPELL_EFFECT_HEAL_MAXHEALTH_PCT
				|| sp->eff[2].Effect == SPELL_EFFECT_HEAL || sp->eff[2].Effect == SPELL_EFFECT_HEAL_MAX_HEALTH || sp->eff[2].Effect == SPELL_EFFECT_HEAL_MAXHEALTH_PCT
/*				|| sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT || sp->eff[0].EffectApplyAuraName == SPELL_AURA_REGEN_MANA_STAT_PCT || sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT || sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT 
				|| sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT || sp->eff[1].EffectApplyAuraName == SPELL_AURA_REGEN_MANA_STAT_PCT || sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT || sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT 
				|| sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT || sp->eff[2].EffectApplyAuraName == SPELL_AURA_REGEN_MANA_STAT_PCT || sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT || sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT 
				|| sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_POWER_REGEN || sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_REGEN || sp->eff[0].EffectApplyAuraName == SPELL_AURA_DRINK_NEW || sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_PERCENT_REGEN || sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_POWER_REGEN_PERCENT || sp->eff[0].EffectApplyAuraName == SPELL_AURA_REGEN_MANA_STAT_PCT 
				|| sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_POWER_REGEN || sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_REGEN || sp->eff[1].EffectApplyAuraName == SPELL_AURA_DRINK_NEW || sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_PERCENT_REGEN || sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_POWER_REGEN_PERCENT || sp->eff[1].EffectApplyAuraName == SPELL_AURA_REGEN_MANA_STAT_PCT 
				|| sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_POWER_REGEN || sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_REGEN || sp->eff[2].EffectApplyAuraName == SPELL_AURA_DRINK_NEW || sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_PERCENT_REGEN || sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_POWER_REGEN_PERCENT || sp->eff[2].EffectApplyAuraName == SPELL_AURA_REGEN_MANA_STAT_PCT */
					 )
			sp->c_is_flags |= SPELL_FLAG_IS_ALCHEMIST_STONE_TARGET | SPELL_FLAG_IS_REQ_ITEM_CASTER_MOD_CHK;
		//reported first for health regen, but it seems other spells need this also
//		if( sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT || sp->eff[1].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT || sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT )
		{
			if( strstr( sp->Description, " over " ) )
			{
				sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_OVER_TIME;
				//maybe just divide the value by tick count right here ?
				// answer : we can't due to the spell scaling part
				//q2: maybe there is a field that specify the division part
			}
		}

		sp->ThreatForSpellCoef = 1.0f;
		//all negative buffs do treat unless specified othervise
		int32 tsp = sp->eff[0].EffectBasePoints+sp->eff[1].EffectBasePoints+sp->eff[2].EffectBasePoints+3+10; //make sure we have some base threath
		if( tsp <= 0 )
			sp->ThreatForSpell = 15;
		else
			sp->ThreatForSpell = tsp;
        if( strstr( sp->Description, " threat") )
		{
			if( strstr( sp->Description, " high amount") || strstr( sp->Description, " large amount") )
			{
				sp->ThreatForSpellCoef = 4; //boost threath output -> 1 threath hit = 4 heals ?
			}
			//this will influence other spells actually
			else if( strstr( sp->Description, "reduc") || strstr( sp->Description, " low") )
			{
				sp->ThreatForSpell = 10; //make sure we have some base threath
				sp->ThreatForSpellCoef = 0.25; 
			}
			else if( strstr( sp->Description, " no threat") )
			{
				sp->ThreatForSpell = 0; //make sure we have some no base threath
				sp->ThreatForSpellCoef = 0.0f; 
			}
			//this will influence other spells actually
			else if( strstr( sp->Description, " increases") )
			{
				sp->ThreatForSpellCoef = 2; //boost threath output -> 1 threath hit = 4 heals ?
			}
			else if( strstr( sp->Description, " moderate") || strstr( sp->Description, " additional") || strstr( sp->Description, " generat") 
				 || strstr( sp->Description, " additonal") //lol at blizz typo
				)
			{
				sp->ThreatForSpellCoef = 2; //boost threath output -> 1 threath hit = 4 heals ?
			}
		}

		//stupid spell ranking problem
		if( sp->SpellLevel.spellLevel==0)
		{
			uint32 new_level=0;
			if( strstr( sp->Name, "Apprentice "))
				new_level = 1;
			else if( strstr( sp->Name, "Journeyman "))
				new_level = 2;
			else if( strstr( sp->Name, "Expert "))
				new_level = 3;
			else if( strstr( sp->Name, "Artisan "))
				new_level = 4;
			else if( strstr( sp->Name, "Master "))
				new_level = 5;
			if(new_level!=0)
			{
				uint32 teachspell=0;
				if(sp->eff[0].Effect==SPELL_EFFECT_LEARN_SPELL)
					teachspell = sp->eff[0].EffectTriggerSpell;
				else if(sp->eff[1].Effect==SPELL_EFFECT_LEARN_SPELL)
					teachspell = sp->eff[1].EffectTriggerSpell;
				else if(sp->eff[2].Effect==SPELL_EFFECT_LEARN_SPELL)
					teachspell = sp->eff[2].EffectTriggerSpell;
				if(teachspell)
				{
					SpellEntry *spellInfo;
					spellInfo = dbcSpell.LookupEntryForced(teachspell);
					spellInfo->SpellLevel.spellLevel = new_level;
					sp->SpellLevel.spellLevel = new_level;
				}
			}
		}

		/*FILE * f = fopen("C:\\spells.txt", "a");
		fprintf(f, "case 0x%08X:		// %s\n", namehash, sp->Name);
		fclose(f);*/

		// find diminishing status
		sp->DiminishStatusMaxPVPDur = MAX_PVP_DURATION; //group might overwrite this duration
		sp->DiminishStatus = GetDiminishingGroup( sp, namehash );

		//another grouping rule

		//Quivers, Ammo Pouches and Thori'dal the Star's Fury
		if( ( namehash == SPELL_HASH_HASTE && sp->Attributes & 0x10000 ) || sp->Id == 44972 )
		{
			sp->Attributes &= ~ATTRIBUTES_PASSIVE;//Otherwise we couldn't remove them
			sp->BGR_one_buff_on_target |= SPELL_TYPE_QUIVER_HASTE;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "quiver haste" );
		}
		
		switch(namehash)
		{
//		case SPELL_HASH_SANCTITY_AURA:		
		case SPELL_HASH_DEVOTION_AURA:		
		case SPELL_HASH_RETRIBUTION_AURA:		
		case SPELL_HASH_CONCENTRATION_AURA:		
//		case SPELL_HASH_SHADOW_RESISTANCE_AURA:		
//		case SPELL_HASH_FIRE_RESISTANCE_AURA:		
//		case SPELL_HASH_FROST_RESISTANCE_AURA:		
		case SPELL_HASH_CRUSADER_AURA:		
			sp->BGR_one_buff_from_caster_on_self = SPELL_TYPE2_PALADIN_AURA;
			break;
		case SPELL_HASH_HUNTER_S_MARK:		// Hunter's mark
		case SPELL_HASH_MARKED_FOR_DEATH_53241:	// same as Hunter's mark just not dispelable
		case SPELL_HASH_MARKED_FOR_DEATH_67823:	// same as Hunter's mark just not dispelable
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_MARK;
			sp->BGR_one_buff_on_target |= SPELL_TYPE_HUNTER_MARK;
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			DynamicCreateAssignSpellStackGroup( sp, 0, "hunter mark" );
			break;
		//right now tree form will allow us to cast it on multiple targets. We will handle this scripted way
//		case SPELL_HASH_LIFEBLOOM:	
//			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_LIFEBLOOM;
//			break;
		case SPELL_HASH_BANE_OF_HAVOC:	
		case SPELL_HASH_BANE_OF_DOOM:	
		case SPELL_HASH_BANE_OF_AGONY:	
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_BANE;
			break;
		case SPELL_HASH_POLYMORPH:			// Polymorph
		case SPELL_HASH_POLYMORPH__CHICKEN:	// Polymorph: Chicken
//		case SPELL_HASH_POLYMORPH__PIG:		// Polymorph: Pig
		case SPELL_HASH_POLYMORPH__SHEEP:	// Polymorph: Sheep
		case SPELL_HASH_POLYMORPH__SPIDER:	// Polymorph: Sheep
//		case SPELL_HASH_POLYMORPH__TURTLE:	// Polymorph: Turtle
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_POLYMORPH;
			break;

		case SPELL_HASH_FEAR:				// Fear
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_FEAR;
			break;

		case SPELL_HASH_SAP:				// Sap
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_SAP;
			break;

		case SPELL_HASH_SCARE_BEAST:		// Scare Beast
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_SCARE_BEAST;
			break;

		case SPELL_HASH_HIBERNATE:			// Hibernate
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_HIBERNATE;
			break;

		case SPELL_HASH_EARTH_SHIELD:		// Earth Shield
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_EARTH_SHIELD;
			break;

		case SPELL_HASH_CYCLONE:			// Cyclone
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_CYCLONE;
			break;

		case SPELL_HASH_BANISH:				// Banish
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_BANISH;
			break;

/*		case SPELL_HASH_JUDGEMENT_OF_LIGHT:
		case SPELL_HASH_JUDGEMENT_OF_WISDOM:
		case SPELL_HASH_JUDGEMENT_OF_JUSTICE:
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_JUDGEMENT;
			break;
			*/

			//pet spell cooldowns are messed up most of the time :(
		case SPELL_HASH_BITE:
		case SPELL_HASH_CLAW:
		case SPELL_HASH_SMACK:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 3000; 
			break;
		case SPELL_HASH_LASH_OF_PAIN:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 2000; //2 sec
			break;
		case SPELL_HASH_GROW:
		case SPELL_HASH_STING:
		case SPELL_HASH_SWIPE:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 5000; //5 sec
			break;
		case SPELL_HASH_FROSTSTORM_BREATH:
		case SPELL_HASH_POISON_SPIT:
		case SPELL_HASH_FIRE_BREATH:
		case SPELL_HASH_LAVA_BREATH:
		case SPELL_HASH_LIGHTNING_BREATH:
		case SPELL_HASH_SPORE_CLOUD:
		case SPELL_HASH_DEMORALIZING_SCREECH:
		case SPELL_HASH_PROWL:
		case SPELL_HASH_ACID_SPIT:
		case SPELL_HASH_RAKE:
		case SPELL_HASH_GORE:
		case SPELL_HASH_SCORPID_POISON:
		case SPELL_HASH_MONSTROUS_BITE:
		case SPELL_HASH_SPIRIT_STRIKE:
		case SPELL_HASH_WARP:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 10000; //10 sec
			break;
		case SPELL_HASH_TENDON_RIP:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 20000; //20 sec
			break;
		case SPELL_HASH_PUMMEL:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 30000; //30 sec
			break;
		case SPELL_HASH_RAVAGE:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 15000; //15 sec
			break;
		case SPELL_HASH_NETHER_SHOCK:
		case SPELL_HASH_PIN:
		case SPELL_HASH_VENOM_WEB_SPRAY:
		case SPELL_HASH_DUST_CLOUD:
		case SPELL_HASH_FURIOUS_HOWL:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 40000; //40 sec
			break;
		case SPELL_HASH_SONIC_BLAST:
//		case SPELL_HASH_SNATCH:
		case SPELL_HASH_STAMPEDE:
		case SPELL_HASH_SERENITY_DUST:
		case SPELL_HASH_SAVAGE_REND:
		case SPELL_HASH_SHELL_SHIELD:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 60000; //60 sec
			break;
		case SPELL_HASH_BAD_ATTITUDE:
			if( sp->CategoryRecoveryTime == 0 )
				sp->CategoryRecoveryTime = 120000; //120 sec
			break;
		}

		switch(namehash)
		{
//			case SPELL_HASH_STEADY_SHOT:		sp->EffectHandler = &HandleSteadyShot; break;
			case SPELL_HASH_DEADLY_POISON:		sp->EffectHandler = &HandleDeadlyPoison; break;
			case SPELL_HASH_INSTANT_POISON:		sp->EffectHandler = &HandleInstantPoison; break;
			case SPELL_HASH_WOUND_POISON:		sp->EffectHandler = &HandleWoundPoison; break;
			case SPELL_HASH_ARCANE_SHOT:		sp->EffectHandler = &HandleArcaneShot; break;
			case SPELL_HASH_SERPENT_STING:		sp->EffectHandler = &HandleSerpentSting; break;
			case SPELL_HASH_KILL_SHOT:			sp->EffectHandler = &HandleKillShot; break;
			case SPELL_HASH_EVISCERATE:			sp->EffectHandler = &HandleEviscerate; break;
			case SPELL_HASH_DIVINE_SPIRIT:		sp->EffectHandler = &HandleDivineSpiritPrayerOfSpirit; break;
//			case SPELL_HASH_PRAYER_OF_SPIRIT:	sp->EffectHandler = &HandleDivineSpiritPrayerOfSpirit; break;
//			case SPELL_HASH_SEAL_OF_LIGHT:		sp->EffectHandler = &HandleSealOfLight; break;
//			case SPELL_HASH_FLASH_OF_LIGHT:		sp->EffectHandler = &HandleFlashOfLight; break;
//			case SPELL_HASH_DIVINE_STORM:		sp->EffectHandler = &HandleFlashOfLight; break;
			case SPELL_HASH_HYSTERIA:			sp->EffectHandler = &HandleHysteria; break;
			case SPELL_HASH_REND:				sp->EffectHandler = &HandleRend; break;
//			case SPELL_HASH_FEROCIOUS_BITE:		sp->EffectHandler = &HandleFerociousBite; break;
//			case SPELL_HASH_FAERIE_FIRE__FERAL_:				sp->EffectHandler = &HandleFaerieFire; break;
//			case SPELL_HASH_INFINITE_REPLENISHMENT___WISDOM:	sp->EffectHandler = &HandleReplenishment1; break;
//			case SPELL_HASH_VICTORY_RUSH:		sp->EffectHandler = &HandleVictoryRush; break;
//			case SPELL_HASH_OWLKIN_FRENZY:		sp->EffectHandler = &HandleOwlkinFrenzy; break;
			case SPELL_HASH_GARROTE:			sp->EffectHandler = &HandleGarotte; break;
			case SPELL_HASH_RUPTURE:			sp->EffectHandler = &HandleRupture; break;
//			case SPELL_HASH_RIP:				sp->EffectHandler = &HandleRip; break;
			case SPELL_HASH_EXPLOSIVE_SHOT:		sp->EffectHandler = &HandleExplosiveShot; break;
			case SPELL_HASH_BLACK_ARROW:		sp->EffectHandler = &HandleBlackArrow; break;
//			case SPELL_HASH_REVENGE:			sp->EffectHandler = &HandleRevenge; break;
//			case SPELL_HASH_MONGOOSE_BITE:		sp->EffectHandler = &HandleMangooseBite; break;
//			case SPELL_HASH_SWIPE__BEAR_:		sp->EffectHandler = &HandleSwipeBear; break;
//			case SPELL_HASH_HAMMER_OF_THE_RIGHTEOUS:			sp->EffectHandler = &HandleHammerOfRightous; break;
//			case SPELL_HASH_SHIELD_OF_RIGHTEOUS:			sp->EffectHandler = &HandleShieldOfRightous; break;
			case SPELL_HASH_EXORCISM:			sp->EffectHandler = &HandleExorcism; break;
			case SPELL_HASH_SHATTERING_THROW:	sp->EffectHandler = &HandleShatteringThrow; break;
//			case SPELL_HASH_GOUGE:				sp->EffectHandler = &HandleGouge; break;
//			case SPELL_HASH_DEATH_STRIKE:		sp->EffectHandler = &HandleDeathStrike; break;
			case SPELL_HASH_BLOOD_BOIL:			sp->EffectHandler = &HandleBloodBoil; break;
			case SPELL_HASH_BLOOD_STRIKE:		sp->EffectHandler = &HandleBloodStrikeObliterate; break;
			case SPELL_HASH_OBLITERATE:			sp->EffectHandler = &HandleBloodStrikeObliterate; break;
			case SPELL_HASH_HEART_STRIKE:		sp->EffectHandler = &HandleHearthStrike; break;
//			case SPELL_HASH_SCOURGE_STRIKE:		sp->EffectHandler = &HandleScourgeStrike; break;
			case SPELL_HASH_BLOOD_CAKED_STRIKE:	sp->EffectHandler = &HandleBloodCakedStrike; break;
//			case SPELL_HASH_ANTI_MAGIC_SHELL:	sp->EffectHandler = &HandleAntiMagicShell; break;
//			case SPELL_HASH_PLAGUE_STRIKE:		sp->EffectHandler = &HandlePlagueStrike; break;
//			case SPELL_HASH_RUNE_STRIKE:		sp->EffectHandler = &HandleRuneStrike; break;
			case SPELL_HASH_ICE_LANCE:			sp->EffectHandler = &HandleIceLance; break;
			case SPELL_HASH_CHAOS_BANE:			sp->EffectHandler = &HandleChaosBane; break;
			case SPELL_HASH_TYMPANIC_TANTRUM:	sp->EffectHandler = &HandleTympanicTantum; break;
			case SPELL_HASH_CONFLAGRATE:		sp->EffectHandler = &HandleConflagrate; break;
			case SPELL_HASH_HAND_OF_RECKONING:	sp->EffectHandler = &HandleHandOfReckoning; break;
			case SPELL_HASH_AVENGER_S_SHIELD:	sp->EffectHandler = &HandleAvangersShield; break;
			case SPELL_HASH_ENVENOM:			sp->EffectHandler = &HandleEnvenom; break;
//			case SPELL_HASH_CONSECRATION:		sp->EffectHandler = &HandleConsecration; break;
//			case SPELL_HASH_MUTILATE:			sp->EffectHandler = &HandleMutilate; break;
			default:break;
		}
/*		switch(sp->Id)
		{
//			case 57669:			sp->EffectHandler = &HandleReplenishment2; break;
//			case 20572:			sp->EffectHandler = &HandleBloodFury; break;
//			case 31804:			sp->EffectHandler = &HandleJudgeSealOfVengeanceSealOfCorruption; break;
//			case 53733:			sp->EffectHandler = &HandleJudgeSealOfVengeanceSealOfCorruption; break;
//			case 25742:			sp->EffectHandler = &HandleSealOfRightous; break;
//			case 53742:			sp->EffectHandler = &HandleHolyVengeanceBloodCorruption; break;
//			case 31803:			sp->EffectHandler = &HandleHolyVengeanceBloodCorruption; break;
			default:break;
		} */
		// HACK FIX: Break roots/fear on damage.. this needs to be fixed properly!
		if(!(sp->AuraInterruptFlags & AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN))
		{
			for(uint32 z = 0; z < 3; ++z) 
			{
				if( (sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_FEAR ||
					 sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_ROOT ||
					 sp->eff[z].EffectMechanic == MECHANIC_POLYMORPHED )
					 && sp->eff[z].EffectMechanic != MECHANIC_STUNNED )
				{
					sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
					break;
				}
				if( sp->MechanicsType == MECHANIC_POLYMORPHED )
					sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
			}
		}

		for(uint32 z = 0; z < MAX_SPELL_EFFECT_COUNT; ++z) 
		{
			if( ( sp->eff[z].EffectApplyAuraName == SPELL_AURA_PERIODIC_DAMAGE || sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_DMG_TAKEN_MECHANIC_PCT )
				&& strstr( sp->Description, " bleed") ) 
				sp->eff[z].EffectMechanic = MECHANIC_BLEEDING;
			if( sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_STUN || sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_FEAR 
				|| sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_ROOT || sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_CONFUSE
				|| sp->eff[z].EffectApplyAuraName == SPELL_AURA_MOD_CHARM )
				sp->c_is_flags2 |= SPELL_FLAG2_IS_PROCCING_PURSUIT_OF_JUSTICE;

			if( ( sp->eff[z].Effect == SPELL_EFFECT_SCHOOL_DAMAGE && sp->GetSpellDMGType() == SPELL_DMG_TYPE_MELEE ) || sp->eff[z].Effect == SPELL_EFFECT_WEAPON_DAMAGE_NOSCHOOL || sp->eff[z].Effect == SPELL_EFFECT_WEAPON_DAMAGE || sp->eff[z].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE || sp->eff[z].Effect == SPELL_EFFECT_DUMMYMELEE )
				sp->is_melee_spell = true;
			//omg dodge fireballs !
			if( ( sp->eff[z].Effect == SPELL_EFFECT_SCHOOL_DAMAGE && sp->GetSpellDMGType() == SPELL_DMG_TYPE_RANGED ) )
			{
				//Log.Notice( "SpellFixes" , "Ranged Spell: %u [%s]" , sp->Id , sp->Name );
				sp->is_ranged_spell = true;
			}
		}

		if( sp->School 
			&& sp->eff[0].EffectApplyAuraName != SPELL_AURA_MOD_POSSESS
			&& sp->eff[1].EffectApplyAuraName != SPELL_AURA_MOD_POSSESS
			&& sp->eff[2].EffectApplyAuraName != SPELL_AURA_MOD_POSSESS
			&& sp->is_melee_spell == false
			)
			sp->c_is_flags |= SPELL_FLAG_IS_ALLOW_MAGNET_TARGET;

		{
			int dispelMechanic = 0;
			for(uint32 i=0;i<MAX_SPELL_EFFECT_COUNT;i++)
				if( sp->eff[i].Effect == SPELL_EFFECT_DISPEL_MECHANIC && sp->eff[i].EffectMiscValue == MECHANIC_INVULNERABLE )
					dispelMechanic = 1;
			if( sp->NameHash == SPELL_HASH_MASS_DISPEL )
				dispelMechanic = 1;
			if( dispelMechanic )
				sp->c_is_flags3 |= SPELL_FLAG3_IS_DISPEL_MECHANIC;
		}

		// set extra properties
		sp->RankNumber = rank;

		uint32 pr=sp->procFlags;
		for(uint32 y=0;y < 3; y++)
		{
			// get the effect number from the spell
			effect = sp->eff[y].Effect;
			if(effect==SPELL_EFFECT_APPLY_AURA)
			{
				uint32 aura = sp->eff[y].EffectApplyAuraName;
				if( aura == SPELL_AURA_PROC_TRIGGER_SPELL ||
					aura == SPELL_AURA_PROC_TRIGGER_DAMAGE
					)//search for spellid in description
				{
					pr=0;

					uint32 len = (uint32)strlen(sp->Description);
					for(i = 0; i < len; ++i)
						sp->Description[i] = tolower(sp->Description[i]);
					//dirty code for procs, if any1 got any better idea-> u are welcome
					//139944 --- some magic number, it will trigger on all hits etc
						//for seems to be smth like custom check
					if( strstr( sp->Description,"your ranged criticals"))
						pr|=PROC_ON_RANGED_CRIT_ATTACK;
					if( strstr( sp->Description,"chance on hit"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"takes damage"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"attackers when hit"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"character strikes an enemy"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"strike you with a melee attack"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"target casts a spell"))
						pr|=PROC_ON_CAST_SPELL;
                    if( strstr( sp->Description,"your harmful spells land"))
                        pr|=PROC_ON_CAST_SPELL;
                    if( strstr( sp->Description,"on spell critical hit"))
                        pr|=PROC_ON_SPELL_CRIT_HIT;
                    if( strstr( sp->Description,"spell critical strikes"))
                        pr|=PROC_ON_SPELL_CRIT_HIT;
                    if( strstr( sp->Description,"being able to resurrect"))
                        pr|=PROC_ON_DIE_VICTIM;
					if( strstr( sp->Description,"any damage caused"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"the next melee attack against the caster"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"when successfully hit"))
						pr|=PROC_ON_MELEE_ATTACK ;
					if( strstr( sp->Description,"an enemy on hit"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"when it hits"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"when successfully hit"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"on a successful hit"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"damage to attacker on hit"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"on a hit"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"strikes you with a melee attack"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"when caster takes damage"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"when the caster is using melee attacks"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"when struck in combat") || strstr(sp->Description,"When struck in combat"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"successful melee attack"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"chance per attack"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"chance per hit"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"that strikes a party member"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"when hit by a melee attack"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"landing a melee critical strike"))
						pr|=PROC_ON_CRIT_ATTACK;
					if( strstr( sp->Description,"your critical strikes"))
						pr|=PROC_ON_CRIT_ATTACK;
					if( strstr( sp->Description,"whenever you deal ranged damage"))
						pr|=PROC_ON_RANGED_ATTACK;
//					if( strstr( sp->Description,"whenever you deal melee damage"))
					if( strstr( sp->Description,"you deal melee damage"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"our melee attacks"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"our healing spells"))
						pr|=( PROC_ON_HEAL_EVENT );
					if( strstr( sp->Description,"our spells have"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"our ranged attacks"))
						pr|=PROC_ON_RANGED_ATTACK;
					if( strstr( sp->Description,"our attacks"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"damage with your Sword"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"when struck in melee combat"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"any successful spell cast against the priest"))
						pr|=PROC_ON_SPELL_HIT_VICTIM_DOT;
					if( strstr( sp->Description,"the next melee attack on the caster"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"striking melee or ranged attackers"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM|PROC_ON_RANGED_ATTACK_VICTIM;
					if( strstr( sp->Description,"when damaging an enemy in melee"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"victim of a critical strike"))
						pr|=PROC_ON_CRIT_HIT_VICTIM;
					if( strstr( sp->Description,"on successful melee or ranged attack"))
						pr|=PROC_ON_MELEE_ATTACK|PROC_ON_RANGED_ATTACK;
					if( strstr( sp->Description,"enemy that strikes you in melee"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"after getting a critical strike"))
						pr|=PROC_ON_CRIT_ATTACK;
					if( strstr( sp->Description,"whenever damage is dealt to you"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"when ranged or melee damage is dealt"))
						pr|=PROC_ON_MELEE_ATTACK|PROC_ON_RANGED_ATTACK;
					if( strstr( sp->Description,"damaging melee attacks"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"on melee or ranged attack"))
						pr|=PROC_ON_MELEE_ATTACK|PROC_ON_RANGED_ATTACK;
					if( strstr( sp->Description,"on a melee swing"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"Chance on melee"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"spell criticals against you"))
						pr|=PROC_ON_SPELL_CRIT_HIT_VICTIM;
					if( strstr( sp->Description,"after being struck by a melee or ranged critical hit"))
						pr|=PROC_ON_CRIT_HIT_VICTIM;
//					if( strstr( sp->Description,"on a critical hit"))
					if( strstr( sp->Description,"critical hit"))
						pr|=PROC_ON_CRIT_ATTACK;
					if( strstr( sp->Description,"strikes the caster"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"a spell, melee or ranged attack hits the caster"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"after dealing a critical strike"))
						pr|=PROC_ON_CRIT_ATTACK;
					if( strstr( sp->Description,"each melee or ranged damage hit against the priest"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM|PROC_ON_RANGED_ATTACK_VICTIM;				
					if( strstr( sp->Description, "a chance to deal additional"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description, "chance to get an extra attack"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description, "melee attacks has"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description, "any damage spell hits a target"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description, "giving each melee attack a chance"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description, "damage when hit"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM; //myabe melee damage ?
					if( strstr( sp->Description, "gives your"))
					{
						if( strstr( sp->Description, "melee"))
							pr|=PROC_ON_MELEE_ATTACK;
						else if( strstr( sp->Description,"sinister strike, backstab, gouge and shiv"))
							pr|=PROC_ON_CAST_SPELL;
						else if( strstr( sp->Description,"chance to daze the target"))
							pr|=PROC_ON_CAST_SPELL;
						else if( strstr( sp->Description,"finishing moves"))
							pr|=PROC_ON_CAST_SPELL;
						//we should find that specific spell (or group) on what we will trigger
						else pr|=PROC_ON_CAST_SPELL;
					}
					if( strstr( sp->Description, "chance to add an additional combo") && strstr(sp->Description, "critical") )
						pr|=PROC_ON_CRIT_ATTACK;
					else if( strstr( sp->Description, "chance to add an additional combo"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description, "victim of a melee or ranged critical strike"))
						pr|=PROC_ON_CRIT_HIT_VICTIM;
					if( strstr( sp->Description, "getting a critical effect from"))
						pr|=PROC_ON_SPELL_CRIT_HIT_VICTIM;
					if( strstr( sp->Description, "damaging attack is taken"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description, "struck by a Stun or Immobilize"))
						pr|=PROC_ON_SPELL_LAND_VICTIM;
					if( strstr( sp->Description, "melee critical strike"))
						pr|=PROC_ON_CRIT_ATTACK;
					if( strstr( sp->Name, "Bloodthirst"))
					{
						pr|=PROC_ON_MELEE_ATTACK;
						sp->procFlags2 |= PROC2_TARGET_SELF;
					}
					if( strstr( sp->Description, "experience or honor"))
						pr|=PROC_ON_GAIN_EXPIERIENCE;
					if( strstr( sp->Description,"your next offensive ability"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"hit by a melee or ranged attack"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
					if( strstr( sp->Description,"enemy strikes the caster"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"melee and ranged attacks against you"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
					if( strstr( sp->Description,"when a block occurs"))
						pr|=PROC_ON_BLOCK_VICTIM;
					if( strstr( sp->Description,"dealing a critical strike from a weapon swing, spell, or ability"))
						pr|=PROC_ON_CRIT_ATTACK|PROC_ON_SPELL_CRIT_HIT;
					if( strstr( sp->Description,"dealing a critical strike from a weapon swing, spell, or ability"))
						pr|=PROC_ON_CRIT_ATTACK|PROC_ON_SPELL_CRIT_HIT;
					if( strstr( sp->Description,"shadow bolt critical strikes increase shadow damage"))
						pr|=PROC_ON_SPELL_CRIT_HIT;
					if( strstr( sp->Description,"next offensive ability"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"after being hit with a shadow or fire spell"))
						pr|=PROC_ON_SPELL_LAND_VICTIM;
					if( strstr( sp->Description,"giving each melee attack"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"each strike has"))
						pr|=PROC_ON_MELEE_ATTACK;		
					if( strstr( sp->Description,"your Fire damage spell hits"))
						pr|=PROC_ON_CAST_SPELL;		//this happens only on hit ;)
					if( strstr( sp->Description,"corruption, curse of agony, siphon life and seed of corruption spells also cause"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"pain, mind flay and vampiric touch spells also cause"))
						pr|=PROC_ON_CAST_SPELL;
//					if( strstr( sp->Description,"shadow damage spells have"))
//						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"on successful spellcast"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"your spell criticals have"))
						pr|=PROC_ON_SPELL_CRIT_HIT | PROC_ON_SPELL_CRIT_HIT_VICTIM;
					if( strstr( sp->Description,"after dodging their attack"))
					{
						pr|=PROC_ON_DODGE_VICTIM;
						if( strstr( sp->Description,"add a combo point"))
							sp->procFlags2 |= PROC2_TARGET_SELF;
					}
					if( strstr( sp->Description,"fully resisting"))
						pr|=PROC_ON_RESIST_VICTIM;
					if( strstr( sp->Description,"Your Shadow Word: Pain, Mind Flay and Vampiric Touch spells also cause the target"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"chance on spell hit"))
						pr|=PROC_ON_CAST_SPELL;
					if( strstr( sp->Description,"our melee and ranged attacks"))
						pr|=PROC_ON_MELEE_ATTACK|PROC_ON_RANGED_ATTACK;
//					if( strstr( sp->Description,"chill effect to your Blizzard"))
//						pr|=PROC_ON_CAST_SPELL;	
					//////////////////////////////////////////////////
					//proc dmg flags
					//////////////////////////////////////////////////
					if( strstr( sp->Description,"each attack blocked"))
						pr|=PROC_ON_BLOCK_VICTIM;
					if( strstr( sp->Description,"into flame, causing an additional"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"victim of a critical melee strike"))
						pr|=PROC_ON_CRIT_HIT_VICTIM;
					if( strstr( sp->Description,"damage to melee attackers"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"target blocks a melee attack"))
						pr|=PROC_ON_BLOCK_VICTIM;
					if( strstr( sp->Description,"ranged and melee attacks to deal"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
					if( strstr( sp->Description,"damage on hit"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"chance on hit"))
						pr|=PROC_ON_MELEE_ATTACK;
					if( strstr( sp->Description,"after being hit by any damaging attack"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"striking melee or ranged attackers"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
					if( strstr( sp->Description,"damage to attackers when hit"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"striking melee attackers"))
						pr|=PROC_ON_MELEE_ATTACK_VICTIM;
					if( strstr( sp->Description,"whenever the caster takes damage"))
						pr|=PROC_ON_ANY_DAMAGE_VICTIM;
					if( strstr( sp->Description,"damage on every attack"))
						pr|=PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
					if( strstr( sp->Description,"chance to reflect Fire spells"))
						pr|=PROC_ON_SPELL_HIT_VICTIM_DOT|PROC_ON_SPELL_HIT_VICTIM_NOT_DOT;
					if( strstr( sp->Description,"hunter takes on the aspects of a hawk"))
					{
						pr|= PROC_ON_RANGED_ATTACK;
						sp->procFlags2 |= PROC2_TARGET_SELF;
					}
//					if( strstr( sp->Description,"successful auto shot attacks"))
//						pr|=PROC_ON_AUTO_SHOT_HIT;
					if( strstr( sp->Description,"after getting a critical effect from your"))
						pr=PROC_ON_SPELL_CRIT_HIT;
//					if( strstr( sp->Description,"Your critical strikes from Fire damage"))
//						pr|=PROC_ON_SPELL_CRIT_HIT;
				}//end "if procspellaura"
				//dirty fix to remove auras that should expire on event and they are not
//				else if( sp->procCharges>0)
//				{
					//there are at least 185 spells that should loose charge uppon some event.Be prepared to add more here !
					// ! watch it cause this might conflict with our custom modified spells like : lighning shield !

					//spells like : Presence of Mind,Nature's Swiftness, Inner Focus,Amplify Curse,Coup de Grace
					//SELECT * FROM dbc_spell where proc_charges!=0 and (effect_aura_1=108 or effect_aura_2=108 and effect_aura_3=108) and description!=""
//					if(aura == SPELL_AURA_ADD_PCT_MODIFIER)
//						sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_CAST_SPELL;
					//most of them probably already have these flags...not sure if we should add to all of them without checking
/*					if( strstr( sp->Description, "melee"))
						sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_START_ATTACK;
					if( strstr( sp->Description, "ranged"))
						sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_START_ATTACK;*/
//				}
			}//end "if aura"
		}//end "for each effect"
		sp->procFlags = pr;
		if( sp->procChance == 0 && sp->eff[0].EffectApplyAuraName == SPELL_AURA_PROC_TRIGGER_SPELL )
		{
			if( sp->eff[0].EffectBasePoints != 0 )
				sp->procChance = sp->eff[0].EffectBasePoints;
			else
				sLog.outDebug("Spell %u has 0 procchance ! %s",sp->Id, sp->Name);
		}

		if( strstr( sp->Description, "Must remain seated"))
		{
			sp->RecoveryTime = 1000;
			sp->CategoryRecoveryTime = 1000;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////
		// procintervals
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		//omg lighning shield trigger spell id's are all wrong ?
		//if you are bored you could make thiese by hand but i guess we might find other spells with this problem..and this way it's safe
/*		if( strstr( sp->Name, "Lightning Shield" ) && sp->eff[0].EffectTriggerSpell )
		{
			//check if we can find in the desription
			char *startofid = strstr(sp->Description, "for $");
			if( startofid )
			{
				startofid += strlen("for $");
				sp->eff[0].EffectTriggerSpell = atoi( startofid ); //get new lightning shield trigger id
			}
			sp->proc_interval = 3000; //few seconds
			sp->procFlags2 |= PROC2_REMOVEONUSE;
		}
		// Winter's Chill handled by frost school
		else */
		if( strstr( sp->Name, "Winter's Chill"))
		{
			sp->School = 4;
		}
		//more triggered spell ids are wrong. I think blizz is trying to outsmart us :S
		//Chain Heal all ranks %50 heal value (49 + 1)
		else if( strstr( sp->Name, "Chain Heal"))
		{
			sp->eff[0].EffectDieSides = 49;
		}
/*		else if( sp->eff[0].Effect = SPELL_EFFECT_DUMMY && strstr( sp->Name, "Holy Shock"))
		{
			//check if we can find in the desription
			char *startofid=strstr(sp->Description, "causing $");
			if(startofid)
			{
				startofid += strlen("causing $");
				sp->eff[0].EffectTriggerSpell = atoi(startofid);
				sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			}
			//check if we can find in the desription
			startofid=strstr(sp->Description, " or $");
			if(startofid)
			{
				startofid += strlen(" or $");
				sp->eff[1].EffectTriggerSpell=atoi(startofid);
				sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
			}
		}*/
		else if( strstr( sp->Name, "Touch of Weakness"))
		{
			//check if we can find in the desription
			char *startofid=strstr(sp->Description, "cause $");
			if(startofid)
			{
				startofid += strlen("cause $");
				sp->eff[0].EffectTriggerSpell = atoi(startofid);
				sp->eff[1].EffectTriggerSpell=sp->eff[0].EffectTriggerSpell; //later versions of this spell changed to eff[1] the aura
				sp->procFlags = uint32(PROC_ON_MELEE_ATTACK_VICTIM);
			}
		}
		else if( strstr( sp->Name, "Firestone Passive"))
		{
			//Enchants the main hand weapon with fire, granting each attack a chance to deal $17809s1 additional fire damage.
			//check if we can find in the desription
			char * startofid=strstr(sp->Description, "to deal $");
			if(startofid)
			{
				startofid += strlen("to deal $");
				sp->eff[0].EffectTriggerSpell = atoi(startofid);
				sp->eff[0].EffectApplyAuraName = 42;
				sp->procFlags = PROC_ON_MELEE_ATTACK;
				sp->procChance = 50;
			}
		}
		//some procs trigger at intervals
		else if( strstr( sp->Name, "Water Shield"))
		{
			sp->proc_interval = 3000; //few seconds
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procFlags2 |= PROC2_REMOVEONUSE;
		}
		else if( strstr( sp->Name, "Shadowguard"))
		{
			sp->proc_interval = 3000; //few seconds
			sp->procFlags |= PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
			sp->procFlags2 |= PROC2_REMOVEONUSE;
		}
		else if( strstr( sp->Name, "Poison Shield"))
		{
			sp->proc_interval = 3000; //few seconds
			sp->procFlags2 |= PROC2_REMOVEONUSE;
		}
		else if( strstr( sp->Name, "Infused Mushroom"))
		{
			sp->proc_interval = 10000; //10 seconds
			sp->procFlags2 |= PROC2_REMOVEONUSE;
		}
		else if( strstr( sp->Name, "Aviana's Purpose"))
		{
			sp->proc_interval = 10000; //10 seconds
			sp->procFlags2 |= PROC2_REMOVEONUSE;
		}
		//don't change to namehash since we are searching only a protion of the name
 		else if( strstr( sp->Name, "Crippling Poison"))
		{
			//sp->GetSpellGroupType()[0] |= 16384; //some of them do have the flags but i's hard to write down those some from 130 spells
			sp->c_is_flags |= SPELL_FLAG_IS_POISON;
			sp->proc_interval = 500;
			sp->NameHash = SPELL_HASH_CRIPPLING_POISON;//cause each rank has new name :S
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
//			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;	//ranged attack is required by Fan of Knives 
			sp->procFlags = 0;	//we should detect for which weapon we are proccing it
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
		}
		else if( strstr( sp->Name, "Mind-numbing Poison"))
		{
			//sp->GetSpellGroupType()[0] |= 32768; //some of them do have the flags but i's hard to write down those some from 130 spells
			sp->c_is_flags |= SPELL_FLAG_IS_POISON;
			sp->proc_interval = 500;
			sp->NameHash = SPELL_HASH_MIND_NUMBING_POISON;//cause each rank has new name :S
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
//			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;	//ranged attack is required by Fan of Knives 
			sp->procFlags = 0;	//we should detect for which weapon we are proccing it
		}
		else if( strstr( sp->Name, "Instant Poison"))
		{
			//sp->GetSpellGroupType()[0] |= 8192; //some of them do have the flags but i's hard to write down those some from 130 spells
			sp->c_is_flags |= SPELL_FLAG_IS_POISON;
			sp->procChance = 20;	//this is now PPM based
			sp->proc_interval = uint32(60000 / (8.53f * 1.0f));
			sp->NameHash = SPELL_HASH_INSTANT_POISON;//cause each rank has new name :S
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
//			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;	//ranged attack is required by Fan of Knives 
			sp->procFlags = 0;	//we should detect for which weapon we are proccing it
		}
		else if( strstr( sp->Name, "Deadly Poison"))
		{
			//sp->GetSpellGroupType()[0] |= 65536; //some of them do have the flags but i's hard to write down those some from 130 spells
			sp->c_is_flags |= SPELL_FLAG_IS_POISON;
			sp->procChance = 30;
			sp->proc_interval = 500;
			sp->NameHash = SPELL_HASH_DEADLY_POISON;//cause each rank has new name :S
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
//			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;	//ranged attack is required by Fan of Knives 
			sp->procFlags = 0;	//we should detect for which weapon we are proccing it
		}
		else if( strstr( sp->Name, "Wound Poison"))
		{
			//sp->GetSpellGroupType()[0] |= 268435456; //some of them do have the flags but i's hard to write down those some from 130 spells
			sp->c_is_flags |= SPELL_FLAG_IS_POISON;
			sp->BGR_one_buff_on_target |= SPELL_TYPE_POISON;	//avoid reducing heal to 0%
			sp->BGR_one_buff_on_target_skip_caster_check = true;
//			sp->procChance = 50;	//this is now PPM based
			sp->proc_interval = uint32(60000 / (21.43f * 1.0f));
			sp->NameHash = SPELL_HASH_WOUND_POISON; //cause each rank has new name :S
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
//			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;	//ranged attack is required by Fan of Knives 
			sp->procFlags = 0;	//we should detect for which weapon we are proccing it
		}
		else if( strstr( sp->Name, "Scorpid Poison") )
		{
			// groups?
			sp->c_is_flags |= SPELL_FLAG_IS_POISON;
		}
		if( HasAuraType( sp, SPELL_AURA_MOD_STEALTH ) )
			sp->c_is_flags3 |= SPELL_FLAG3_IS_STEALTH_SPELL;
		//warlock - shadow bolt
//		if( sp->NameHash == SPELL_HASH_SHADOW_BOLT )
			//sp->GetSpellGroupType()[0] |= 1; //some of them do have the flags but i's hard to write down those some from 130 spells

/*		else if( strstr( sp->Name, "Anesthetic Poison"))
			sp->GetSpellGroupType()[0] |= 0; //not yet known ? 
		else if( strstr( sp->Name, "Blinding Powder"))
			sp->GetSpellGroupType()[0] |= 0; //not yet known ?
		else 
		if( sp->NameHash == SPELL_HASH_ILLUMINATION )
			sp->eff[0].EffectTriggerSpell = 20272;*/  // broken trigger spell, do not use
		//sp->dummy=result;
/*		//if there is a proc spell and has 0 as charges then it's probably going to triger infinite times. Better not save these
		if( sp->procCharges==0)
			sp->procCharges=-1;*/
//		if( sp->NameHash == SPELL_HASH_ILLUMINATION )
//			sp->procFlags2 |= PROC2_TARGET_SELF;

		// Set default mechanics if we don't already have one
		if( !sp->MechanicsType )
		{
			//Set Silencing spells mechanic.
			if( sp->eff[0].EffectApplyAuraName == 27 || 
				sp->eff[1].EffectApplyAuraName == 27 ||
				sp->eff[2].EffectApplyAuraName == 27 )
				sp->MechanicsType = MECHANIC_SILENCED;
	
			//Set Stunning spells mechanic.
			if( sp->eff[0].EffectApplyAuraName == 12 || 
				sp->eff[1].EffectApplyAuraName == 12 ||
				sp->eff[2].EffectApplyAuraName == 12 )
				sp->MechanicsType = MECHANIC_STUNNED;
	
			//Set Fearing spells mechanic
			if( sp->eff[0].EffectApplyAuraName == 7 || 
				sp->eff[1].EffectApplyAuraName == 7 ||
				sp->eff[2].EffectApplyAuraName == 7 )
				sp->MechanicsType = MECHANIC_FLEEING;
		
			//Set Interrupted spells mech
			if( sp->eff[0].Effect == SPELL_EFFECT_INTERRUPT_CAST || 
				sp->eff[1].Effect == SPELL_EFFECT_INTERRUPT_CAST ||
				sp->eff[2].Effect == SPELL_EFFECT_INTERRUPT_CAST )
				sp->MechanicsType = MECHANIC_INTERRUPTED;

			if( sp->NameHash == SPELL_HASH_UNHOLY_FRENZY 
				|| sp->NameHash == SPELL_HASH_VENGEANCE
				|| sp->NameHash == SPELL_HASH_ENRAGE
				|| sp->NameHash == SPELL_HASH_SAVAGE_ROAR
				|| sp->NameHash == SPELL_HASH_OWLKIN_FRENZY
				|| sp->NameHash == SPELL_HASH_BERSERKER_RAGE
				|| sp->NameHash == SPELL_HASH_WRECKING_CREW
				|| sp->NameHash == SPELL_HASH_DEATH_WISH
				|| sp->NameHash == SPELL_HASH_BASTION_OF_DEFENSE )
				sp->MechanicsType = MECHANIC_ENRAGED;
		}

//		if( sp->proc_interval != 0 )
//			sp->procFlags2 |= PROC2_REMOVEONUSE;

		/* Decapitate */
		if( sp->NameHash == SPELL_HASH_DECAPITATE )
			sp->procChance = 30;

		//shaman - shock, has no spellgroup.very dangerous move !
//		if( sp->NameHash == SPELL_HASH_SHOCK )
			//sp->GetSpellGroupType()[0] = 4;

		//mage - fireball. Only some of the spell has the flags 
//		if( sp->NameHash == SPELL_HASH_FIREBALL )
			//sp->GetSpellGroupType()[0] |= 1;

		if( sp->NameHash == SPELL_HASH_BLESSING_OF_PROTECTION )
			sp->MechanicsType = MECHANIC_INVULNERABLE;
		//else if( sp->NameHash == SPELL_HASH_POWER_WORD__SHIELD )
//			sp->MechanicsType = MECHANIC_INVULNERABLE;
		//maybe all root or loast control effects ?
		else if( sp->NameHash == SPELL_HASH_FROST_NOVA )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;	//removed in 3.3.3 ?
		else if( sp->NameHash == SPELL_HASH_ENTANGLING_ROOTS )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;	//removed in 3.3.3 ?
		else if( sp->NameHash == SPELL_HASH_FEAR )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;	//removed in 3.3.3 ?
		else if( sp->NameHash == SPELL_HASH_PSYCHIC_SCREAM )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;	//removed in 3.3.3 ?
		else if( sp->NameHash == SPELL_HASH_DRAGON_S_BREATH )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;	//removed in 3.3.3 ?
//		else if( sp->NameHash == SPELL_HASH_SHOCKWAVE )
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;	//removed in 3.3.3 ?
		else if( sp->NameHash == SPELL_HASH_STEALTH )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ENTER_COMBAT | AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;	//removed in 3.3.3 ?
		else if( sp->NameHash == SPELL_HASH_WELL_FED || sp->NameHash == SPELL_HASH__WELL_FED_ )
		{
			sp->InterruptFlags &= ~(CAST_INTERRUPT_ON_MOVEMENT);
//			sp->c_is_flags2 |= SPELL_FLAG2_IS_ALLOWED_TO_LEAVE_CHAINED_AURAS;
		}

		/* hackfix for this - FIX ME LATER - Burlex */
		if( sp->NameHash == SPELL_HASH_SEAL_FATE )
			sp->procFlags = 0;

//		if(	sp->NameHash == SPELL_HASH_DEATH_AND_DECAY )
//			sp->AP_spell_bonus_base[0] = 0.064f;
//		if(	sp->NameHash == SPELL_HASH_FROST_FEVER )
//			sp->DK_AP_spell_bonus[0] = 0.055f * 1.15f * sp->quick_tickcount * 2.5f; //2.5 is a heck to get the same value as client has :(
//			sp->DK_AP_spell_bonus[0] = 0.055f * 1.15f; //2.5 is a heck to get the same value as client has :(
//		if(	sp->NameHash == SPELL_HASH_BLOOD_PLAGUE )
//			sp->DK_AP_spell_bonus[0] = 0.055f * 1.15f * sp->quick_tickcount * 2.5f;	//2.5 is a heck to get the same value as client has :(
//			sp->DK_AP_spell_bonus[0] = 0.055f * 1.15f;	//2.5 is a heck to get the same value as client has :(
		if( 
//			sp->Id == 45462 || //sp->NameHash == SPELL_HASH_PLAGUE_STRIKE || //or it will bug out for some other NPC ability
//			sp->NameHash == SPELL_HASH_RUNE_STRIKE ||
			sp->Id == 45902 || // sp->NameHash == SPELL_HASH_BLOOD_STRIKE || 
			sp->Id == 55050 || //sp->NameHash == SPELL_HASH_HEART_STRIKE ||
			sp->Id == 55090 || //sp->NameHash == SPELL_HASH_SCOURGE_STRIKE || 
			sp->NameHash == SPELL_HASH_DEATH_STRIKE ||
			sp->Id == 49143 || //sp->NameHash == SPELL_HASH_FROST_STRIKE || 
			sp->NameHash == SPELL_HASH_OBLITERATE
			)
		{
			if( sp->eff[0].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE )
			{
				sLog.outDebug("!!!!!!!!!!!!!!!!!!!!!!!! OUTDATED HACKFIX !!!!!!!!!!!!!! %u) %s",sp->Id, sp->Name);
				uint32 t;
				scanf("%u",&t);
			}
			ASSERT( sp->AttackPowerToSpellDamageCoeff == 0.0f );
//			sp->AP_spell_bonus_base[0] = 0.236f;
			sp->AttackPowerToSpellDamageCoeff = 0.236f;
		}
/*		if( 
			sp->NameHash == SPELL_HASH_BLOOD_CAKED_STRIKE 
			)
		{
			if( sp->eff[1].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE )
			{
				sLog.outDebug("!!!!!!!!!!!!!!!!!!!!!!!! OUTDATED HACKFIX !!!!!!!!!!!!!! %u) %s",sp->Id, sp->Name);
				uint32 t;
				scanf("%u",&t);
			}
			sp->DK_AP_spell_bonus[1] = 1.0f;
		}*/
//		if(	sp->NameHash == SPELL_HASH_HOWLING_BLAST )
//		{
//			sp->DK_AP_spell_bonus[0] = 0.20f;
//			sp->DK_AP_spell_bonus[1] = 0.20f;
//		}
//		else if(	sp->NameHash == SPELL_HASH_DEATH_COIL )
//		{
//			sp->DK_AP_spell_bonus[0] = 0.15f;
//			sp->DK_AP_spell_bonus[1] = 0.15f;
//		}
		else if(	sp->NameHash == SPELL_HASH_BLOOD_BOIL )
		{
			ASSERT( sp->AttackPowerToSpellDamageCoeff == 0.0f );
//			sp->AP_spell_bonus_base[0] = 0.06f;
			sp->AttackPowerToSpellDamageCoeff = 0.06f;
		}
//		else if(	sp->NameHash == SPELL_HASH_DEATH_AND_DECAY )
//			sp->DK_AP_spell_bonus[0] = 0.0475f;
		else if(	sp->NameHash == SPELL_HASH_ICY_TOUCH )
		{
			ASSERT( sp->AttackPowerToSpellDamageCoeff == 0.0f );
//			sp->AP_spell_bonus_base[0] = 0.10f;
			sp->AttackPowerToSpellDamageCoeff = 0.10f;
		}
		else if(	sp->NameHash == SPELL_HASH_UNHOLY_BLIGHT )
		{
			ASSERT( sp->AttackPowerToSpellDamageCoeff == 0.0f );
//			sp->AP_spell_bonus_base[0] = 0.013f;
			sp->AttackPowerToSpellDamageCoeff = 0.013f;
		}

		if(
			((sp->Attributes & ATTRIBUTES_TRIGGER_COOLDOWN) && (sp->AttributesEx & ATTRIBUTESEX_NOT_BREAK_STEALTH)) //rogue cold blood
			|| ((sp->Attributes & ATTRIBUTES_TRIGGER_COOLDOWN) && (!sp->AttributesEx || sp->AttributesEx & ATTRIBUTESEX_REMAIN_OOC))
			)
			sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;


		///	SPELLS CAN CRIT ///
//		sp->spell_can_crit = true; // - except in special cases noted in this section

		for( uint32 eff=0;eff<MAX_SPELL_EFFECT_COUNT;eff++)
		{
			sp->EffectCanCrit[eff] = true;
			if( sp->eff[eff].Effect == SPELL_EFFECT_HEAL_MAXHEALTH_PCT )
				sp->EffectCanCrit[eff] = false;
			if( sp->eff[eff].Effect == SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT )
				sp->EffectCanCrit[eff] = false;
			if( sp->eff[eff].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT )
				sp->EffectCanCrit[eff] = false;
			if( sp->eff[eff].EffectApplyAuraName == SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT )
				sp->EffectCanCrit[eff] = false;
			if( sp->eff[eff].EffectApplyAuraName == SPELL_AURA_PERIODIC_DAMAGE_PERCENT )
				sp->EffectCanCrit[eff] = false;
		}
		if( sp->NameHash == SPELL_HASH_LIGHTNING_SHIELD ) // not a mistake, the correct proc spell for lightning shield is also called lightning shield
//			sp->spell_can_crit = false;
			SetNoEffeCanCrit( sp );
/*
		if( sp->NameHash == SPELL_HASH_INSECT_SWARM ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_ENTANGLING_ROOTS ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_LACERATE ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_RIP ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_SERPENT_STING ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_EXPLOSIVE_TRAP ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_WYVERN_STING ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_PYROBLAST ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_IGNITE ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_FIREBALL ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_FROSTFIRE_BOLT ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_CONSECRATION ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_HOLY_FIRE ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_CURSE_OF_AGONY ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_SEED_OF_CORRUPTION ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_SHADOW_FLAME ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_BLOOD_PLAGUE ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_DEATH_AND_DECAY ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_FROST_FEVER ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_REND ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_RUPTURE ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_GARROTE ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_FLAME_SHOCK ) 
			sp->spell_DOT_can_crit = true;	//Instantly sears the target with fire, causing $s1 Fire damage immediately and $o2 Fire damage over $d. This periodic damage may critically strike and will occur more rapidly based on the caster's spell haste.
			*/
/*		else if( sp->NameHash == SPELL_HASH_SEAL_OF_VENGEANCE ) 
			sp->spell_DOT_can_crit = false;
		else if( sp->NameHash == SPELL_HASH_SEAL_OF_CORRUPTION ) 
			sp->spell_DOT_can_crit = false;*/

		if( sp->eff[0].EffectApplyAuraName == SPELL_AURA_MOUNTED )
		{
			//this should already be set, seems like some mounts are missing it and leads to speed stacking exploit
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_CAST_SPELL | AURA_INTERRUPT_ON_MOUNT;
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			sp->c_is_flags3 |= SPELL_FLAG3_IS_NOT_USING_HASTE;
			//mount summons instead of speed, just copy effect from somewhere else.
			//these are vehicles. Need to remove this hack later
	//		sp = dbcSpell.LookupEntryForced( 60424 ); //ex : Mekgineer's Chopper
			if( ( sp->eff[1].EffectApplyAuraName != SPELL_AURA_MOD_INCREASE_MOUNTED_SPEED && sp->eff[2].EffectApplyAuraName != SPELL_AURA_MOD_INCREASE_MOUNTED_SPEED && strstr( sp->Description, "This is") )
	//			sp->eff[1].Effect == 28 
				)
			{
				SpellEntry *sp2 = dbcSpell.LookupEntryForced( 23223 ); //Swift White Mechanostrider
				//if( sp2 )
				{
					SpellEntryEffectCopy(sp2,sp,1,1);//haste effect
					sp->eff[1].EffectBasePoints = 100; //hehe 1.5 horse power for fun :D
				}
			}
		}
		
		// THESE FIXES ARE GROUPED FOR CODE CLEANLINESS.
		
			/*
			// Concussive Shot, Distracting Shot, Silencing Shot - ranged spells
			if( sp->NameHash == SPELL_HASH_CONCUSSIVE_SHOT || sp->NameHash == SPELL_HASH_DISTRACTING_SHOT || sp->NameHash == SPELL_HASH_SILENCING_SHOT || sp->NameHash == SPELL_HASH_SCATTER_SHOT || sp->NameHash == SPELL_HASH_TRANQUILIZING_SHOT )
				sp->is_ranged_spell = true;

			// All stings - ranged spells
			if( sp->NameHash == SPELL_HASH_SERPENT_STING || sp->NameHash == SPELL_HASH_SCORPID_STING || sp->NameHash == SPELL_HASH_VIPER_STING || sp->NameHash == SPELL_HASH_WYVERN STING )
				sp->is_ranged_spell = true;
			*/
			// come to think of it... anything *castable* requiring a ranged weapon is a ranged spell -.-
			// Note that talents etc also come under this, however it does not matter
			// if they get flagged as ranged spells because is_ranged_spell is only used for
			// differentiating between resistable and physically avoidable spells.
//			if( sp->GetEquippedItemClass() == 2 && sp->GetEquippedItemSubClass() & 262156 ) // 4 + 8 + 262144 ( becomes item classes 2, 3 and 18 which correspond to bow, gun and crossbow respectively)
//				sp->is_ranged_spell = true;

		//////////////////////////////////////////
		// ROGUE								//
		//////////////////////////////////////////

		// Insert rogue spell fixes here
		if( sp->NameHash == SPELL_HASH_REMORSELESS_ATTACKS )
			sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;

		if( sp->NameHash == SPELL_HASH_UNFAIR_ADVANTAGE )
			sp->procFlags = PROC_ON_DODGE_VICTIM;


		//////////////////////////////////////////
		// PRIEST								//
		//////////////////////////////////////////
/*		// Insert priest spell fixes here
		// Mind Flay,reduces target's movement speed by 50%
		if ( sp->NameHash == SPELL_HASH_MIND_FLAY )
		{
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PERIODIC_DAMAGE;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->eff[0].Effect = SPELL_EFFECT_NULL;	//remove dummy effect
			sp->c_is_flags |= SPELL_FLAG_IS_DAMAGING;
		}*/

		if( sp->NameHash == SPELL_HASH_TIDAL_WAVES )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_CHAIN_HEAL;
			sp->ProcOnNameHash[1] = SPELL_HASH_RIPTIDE;
		}

		//Earthliving Weapon
		if( sp->NameHash == SPELL_HASH_EARTHLIVING_WEAPON__PASSIVE_)
			sp->procFlags = PROC_ON_HEAL;
		
		if( sp->NameHash == SPELL_HASH_CYCLONE || sp->NameHash == SPELL_HASH_HUNGERING_COLD || sp->NameHash == SPELL_HASH_RING_OF_FROST
			 || sp->NameHash == SPELL_HASH_DRAGON_S_BREATH || sp->NameHash == SPELL_HASH_POLYMORPH || sp->NameHash == SPELL_HASH_BLIND || sp->NameHash == SPELL_HASH_SAP
			 || sp->NameHash == SPELL_HASH_FREEZING_TRAP || sp->NameHash == SPELL_HASH_SCATTER_SHOT || sp->NameHash == SPELL_HASH_REPENTANCE
			 || sp->NameHash == SPELL_HASH_INTIMIDATING_SHOUT || sp->NameHash == SPELL_HASH_SEDUCTION || sp->NameHash == SPELL_HASH_GOUGE
			)
			sp->c_is_flags3 |= SPELL_FLAG3_IS_BLOCKING_BLINK;

//junk code to get me has :P 
//if( sp->Id==11267 || sp->Id==11289 || sp->Id==6409)
//	printf("!!!!!!! name %s , id %u , hash %u \n",sp->Name,sp->Id, namehash);
		float coef = 0.0f;
		for( uint32 t = 0;t< MAX_SPELL_EFFECT_COUNT; t++ )
		{
			sp->SpellPowerCoefAvg = MAX ( sp->SpellPowerCoefAvg, sp->eff[t].EffectSpellPowerCoef );
			if( sp->eff[t].EffectSpellPowerCoef == 0.0f )
				sp->eff[t].EffectSpellPowerCoef = SPELL_EFFECT_MAGIC_UNDECIDED_SPELL_POWER_COEFF;
			//sanity checks
			else if( sp->eff[t].EffectSpellPowerCoef < 0.0f )
				sp->eff[t].EffectSpellPowerCoef = 0.0f;
			else if( sp->eff[t].EffectSpellPowerCoef > 10.0f )
				sp->eff[t].EffectSpellPowerCoef = 1.0f;
			//!!!!!!!! big hack, remove me !!!
	//		if( sp->quick_tickcount > 1 )
	//			sp->eff[t].EffectSpellPowerCoef += 0.14f;	//almost all priest ticks needed this
		}
		if( sp->SpellPowerCoefAvg == 0 )
			sp->SpellPowerCoefAvg = 1.0f;
		else if( sp->SpellPowerCoefAvg < 0.0f )
			sp->SpellPowerCoefAvg = 0.0f;
		else if( sp->SpellPowerCoefAvg > 10.0f )
			sp->SpellPowerCoefAvg = 1.0f;

		sp->RemoveCasterAuraState = sp->GetCasterAuraState();
		if( sp->Id == 20271 ) //Judgement
			sp->RemoveCasterAuraState = 0;

		if( sp->MechanicsType == MECHANIC_ENRAGED )
			SafeSetAuraStateFlag( sp, AURASTATE_ENRAGE );
		else if( sp->MechanicsType == MECHANIC_BLEEDING )
			SafeSetAuraStateFlag( sp, AURASTATE_BLEED );
		if( ( sp->MechanicsType == MECHANIC_FROZEN ) || ( ( sp->SchoolMask & SCHOOL_MASK_FROST ) && HasAuraType( sp, SPELL_AURA_MOD_ROOT ) )|| sp->NameHash == SPELL_HASH_DEEP_FREEZE )
			SafeSetAuraStateFlag( sp, AURASTATE_FROZEN );
		if( //( sp->BGR_one_buff_on_target & SPELL_TYPE_SEAL ) || 
			sp->Id == 20165 || sp->Id == 20164 || sp->Id == 20154 || sp->Id == 20170 || sp->Id == 31801 )
			SafeSetAuraStateFlag( sp, AURASTATE_JUDGEMENT );
		if( sp->NameHash == SPELL_HASH_REJUVENATION || sp->NameHash == SPELL_HASH_REGROWTH )
			SafeSetAuraStateFlag( sp, AURASTATE_REJUVENATE );
		if( sp->NameHash == SPELL_HASH_IMMOLATE || sp->NameHash == SPELL_HASH_SHADOWFLAME )
			SafeSetAuraStateFlag( sp, AURASTATE_IMMOLATE);	
		//maybe poison aurastate should get triggered on other spells too ?
		if( sp->c_is_flags & SPELL_FLAG_IS_POISON )//deadly poison
			SafeSetAuraStateFlag( sp, AURASTATE_POISON);
		if( sp->Id == 82368 )
			SafeSetAuraStateFlag( sp, AURASTATE_LASTKILLWITHHONOR);
	}
#ifndef TEMP_DISABLE_SPELL_COEFS
	/////////////////////////////////////////////////////////////////
	//SPELL COEFFICIENT SETTINGS START
	//////////////////////////////////////////////////////////////////

	for(uint32 x=0; x < cnt; x++)
	{
		// get spellentry
		SpellEntry * sp = dbcSpell.LookupRow(x);

		for( uint8 i = 0 ; i < 3 ; i++ )
		{
			//Flag for DoT and HoT
			if( sp->eff[i].EffectApplyAuraName == SPELL_AURA_PERIODIC_DAMAGE )
				sp->spell_coef_flags |= SPELL_FLAG_IS_DOT_SPELL;
			if(	sp->eff[i].EffectApplyAuraName == SPELL_AURA_PERIODIC_HEAL )
				sp->spell_coef_flags |= SPELL_FLAG_IS_HOT_SPELL;
			if(	sp->eff[i].EffectApplyAuraName == SPELL_AURA_PERIODIC_LEECH )
				sp->spell_coef_flags |= SPELL_FLAG_IS_DOT_SPELL | SPELL_FLAG_IS_HOT_SPELL;

			//Flag for DD or DH
			if ( sp->eff[i].EffectApplyAuraName == SPELL_AURA_PERIODIC_TRIGGER_SPELL && sp->eff[i].EffectTriggerSpell )
			{
				SpellEntry * spz;
				spz = dbcSpell.LookupEntryForced( sp->eff[i].EffectTriggerSpell );
				if( spz )
				{	
					if(spz->eff[i].Effect == SPELL_EFFECT_SCHOOL_DAMAGE )
						sp->spell_coef_flags |= SPELL_FLAG_IS_DD_SPELL;
					if( spz->eff[i].Effect == SPELL_EFFECT_HEAL)
						sp->spell_coef_flags |= SPELL_FLAG_IS_DH_SPELL;
				}
			}
			if (sp->eff[i].Effect == SPELL_EFFECT_SCHOOL_DAMAGE )
				sp->spell_coef_flags |= SPELL_FLAG_IS_DD_SPELL;
			if (sp->eff[i].Effect == SPELL_EFFECT_HEAL)
				sp->spell_coef_flags |= SPELL_FLAG_IS_DH_SPELL;
		}

		for(uint8 i = 0 ; i < 3; i++)
		{
			switch (sp->eff[i].EffectImplicitTargetA)
			{
				//AoE
			case EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS:
			case EFF_TARGET_ALL_ENEMY_IN_AREA:
			case EFF_TARGET_ALL_ENEMY_IN_AREA_INSTANT:
			case EFF_TARGET_ALL_PARTY_AROUND_CASTER:
			case EFF_TARGET_ALL_ENEMIES_AROUND_CASTER:
			case EFF_TARGET_IN_FRONT_OF_CASTER:
			case EFF_TARGET_ALL_ENEMY_IN_AREA_CHANNELED:
			case EFF_TARGET_ALL_ENEMY_AT_ENEMY_IN_AREA_CHANNELED:
			case EFF_TARGET_ALL_FRIENDLY_IN_AREA:
			case EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME:
			case EFF_TARGET_ALL_PARTY:
			case EFF_TARGET_LOCATION_INFRONT_CASTER:
			case EFF_TARGET_BEHIND_TARGET_LOCATION:
			case EFF_TARGET_LOCATION_INFRONT_CASTER_AT_RANGE:
				{
					sp->spell_coef_flags |= SPELL_FLAG_AOE_SPELL;
					break;
				}
			}	
		}

		for(uint8 i = 0 ; i < 3 ; i++)
		{
			switch (sp->eff[i].EffectImplicitTargetB)
			{
				//AoE
			case EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS:
			case EFF_TARGET_ALL_ENEMY_IN_AREA:
			case EFF_TARGET_ALL_ENEMY_IN_AREA_INSTANT:
			case EFF_TARGET_ALL_PARTY_AROUND_CASTER:
			case EFF_TARGET_ALL_ENEMIES_AROUND_CASTER:
			case EFF_TARGET_IN_FRONT_OF_CASTER:
			case EFF_TARGET_ALL_ENEMY_IN_AREA_CHANNELED:
			case EFF_TARGET_ALL_ENEMY_AT_ENEMY_IN_AREA_CHANNELED:
			case EFF_TARGET_ALL_FRIENDLY_IN_AREA:
			case EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME:
			case EFF_TARGET_ALL_PARTY:
			case EFF_TARGET_LOCATION_INFRONT_CASTER:
			case EFF_TARGET_BEHIND_TARGET_LOCATION:
			case EFF_TARGET_LOCATION_INFRONT_CASTER_AT_RANGE:
				{
					sp->spell_coef_flags |= SPELL_FLAG_AOE_SPELL;
					break;
				}
			}	
		}

		//Special Cases
		//Holy Light & Flash of Light
		if(sp->NameHash == SPELL_HASH_HOLY_LIGHT ||	sp->NameHash == SPELL_HASH_FLASH_OF_LIGHT)
			sp->spell_coef_flags |= SPELL_FLAG_IS_DH_SPELL;

		//Additional Effect (not healing or damaging)
		for( uint8 i = 0 ; i < 3 ; i++ )
		{
			if( sp->eff[i].Effect == 0)
				continue;

			switch (sp->eff[i].Effect)
			{
			case SPELL_EFFECT_SCHOOL_DAMAGE:
			case SPELL_EFFECT_ENVIRONMENTAL_DAMAGE:
			case SPELL_EFFECT_HEALTH_LEECH:
			case SPELL_EFFECT_WEAPON_DAMAGE_NOSCHOOL:
			case SPELL_EFFECT_ADD_EXTRA_ATTACKS:
			case SPELL_EFFECT_WEAPON_PERCENT_DAMAGE:
			case SPELL_EFFECT_POWER_BURN:
			case SPELL_EFFECT_ATTACK:
			case SPELL_EFFECT_HEAL:
//			case SPELL_EFFECT_HEALTH_FUNNEL:
			case SPELL_EFFECT_HEAL_MAX_HEALTH:
			case SPELL_EFFECT_DUMMY:
				continue;
			}

			switch (sp->eff[i].EffectApplyAuraName)
			{
			case SPELL_AURA_PERIODIC_DAMAGE:
			case SPELL_AURA_PROC_TRIGGER_DAMAGE:
			case SPELL_AURA_PERIODIC_DAMAGE_PERCENT:
			case SPELL_AURA_POWER_BURN:
			case SPELL_AURA_PERIODIC_HEAL:
			case SPELL_AURA_MOD_INCREASE_HEALTH:
			case SPELL_AURA_PERIODIC_HEALTH_FUNNEL:
			case SPELL_AURA_DUMMY:
				continue;
			}

			sp->spell_coef_flags |= SPELL_FLAG_ADITIONAL_EFFECT;
			break;

		}

		//Calculating fixed coeficients
		//Channeled spells
		if( sp->ChannelInterruptFlags != 0 )
		{
			float Duration = float( GetDuration( dbcSpellDuration.LookupEntry( sp->DurationIndex ) ));
//			if(Duration < 1500) Duration = 1500;
//			else if(Duration > 7000) Duration = 7000;
			sp->fixed_hotdotcoef = (Duration / 3500.0f);		//according to wiki
//			sp->fixed_hotdotcoef = (Duration / 1500.0f);		//not correct but spells were dealing low dmg compared to blizz
			if( sp->spell_coef_flags & (SPELL_FLAG_IS_HOT_SPELL|SPELL_FLAG_IS_DH_SPELL) )
				sp->fixed_hotdotcoef *= 1.8f;
			sp->fixed_dddhcoef = sp->fixed_hotdotcoef;
			if( sp->spell_coef_flags & SPELL_FLAG_AOE_SPELL )
			{
				sp->fixed_dddhcoef *= 0.5f;
				sp->fixed_hotdotcoef *= 0.5f;
			}		

			//!!make so triggered spell inherits the bonus coeffs
			SpellEntry *sp2;
			sp2 = dbcSpell.LookupEntryForced( sp->eff[0].EffectTriggerSpell );
			if( sp2 && ( sp2->CastingTimeIndex <= 1 || sp2->CastingTimeIndex == 200 || sp2->CastingTimeIndex == 205 ) )
			{
				sp2->fixed_hotdotcoef = sp->fixed_hotdotcoef / sp->quick_tickcount;
				sp2->fixed_dddhcoef = sp->fixed_dddhcoef / sp->quick_tickcount;
			}
			sp2 = dbcSpell.LookupEntryForced( sp->eff[1].EffectTriggerSpell );
			if( sp2 && ( sp2->CastingTimeIndex <= 1 || sp2->CastingTimeIndex == 200 || sp2->CastingTimeIndex == 205 ) )
			{
				sp2->fixed_hotdotcoef = sp->fixed_hotdotcoef / sp->quick_tickcount;
				sp2->fixed_dddhcoef = sp->fixed_dddhcoef / sp->quick_tickcount;
			}
			sp2 = dbcSpell.LookupEntryForced( sp->eff[2].EffectTriggerSpell );
			if( sp2 && ( sp2->CastingTimeIndex <= 1 || sp2->CastingTimeIndex == 200 || sp2->CastingTimeIndex == 205 ) )
			{
				sp2->fixed_hotdotcoef = sp->fixed_hotdotcoef / sp->quick_tickcount;
				sp2->fixed_dddhcoef = sp->fixed_dddhcoef / sp->quick_tickcount;
			}

			if( sp->spell_coef_flags & SPELL_FLAG_ADITIONAL_EFFECT )
				sp->fixed_hotdotcoef *= 0.95f;
			if( sp->spell_coef_flags & SPELL_FLAG_AOE_SPELL )
				sp->fixed_hotdotcoef *= 0.5f;
		}
		//spells that are triggered by channeling spells will have something else then 0
		if( sp->fixed_dddhcoef == -1.0f )
		{
			//Setting Cast Time Coefficient
			float casttime_coef = 0;
			SpellCastTime *sd = dbcSpellCastTime.LookupEntry(sp->CastingTimeIndex);
			float castaff = float(GetCastTime(sd));
			//335 system that worked well :(
/*			{
				if(castaff < 1500) 
					castaff = 1500;
				else if(castaff > 7000) 
					castaff = 7000;

#define MAGIC_CASTIME_DIVIDER 2500.0f
				casttime_coef = castaff / MAGIC_CASTIME_DIVIDER;	
			}*/
			//403 there is no downranking, somewhere else is the formula provided !
			//403 system that is far from finished
			{
				if( castaff < 750 )
					castaff = 750;	//instant cast spells 
				else if(castaff > 1500 ) 
					castaff = 1500;	//anything else is just 1 
#define MAGIC_CASTIME_DIVIDER 1500.0f
				casttime_coef = castaff / MAGIC_CASTIME_DIVIDER;
			}
			if( sp->spell_coef_flags & SPELL_FLAG_IS_DH_SPELL )
				casttime_coef *= 1.88f;
			//direct spell coefficients
			sp->fixed_dddhcoef = casttime_coef;

			//Standard spells - DOWNRANKING !
	/*		else if( (sp->spell_coef_flags & SPELL_FLAG_IS_DD_OR_DH_SPELL) && !(sp->spell_coef_flags & SPELL_FLAG_IS_DOT_OR_HOT_SPELL) )
			{
				sp->fixed_dddhcoef = sp->casttime_coef;
				if( sp->spell_coef_flags & SPELL_FLAG_ADITIONAL_EFFECT )
					sp->fixed_dddhcoef *= 0.95f;
				if( sp->spell_coef_flags & SPELL_FLAG_AOE_SPELL )
					sp->fixed_dddhcoef *= 0.5f;
			}*/

			//Over-time spells
			//if(sp->spell_coef_flags & SPELL_FLAG_IS_DD_OR_DH_SPELL) == 0 ) //not a DD spell. But we do not care since we make the test live
			{
				if( sp->spell_coef_flags & ( SPELL_FLAG_IS_DOT_SPELL | SPELL_FLAG_IS_HOT_SPELL ) ) 
				{
					float Duration = float( GetDuration( dbcSpellDuration.LookupEntry( sp->DurationIndex ) ));
					sp->fixed_hotdotcoef = (Duration / 15000.0f);

					if( sp->spell_coef_flags & SPELL_FLAG_ADITIONAL_EFFECT )
						sp->fixed_hotdotcoef *= 0.95f;
				}
				//healing spells get extra bonus
				if( sp->spell_coef_flags & SPELL_FLAG_IS_HOT_SPELL )
					sp->fixed_hotdotcoef *= 1.8f;
			}
			//Combined standard and over-time spells
			if( (sp->spell_coef_flags & ( SPELL_FLAG_IS_DOT_SPELL | SPELL_FLAG_IS_HOT_SPELL ))
				&&
				(sp->spell_coef_flags & ( SPELL_FLAG_IS_DD_SPELL | SPELL_FLAG_IS_DH_SPELL ))
				)
			{
	//			float Portion_to_Over_Time = (Duration / 15000.0f) / ((Duration / 15000.0f) + sp->casttime_coef );
	//			float Portion_to_Standard = 1.0f - Portion_to_Over_Time;
	//			sp->fixed_dddhcoef = casttime_coef * Portion_to_Standard;
	//			sp->fixed_hotdotcoef = (Duration / 15000.0f) * Portion_to_Over_Time;
				//according to wowwiki
				//x = Duration / 15
				//y = Cast Time / 3.5
				//CDoT = x2 / (x + y)
				//CDD = y2 / (x + y)
				//!!!! atm code will use DOT coeff for mixed spells !!!
				float Duration = float( GetDuration( dbcSpellDuration.LookupEntry( sp->DurationIndex ) ));
				float CastTime = float(GetCastTime(sd));
				if(CastTime < 1500) 
					CastTime = 1500;
				else if(CastTime > 7000) 
					CastTime = 7000;
				float x = Duration / 15000.0f;
				float y = CastTime / MAGIC_CASTIME_DIVIDER;
				sp->fixed_dddhcoef = y * y / (x + y );
				sp->fixed_hotdotcoef = x * x / ( x + y );

				if( sp->spell_coef_flags & SPELL_FLAG_ADITIONAL_EFFECT )
				{
					sp->fixed_dddhcoef *= 0.95f;
					sp->fixed_hotdotcoef *= 0.95f;
				}
			}
			if( sp->spell_coef_flags & SPELL_FLAG_AOE_SPELL )
			{
				sp->fixed_dddhcoef *= 0.5f;
				sp->fixed_hotdotcoef *= 0.5f;
			}		
		}
		///////////////
		// !!! big HAX to make spells blizzlike. I bet there is a good explanation for this !!!
		///////////////
/*		if( sp->spell_coef_flags & ( SPELL_FLAG_IS_HEALING | SPELL_FLAG_IS_HOT_SPELL | SPELL_FLAG_IS_HEAL_OVER_TIME ) ) 
		{
			sp->fixed_dddhcoef += 0.2f;
			sp->fixed_hotdotcoef += 0.2f;
		} */
		//////////////////////////////////////////
		// SHAMAN								//
		//////////////////////////////////////////

		// Insert shaman spell fixes here

		// Frostbrand Weapon - 10% spd coefficient
		if( sp->NameHash == SPELL_HASH_FROSTBRAND_ATTACK )
			sp->fixed_dddhcoef = 0.1f;

		// Fire Nova - 0% spd coefficient
		if( sp->NameHash == SPELL_HASH_FIRE_NOVA )
			sp->fixed_dddhcoef = 0.0f;

		// Searing Totem - 8% spd coefficient
		if( sp->NameHash == SPELL_HASH_ATTACK )
			sp->fixed_dddhcoef = 0.08f;

		// Healing Stream Totem - 8% healing coefficient
		if( sp->NameHash == SPELL_HASH_HEALING_STREAM )
			sp->fixed_hotdotcoef = 0.08f;
		else if( sp->NameHash == SPELL_HASH_MIND_FLAY )
			sp->fixed_hotdotcoef = 0.30f * sp->quick_tickcount;	//cause it is based on dot and not total
		else if( sp->NameHash == SPELL_HASH_DEVOURING_PLAGUE )
			sp->fixed_hotdotcoef = 0.20f * sp->quick_tickcount;	//cause it is based on dot and not total

	}

	//Settings for special cases
	QueryResult * resultx = WorldDatabase.Query("SELECT * FROM spell_coef_override");
	if( resultx != NULL )
	{
		do 
		{
			Field * f;
			f = resultx->Fetch();
			SpellEntry * sp = dbcSpell.LookupEntryForced( f[0].GetUInt32() );
			if( sp != NULL )
			{
				sp->fixed_dddhcoef = f[2].GetFloat();
				sp->fixed_hotdotcoef = f[3].GetFloat();
			}
			else
				Log.Warning("SpellCoefOverride", "Has nonexistant spell %u.", f[0].GetUInt32());
		} while( resultx->NextRow() );
		delete resultx;
		resultx = NULL;
	}

	//Fully loaded coefficients, we must share channeled coefficient to its triggered spells
/*	for(uint32 x=0; x < cnt; x++)
	{
		// get spellentry
		SpellEntry * sp = dbcSpell.LookupRow(x);
		SpellEntry * spz;

		//Case SPELL_AURA_PERIODIC_TRIGGER_SPELL
		for( uint8 i = 0 ; i < 3 ; i++ )
		{
			if ( sp->eff[i].EffectApplyAuraName == SPELL_AURA_PERIODIC_TRIGGER_SPELL )
			{
				spz = dbcSpell.LookupEntryForced( sp->eff[i].EffectTriggerSpell );
				if( spz != NULL ) 
				{
					//we must set bonus per tick on triggered spells now (i.e. Arcane Missiles)
					if( sp->ChannelInterruptFlags != 0 )
					{
						float Duration = float( GetDuration( dbcSpellDuration.LookupEntry( sp->DurationIndex ) ));
						float amp = float(sp->EffectAmplitude[i]);
						sp->fixed_dddhcoef = sp->fixed_hotdotcoef * amp / Duration;
					}			
					spz->fixed_dddhcoef = sp->fixed_dddhcoef;
					//we must set bonus per tick on triggered spells now (i.e. Arcane Missiles)
					if( sp->ChannelInterruptFlags != 0 )
					{
						float Duration = float( GetDuration( dbcSpellDuration.LookupEntry( sp->DurationIndex ) ));
						float amp = float(sp->EffectAmplitude[i]);
						sp->fixed_hotdotcoef *= amp / Duration;
					}
					spz->fixed_hotdotcoef = sp->fixed_hotdotcoef;
					break;
				}
			}
		}
	}	*/
#endif
#ifndef TEMP_DISABLE_SPELL_COEFS
	//		else if( namehash == SPELL_HASH_ARCANE_SHOT )		
//			sp->c_is_flags |= SPELL_FLAG_IS_NOT_USING_DMG_BONUS;
		else if( namehash == SPELL_HASH_SERPENT_STING )	
		{
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_USING_DMG_BONUS;
			sp->fixed_dddhcoef = 0.0000000001f;
			sp->fixed_hotdotcoef = 0.0000000001f;
		}
		//Spells Not affected by Bonus Healing
		if(sp->NameHash == SPELL_HASH_LESSER_HEROISM) //Lesser Heroism
		{
			sp->fixed_dddhcoef = 0.0f;
			sp->Spell_value_is_scripted = true;
		}
		else if(sp->NameHash == SPELL_HASH_HEROISM) //Heroism, a.k.a. Darkmoon Card: Heroism
			sp->fixed_dddhcoef = 0.0f;
		else if(sp->NameHash == SPELL_HASH_CITRINE_PENDANT_OF_GOLDEN_HEALING) //Citrine Pendant of Golden Healing
			sp->fixed_dddhcoef = 0.0f;
		else if(sp->NameHash == SPELL_HASH_LIVING_RUBY_PENDANT) //Living Ruby Pendant
			sp->fixed_dddhcoef = 0.0f;
		else if(sp->NameHash == SPELL_HASH_EARTH_SHIELD) //Earth Shield
			sp->fixed_dddhcoef = 0.15f;		//says wowwiki
		else if(sp->NameHash == SPELL_HASH_HOLY_NOVA)
			sp->fixed_dddhcoef = 0.20f;
		else if(sp->NameHash == SPELL_HASH_VAMPIRIC_EMBRACE)
			sp->fixed_dddhcoef = 0.0f;
//		else if(sp->NameHash == SPELL_HASH_STARFALL)
//			sp->fixed_dddhcoef = 0.20f;
	if( strstr( sp->Name, "Ignite")
			sp->fixed_dddhcoef = 0.00001f;
			sp->fixed_hotdotcoef = 0.00001f;
			SpellEntry *sp2 = dbcSpell.LookupEntryForced( 12654 );
			SetSpellPowerCoeffsAll( sp2, 0.0001f);
SetSpellPowerCoeffsAll( sp, 0.0f);
#endif

	/////////////////////////////////////////////////////////////////
	//SPELL COEFFICIENT SETTINGS END
	/////////////////////////////////////////////////////////////////
	SpellEntry *sp,*sp2,*sp3;

	EnchantEntry* Enchantment;

	// Flametongue totem
	Enchantment = dbcEnchant.LookupEntryForced( 124 );
	if( Enchantment != NULL )
	{
		Enchantment->type[0] = 1;
		Enchantment->spell[0] = 8253;
	}
	Enchantment = dbcEnchant.LookupEntryForced( 285 );
	if( Enchantment != NULL )
	{
		Enchantment->type[0] = 1;
		Enchantment->spell[0] = 8248;
	}
	Enchantment = dbcEnchant.LookupEntryForced( 543 );
	if( Enchantment != NULL )
	{
		Enchantment->type[0] = 1;
		Enchantment->spell[0] = 10523;
	}
	Enchantment = dbcEnchant.LookupEntryForced( 1683 );
	if( Enchantment != NULL )
	{
		Enchantment->type[0] = 1;
		Enchantment->spell[0] = 16389;
	}
	Enchantment = dbcEnchant.LookupEntryForced( 2637 );
	if( Enchantment != NULL )
	{
		Enchantment->type[0] = 1;
		Enchantment->spell[0] = 25555;
	}

	//Hurricane 
	sp = dbcSpell.LookupEntryForced( 74221 );
	//if( sp != NULL )
		sp->maxstack = 2;
	//Landslide 
	sp = dbcSpell.LookupEntryForced( 74245 );
	//if( sp != NULL )
		sp->maxstack = 2;
	//weapon chain - Disarm Duration Reduction 
	sp = dbcSpell.LookupEntryForced( 43588 );
	//if( sp != NULL )
	{
		DynamicCreateAssignSpellStackGroup( sp, 0, "Weapon Chain" );
		sp->maxstack = 1;
	}
	/********************************************************
	 * Windfury Enchantment
	 ********************************************************/
	sp = dbcSpell.LookupEntryForced( 33757 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_MELEE_ATTACK; //we do not need proc on spell ;)
//		sp->eff[0].EffectTriggerSpell = 25504; //main hand
		sp->eff[0].EffectTriggerSpell = 33750; //offhand
		sp->procChance = 20;
		sp->proc_interval = 8000;//http://www.wowwiki.com/Windfury_Weapon
		sp->maxstack = 1;
	}
		
/*	Enchantment = dbcEnchant.LookupEntryForced( 283 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; //this is actually good
	Enchantment = dbcEnchant.LookupEntryForced( 284 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; 
	Enchantment = dbcEnchant.LookupEntryForced( 525 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; 
	Enchantment = dbcEnchant.LookupEntryForced( 1669 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; 
	Enchantment = dbcEnchant.LookupEntryForced( 2636 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; 
	Enchantment = dbcEnchant.LookupEntryForced( 3785 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; 
	Enchantment = dbcEnchant.LookupEntryForced( 3786 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; 
	Enchantment = dbcEnchant.LookupEntryForced( 3787 );
	if( Enchantment != NULL )
		Enchantment->spell[0] = 33757; */

	/**********************************************************
	 *	PROFFESION - Enchant Cloak - Major Resistance
	 **********************************************************/
	sp = dbcSpell.LookupEntryForced( 27962 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = 2998;
	sp = dbcSpell.LookupEntryForced( 36285 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = 2998;

	/**********************************************************
	 *	Wand Shoot
	 **********************************************************/
//	sp = dbcSpell.LookupEntryForced( 5019 );
//	//if( sp != NULL )
		//sp->GetSpellGroupType()[0] = 134217728;

	/**********************************************************
	* Mana Tap - BLOOD ELF RACIAL
	**********************************************************/
	sp = dbcSpell.LookupEntryForced( 28734 );
	//if( sp != NULL )
//		sp->eff[0].Effect = SPELL_EFFECT_POWER_BURN; // should be Power Burn, not Power Drain. Power Drain leeches mana which is incorrect.
		//Zazk : tested on retail and it is only leech and not burn !
		sp->eff[0].Effect = SPELL_EFFECT_POWER_DRAIN; // should be Power Burn, not Power Drain. Power Drain leeches mana which is incorrect.

	//leather specialization only kicks in while wearing leather
	//Leather Specialization
#define SPECIALIZATION_REFRESH_INTERVAL 30*1000
	sp = dbcSpell.LookupEntryForced( 86092 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValue = STAT_AGILITY;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_LEATHER;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86104 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValue = STAT_INTELLECT;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_LEATHER;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
		sp->RequiredShapeShift = (1 << (FORM_CUSTOM_NORMAL-1));
	}
	sp = dbcSpell.LookupEntryForced( 86097 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValue = STAT_AGILITY;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_LEATHER;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
		sp->RequiredShapeShift = (1 << (FORM_CAT-1));
	}
	sp = dbcSpell.LookupEntryForced( 86096 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValue = STAT_STAMINA;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_LEATHER;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
		sp->RequiredShapeShift = (1 << (FORM_BEAR-1));
	}
	//Mail Specialization
	sp = dbcSpell.LookupEntryForced( 86538 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_MAIL;
		sp->eff[0].EffectMiscValue = STAT_AGILITY;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86099 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_MAIL;
		sp->eff[0].EffectMiscValue = STAT_AGILITY;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86100 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_MAIL;
		sp->eff[0].EffectMiscValue = STAT_INTELLECT;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86108 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_MAIL;
		sp->eff[0].EffectMiscValue = STAT_INTELLECT;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	//Plate Specialization
	sp = dbcSpell.LookupEntryForced( 86537 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STAMINA;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86536 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STRENGTH;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86113 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STRENGTH;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86103 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_INTELLECT;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86539 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STRENGTH;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86102 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STAMINA;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86101 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STRENGTH;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	sp = dbcSpell.LookupEntryForced( 86110 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STRENGTH;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}	
	sp = dbcSpell.LookupEntryForced( 86535 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectMiscValueB = ITEM_SUBCLASS_ARMOR_PLATE_MAIL;
		sp->eff[0].EffectMiscValue = STAT_STAMINA;
		sp->eff[0].EffectAmplitude = SPECIALIZATION_REFRESH_INTERVAL;	//update every minute?
	}
	//cloth
	sp = dbcSpell.LookupEntryForced( 89744 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = STAT_INTELLECT;
	sp = dbcSpell.LookupEntryForced( 89745 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = STAT_INTELLECT;
	sp = dbcSpell.LookupEntryForced( 86091 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = STAT_INTELLECT;

	/**********************************************************
	 * thrown - add a 1.6 second cooldown
	 **********************************************************/
	const static uint32 thrown_spells[] = {SPELL_RANGED_GENERAL,SPELL_RANGED_THROW,SPELL_RANGED_WAND, 26679, 29436, 37074, 41182, 41346, 0};
	for(i = 0; thrown_spells[i] != 0; ++i)
	{
		sp = dbcSpell.LookupEntryForced( thrown_spells[i] );
		//if( sp != NULL && sp->RecoveryTime==0 && sp->StartRecoveryTime == 0 )
			sp->RecoveryTime = 1600;
		sp->AttributesExB &= ~( FLAGS3_REQ_BEHIND_TARGET );	//throw had this buget in 3.2
	}

	/**********************************************************
	 * Wands
	 **********************************************************/
/*	sp = dbcSpell.LookupEntryForced( SPELL_RANGED_WAND );
	//if( sp != NULL )
		sp->GetSpellDMGType() = SPELL_DMG_TYPE_RANGED;
		*/

	/**********************************************************
	 * Misc stuff (questfixes etc)
	 **********************************************************/

	sp = dbcSpell.LookupEntryForced( 1 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
		sp->eff[0].EffectImplicitTargetA = sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[2].EffectImplicitTargetA = sp->eff[2].EffectImplicitTargetB = EFF_TARGET_NONE;
	}

	sp = dbcSpell.LookupEntryForced( 30877 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetB=0;
	}

	sp = dbcSpell.LookupEntryForced(23179);
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = 1434;

	// list of guardians that should inherit casters level
	//fire elemental
	sp = dbcSpell.LookupEntryForced(32982); 
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_INHERITING_LEVEL;
	//Earth elemental
	sp = dbcSpell.LookupEntryForced(33663); 
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_INHERITING_LEVEL;

	//Storm, Earth and Fire
	//Earth's Grasp
	sp = dbcSpell.LookupEntryForced(51483); 
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 64695;
		sp->ProcOnNameHash[0] = SPELL_HASH_EARTHBIND_TOTEM;
		sp->procChance = sp->eff[1].EffectBasePoints + 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced(51485); 
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 64695;
		sp->ProcOnNameHash[0] = SPELL_HASH_EARTHBIND_TOTEM;
		sp->procChance = sp->eff[1].EffectBasePoints + 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 64695 );
	//if(sp != NULL)
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
/*	sp = dbcSpell.LookupEntryForced(51486); 
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 64695;
		sp->ProcOnNameHash[0] = SPELL_HASH_EARTHBIND_TOTEM;
		sp->procChance = sp->eff[1].EffectBasePoints + 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}*/

	//////////////////////////////////////////////////////
	// CLASS-SPECIFIC SPELL FIXES						//
	//////////////////////////////////////////////////////


	//////////////////////////////////////////
	// MAGE								//
	//////////////////////////////////////////

	//Molten Armor
	sp = dbcSpell.LookupEntryForced( 30482 );
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM | PROC_ON_SPELL_HIT_VICTIM_NOT_DOT;

	//Scorch - for firestarter
	sp = dbcSpell.LookupEntryForced( 2948 );
	//if(sp != NULL)
		sp->c_is_flags3 |= SPELL_FLAG3_IS_PROPERLY_IMPLEMENTED_CANCEL;

	//Blink
	sp = dbcSpell.LookupEntryForced( 1953 );
	//if( sp != NULL )
		SpellEntryEffectSwap(sp,sp,0,2);	//first remove roots then try to jump. Note that not all roots will be removed. If some remain we will refuse to jump

	//Time Warp
	sp = dbcSpell.LookupEntryForced( 80353 );
	sp2 = dbcSpell.LookupEntryForced( 80354 ); //Temporal Displacement
	//if( sp != NULL )
	{
		sp->chained_cast = sp2;
		sp2->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
		sp2->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
	}

	// Counterspell
	sp = dbcSpell.LookupEntryForced( 2139 );
		sp->FacingCasterFlags = 0;
	// Slow Fall
	sp = dbcSpell.LookupEntryForced( 130 );
		sp->FacingCasterFlags = 0;
	// Spellsteal
	sp = dbcSpell.LookupEntryForced( 30449 );
		sp->FacingCasterFlags = 0;
	// Remove Curse
	sp = dbcSpell.LookupEntryForced( 475 );
		sp->FacingCasterFlags = 0; 
	//living bomb
	sp = dbcSpell.LookupEntryForced( 44457 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Polymorph
	sp = dbcSpell.LookupEntryForced( 118 );
		sp->FacingCasterFlags = 0;
	// Polymorph
	sp = dbcSpell.LookupEntryForced( 61305 );
		sp->FacingCasterFlags = 0;
	// Polymorph
	sp = dbcSpell.LookupEntryForced( 28272 );
		sp->FacingCasterFlags = 0;
	// Polymorph
	sp = dbcSpell.LookupEntryForced( 28271 );
		sp->FacingCasterFlags = 0;
		
			
	// Dragon's Breath
	sp = dbcSpell.LookupEntryForced( 31661 );
	//if(sp != NULL)
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;

	// Pyromaniac
	sp = dbcSpell.LookupEntryForced( 34293 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83582;	
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->proc_interval = 35000;
	}
	sp = dbcSpell.LookupEntryForced( 34295 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83582;	
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->proc_interval = 35000;
	}
	sp = dbcSpell.LookupEntryForced( 34296 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83582;	
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->proc_interval = 35000;
	}
	sp = dbcSpell.LookupEntryForced( 83582 );
	//if(sp != NULL)
		sp->DurationIndex = 1;	//10 seconds is the length of Pyroblast. Make sure we do not fuck it up too hard in case remove condition fails
	// Improved Flamestrike
	sp = dbcSpell.LookupEntryForced( 84673 );
	//if(sp != NULL)
	{
//		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//		sp->eff[0].EffectTriggerSpell = 84674;	//self proc, we are scripting it
//		sp->ProcOnNameHash[0] = SPELL_HASH_BLAST_WAVE;
//		sp->procFlags = PROC_ON_CAST_SPELL;

		sp->procChance = 50;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	//we need to catch this event properly
	}
	sp = dbcSpell.LookupEntryForced( 84674 );
	//if(sp != NULL)
	{
//		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//		sp->eff[0].EffectTriggerSpell = 84674;	//self proc, we are scripting it
//		sp->ProcOnNameHash[0] = SPELL_HASH_BLAST_WAVE;
//		sp->procFlags = PROC_ON_CAST_SPELL;

		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS; //we need to catch this event properly
	}

	// Cone of Cold
	sp = dbcSpell.LookupEntryForced( 120 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectRadiusIndex = 32;	//12 yards
		sp->eff[0].EffectRadiusMaxIndex = 32;	//12 yards
		sp->eff[1].EffectRadiusIndex = 32;	//12 yards
		sp->eff[1].EffectRadiusMaxIndex = 32;	//12 yards
		sp->eff[2].EffectRadiusIndex = 32;	//12 yards
		sp->eff[2].EffectRadiusMaxIndex = 32;	//12 yards
	}
	// Combustion
	sp = dbcSpell.LookupEntryForced( 11129 );
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83853;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp = dbcSpell.LookupEntryForced( 83853 );
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		sp->Spell_value_is_scripted = true;
	}

	// Cast spell Hypothermia for Ice Block
	sp = dbcSpell.LookupEntryForced( 45438 );
	//if(sp != NULL)
	{
		sp->chained_cast = dbcSpell.LookupEntryForced(41425);
		sp->sar.excludeCasterAuraSpell = 41425;
	}

	//Frost Nova
	sp = dbcSpell.LookupEntryForced( 122 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectRadiusIndex = 13; // 10 yards ? before it had 2 yards
		sp->eff[1].EffectRadiusIndex = 13; // 10 yards ? before it had 2 yards
		sp->eff[2].EffectRadiusIndex = 13; // 10 yards ? before it had 2 yards
//		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		sp->c_is_flags3 |= SPELL_FLAG3_IS_NEEDING_LOS_CHECK;
	}

	//Nether Vortex
	sp = dbcSpell.LookupEntryForced(86181);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 31589; 
		sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_BLAST;
		sp->procFlags = PROC_ON_CAST_SPELL; 
	}
	sp = dbcSpell.LookupEntryForced(86209);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 31589; 
		sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_BLAST;
		sp->procFlags = PROC_ON_CAST_SPELL; 
	}
	//ignite
	sp = dbcSpell.LookupEntryForced(11119);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA; //aura
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; //force him to use procspell effect
		sp->eff[0].EffectTriggerSpell = 12654; //evil , but this is good for us :D
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_NO_DOT; //add procflag here since this was not processed with the others !
	}
	sp = dbcSpell.LookupEntryForced(11120);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA; //aura
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; //force him to use procspell effect
		sp->eff[0].EffectTriggerSpell = 12654; //evil , but this is good for us :D
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_NO_DOT; //add procflag here since this was not processed with the others !
	}
	sp = dbcSpell.LookupEntryForced(12846);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA; //aura
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; //force him to use procspell effect
		sp->eff[0].EffectTriggerSpell = 12654; //evil , but this is good for us :D
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_NO_DOT; //add procflag here since this was not processed with the others !
	}
	sp = dbcSpell.LookupEntryForced(12654);
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		sp->Spell_value_is_scripted = true;
		SetNoEffeCanCrit( sp );
	}

	// Flame Orb
	sp = dbcSpell.LookupEntryForced(82731);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 84765;
	}
	//
	sp = dbcSpell.LookupEntryForced(82690);	//this triggers dmg spell periodically
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;	//we will script this anyway
		sp->eff[0].EffectAmplitude = 1000;	//description says it should be 1000 and not 500
		sp->eff[0].EffectTriggerSpell = 55927;
//		sp->DurationIndex = 3;	//limit it to 1 minute ? default is infinit durtion
//		sp->maxtargets = 1;
	}
	sp = dbcSpell.LookupEntryForced(55927);	//this triggers dmg spell periodically
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->rangeIndex = 4;
	}

	// Frostfire Orb
	sp = dbcSpell.LookupEntryForced( 84726 );
	//if(sp != NULL)
	{
		sp->eff[1].EffectMiscValue = 82731; //replace Flame Orb
		sp->chained_cast = dbcSpell.LookupEntryForced( 92294 ); //visual replace client side
	}
	sp = dbcSpell.LookupEntryForced( 84727 );
	//if(sp != NULL)
	{
		sp->chained_cast = dbcSpell.LookupEntryForced( 92294 ); //visual replace client side
		sp->eff[1].EffectMiscValue = 82731; //replace Flame Orb
	}
	sp = dbcSpell.LookupEntryForced(92283);	//the actual frostfire spell client will be sending us to cast
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 84714;
	}

	// Cauterize
	sp = dbcSpell.LookupEntryForced(86948);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87023;
		sp->procChance = sp->eff[0].EffectBasePoints + 1;
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//blizz doesn't know shit
		sp->proc_interval = 60000;
	}
	sp = dbcSpell.LookupEntryForced(86949);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87023;
		sp->procChance = sp->eff[0].EffectBasePoints + 1;
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//blizz doesn't know shit
		sp->proc_interval = 60000;
	}
	sp = dbcSpell.LookupEntryForced( 87023 );
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		sp->Spell_value_is_scripted = true;
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_INVINCIBLE;
	}

	// Firestarter
	sp = dbcSpell.LookupEntryForced( 86914 );
	//if(sp != NULL)
	{
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE; //not sure if already there, just double checking
		sp->eff[0].EffectMiscValue = SPELL_HASH_SCORCH;
	}

/*	// Firestarter
	sp = dbcSpell.LookupEntryForced(54741);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 55080;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLAST_WAVE;
		sp->ProcOnNameHash[1] = SPELL_HASH_DRAGON_S_BREATH;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}*/

	//Ring of Frost
	sp = dbcSpell.LookupEntryForced(82676);
	//if(sp != NULL)
		sp->ChannelInterruptFlags = 0;	//this is not a channeled spell
	sp = dbcSpell.LookupEntryForced(82691);
	//if(sp != NULL)
	{
//		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMIES_AROUND_CASTER;
//		sp->eff[0].EffectRadiusIndex = 13; //this might be already correct
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		sp->RecoveryTime = 2*60000;	
		sp->AttributesExC |= FLAGS4_PLAYER_RANGED_SPELLS;	//send cooldown update to client
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	//Arcane Brilliance
	sp = dbcSpell.LookupEntryForced(1459);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79058;	//this is used as damage
	}
	sp = dbcSpell.LookupEntryForced(79058);
	//if(sp != NULL)
		sp->eff[0].EffectMiscValue = POWER_TYPE_MANA;	//mod max mana only

	//arcane missiles
	sp = dbcSpell.LookupEntryForced(79684);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;	
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced(79683);//the proc is just a visual icon that player can cast arcane missile for N seconds
	//if(sp != NULL)
	{
		sp->chained_cast = dbcSpell.LookupEntryForced(79808);	//this will let the player actually cast the spell
		sp->procCharges = 1;	//allow only 1 arcane misle cast
		sp->procFlags = PROC_ON_CAST_SPELL;	
	}

	// Shattered Barrier
	sp = dbcSpell.LookupEntryForced(44745);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 55080;
		sp->ProcOnNameHash[0] = SPELL_HASH_ICE_BARRIER;
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced(54787);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 55080;
		sp->ProcOnNameHash[0] = SPELL_HASH_ICE_BARRIER;
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	// Burnout
	sp = dbcSpell.LookupEntryForced(44449);
	//if(sp != NULL)
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 44450;
		sp->eff[1].EffectImplicitTargetA = 1;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
	}
	sp = dbcSpell.LookupEntryForced(44469);
	//if(sp != NULL)
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 44450;
		sp->eff[1].EffectImplicitTargetA = 1;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
	}
	sp = dbcSpell.LookupEntryForced(44470);
	//if(sp != NULL)
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 44450;
		sp->eff[1].EffectImplicitTargetA = 1;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
	}
	sp = dbcSpell.LookupEntryForced(44471);
	//if(sp != NULL)
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 44450;
		sp->eff[1].EffectImplicitTargetA = 1;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
	}
	sp = dbcSpell.LookupEntryForced(44472);
	//if(sp != NULL)
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 44450;
		sp->eff[1].EffectImplicitTargetA = 1;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
	}
	// Setup
	sp = dbcSpell.LookupEntryForced(13983);
	//if(sp != NULL)
	{
		sp->proc_interval = 1000;
		sp->procFlags = PROC_ON_RESIST_VICTIM | PROC_ON_DODGE_VICTIM;
		sp->procChance = 33;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced(14070);
	//if(sp != NULL)
	{
		sp->proc_interval = 1000;
		sp->procFlags = PROC_ON_RESIST_VICTIM | PROC_ON_DODGE_VICTIM;
		sp->procChance = 66;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced(14071);
	//if(sp != NULL)
	{
		sp->proc_interval = 1000;
		sp->procFlags = PROC_ON_RESIST_VICTIM | PROC_ON_DODGE_VICTIM;
		sp->procChance = 100;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	// Brain Freeze rank 1
	sp = dbcSpell.LookupEntryForced( 44546 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
		SetPPMForChance( sp, 2, 1000, 60000 );
	}
	sp = dbcSpell.LookupEntryForced( 44548 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
		SetPPMForChance( sp, 2, 1000, 60000 );
	}
	sp = dbcSpell.LookupEntryForced( 44549 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
		SetPPMForChance( sp, 2, 1000, 60000 );
	}
	//brain freez proc
	sp = dbcSpell.LookupEntryForced( 57761 );
	//if(sp != NULL)
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Arcane Potency
	sp = dbcSpell.LookupEntryForced( 31571 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 57529;
		sp->ProcOnNameHash[0] = SPELL_HASH_CLEARCASTING;
		sp->ProcOnNameHash[1] = SPELL_HASH_PRESENCE_OF_MIND;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 31572 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 57531;
		sp->ProcOnNameHash[0] = SPELL_HASH_CLEARCASTING;
		sp->ProcOnNameHash[1] = SPELL_HASH_PRESENCE_OF_MIND;
		sp->procChance = 100;
	}
	//Arcane Potency procs
	sp = dbcSpell.LookupEntryForced( 57529 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 2;
		sp->AuraInterruptFlags = 0;
	}
	sp = dbcSpell.LookupEntryForced( 57531 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 2;
		sp->AuraInterruptFlags = 0;
	}

	if( sp->NameHash == SPELL_HASH_IMPROVED_COUNTERSPELL )
		sp->procFlags = PROC_ON_CAST_SPELL;

	//////////////////////////////////////////
	// WARLOCK								//
	//////////////////////////////////////////

	// Insert warlock spell fixes here

	//create dummy spells for fell rain of fire warlocks
	sp = CreateDummySpell( 5741 );
	{
		sp2 = dbcSpell.LookupEntryForced( 5740 );
		sp3 = dbcSpell.LookupEntryForced( 38741 );
		memcpy( sp, sp2, sizeof( SpellEntry ) );
		sp->Id = 5741;
		sp->spell_id_client = 38741;
		sp->SpellVisual[0] = sp3->SpellVisual[0];
		sp->SpellVisual[1] = sp3->SpellVisual[1];
		sp->c_is_flags |= SPELL_FLAG_IS_REQUIRING_SM_MOD;
	}
	//create dummy spells for fell hellfire warlocks
/*	sp = CreateDummySpell( 1951 );
	{
		sp2 = dbcSpell.LookupEntryForced( 1949 );
		memcpy( sp, sp2, sizeof( SpellEntry ) );
		sp->Id = 1951;
		sp->spell_id_client = 85403;
	}*/
	//create dummy spells for fell immolate warlocks
	sp = CreateDummySpell( 349 );
	{
		sp2 = dbcSpell.LookupEntryForced( 348 );
		memcpy( sp, sp2, sizeof( SpellEntry ) );
		sp->Id = 349;
		sp->spell_id_client = 37628;
		sp->c_is_flags |= SPELL_FLAG_IS_REQUIRING_SM_MOD;
	}

	//Seduction
	sp = dbcSpell.LookupEntryForced( 6358 );	
	//if( sp != NULL )
		sp->StartRecoveryTime = 1; //it's a channeled spell. The cooldown is already in the channeling part

	//Flee
	sp = dbcSpell.LookupEntryForced( 89792 );	
	//if( sp != NULL )
		sp->eff[2].Effect = SPELL_EFFECT_DUMMY;

	//Legion Strike
	sp = dbcSpell.LookupEntryForced( 30213 );	
	//if( sp != NULL )
	{
		if( sp->eff[0].EffectBasePoints == -10 )
			sp->eff[0].EffectBasePoints = -25;
	}

	//Fear
	sp = dbcSpell.LookupEntryForced( 5782 );	
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Bane of Agony
	sp = dbcSpell.LookupEntryForced( 980 );	
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Unstable Affliction
//	sp = dbcSpell.LookupEntryForced( 131736 );	
	//if( sp != NULL )
//		sp->FacingCasterFlags = 0;
	//Curse of Weakness
	sp = dbcSpell.LookupEntryForced( 702 );	
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Unending Breath
	sp = dbcSpell.LookupEntryForced( 5697 );	
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Curse of the Elements
	sp = dbcSpell.LookupEntryForced( 1490 );	
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Curse of Tongues
	sp = dbcSpell.LookupEntryForced( 1714 );	
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//Summon Doomguard
	sp = dbcSpell.LookupEntryForced( 60478 );	
	//if( sp != NULL )
		sp->eff[0].EffectBasePoints = 0;

	//Pandemic
	sp = dbcSpell.LookupEntryForced( 85099 );	
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 92931;	
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->procFlags = PROC_ON_SPELL_HIT_DOT;
		sp->ProcOnNameHash[0] = SPELL_HASH_DRAIN_SOUL;	
	}
	sp = dbcSpell.LookupEntryForced( 85100 );	
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 92931;	
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->procFlags = PROC_ON_SPELL_HIT_DOT;
		sp->ProcOnNameHash[0] = SPELL_HASH_DRAIN_SOUL;	
	}

	//Demon Leap
	sp = dbcSpell.LookupEntryForced( 54786 );	
	//if( sp != NULL )
		sp->rangeIndex = 14; //no idea about real range. Right now it does not have one :(

	//Fire and Brimstone
	sp = dbcSpell.LookupEntryForced( 47266 );	
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	sp = dbcSpell.LookupEntryForced( 47267 );	
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	sp = dbcSpell.LookupEntryForced( 47268 );	
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;

	//Glyph of Shadowburn
	sp = dbcSpell.LookupEntryForced( 56229 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 56229;		//self proc
		sp->procChance = 100;
//		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 6000;	//inherited from some other spell
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOWBURN;	
	}
	//Shadowburn
	sp = dbcSpell.LookupEntryForced( 17877 );	
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	sp = dbcSpell.LookupEntryForced( 29341 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 29341;		//self proc
		sp->procChance = 100;
		sp->procFlags = PROC_ON_DIE_VICTIM;
	}
	//Devour Magic
	sp = dbcSpell.LookupEntryForced(19505);
	//if(sp != NULL)
	{
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL; 
		sp->eff[1].EffectTriggerSpell = 19658;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET; 
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		SpellEntryEffectCopy( sp, sp, 1, 2 );
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET_MASTER; 
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp = dbcSpell.LookupEntryForced(19658);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}

	//Soul Swap
	sp = dbcSpell.LookupEntryForced(86121);
	//if(sp != NULL)
	{
		SpellEntryEffectCopy( sp, sp, 0, 1 );
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY; //make effect 1 do the dmg and effect 0 do the stealing
	}
	//Soul Swap Exhale
	sp = dbcSpell.LookupEntryForced(86213);
	//if(sp != NULL)
	{
		SpellEntryEffectCopy( sp, sp, 0, 1 );
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY; //make effect 1 do the dmg and effect 0 do the stealing
	}
	//this will swap the spells visually client side ( soul swap with soul swap exhale )
	sp = dbcSpell.LookupEntryForced(86211);
	//if(sp != NULL)
		sp->eff[0].EffectMiscValue = 86121;	

	//Immolation Aura
	sp = dbcSpell.LookupEntryForced(50589);
	//if(sp != NULL)
		sp->ChannelInterruptFlags = 0;

	//Soul Harvest
	sp = dbcSpell.LookupEntryForced(79268);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_ENERGIZE;	
		sp->eff[0].EffectBasePoints = 1;
		sp->c_is_flags2 &= ~SPELL_FLAG2_IS_VALUE_OVER_TIME; //remove this flag
	}

	//Curse of the elements
	sp = dbcSpell.LookupEntryForced(1490);
	//if(sp != NULL)
	{
		sp->ThreatForSpellCoef = 0.0f;
		sp->ThreatForSpell = 0;
	}

	//Soulstone
	sp = dbcSpell.LookupEntryForced( 693 );	
	//if( sp != NULL )
	{
//		SpellEntryEffectCopy( sp, sp, 0, 1 );
//		sp->eff[0].Effect = SPELL_EFFECT_DUMMY; //insta ressurect target if he is dead
		sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
	}

	//Soulstone Resurrection
	sp = dbcSpell.LookupEntryForced( 20707 );	//the spell on the item
	sp2 = dbcSpell.LookupEntryForced( 95750 );	//the spell that actually resurrects us
	//if( sp != NULL )
	{
		sp->eff[0].EffectTriggerSpell = 3026;	//self resurrect spell
		sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_SOULSTONE;
		sp->chained_cast = sp2; // Soulstone Resurrection
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
	}

	//Soulshatter
	sp = dbcSpell.LookupEntryForced( 29858 );	
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 32835; 
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
/*	//warlock - Soulshatter
	sp = dbcSpell.LookupEntryForced( 29858 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_REDUCE_THREAT_PERCENT;		//reduce by 50% -> no visual :(
		sp->chained_cast = dbcSpell.LookupEntryForced( 32835 );	//reduce by 50%	-> has visual effect also
	} */

	//Soulburn: Seed of Corruption
	sp = dbcSpell.LookupEntryForced( 86664 );	
	//if( sp != NULL )
	{
		sp->DurationIndex = 21;	//infinit
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86664;	//self proc !
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_SEED_OF_CORRUPTION;	
		sp->procFlags = PROC_ON_AURA_REMOVE;
	}

	//Jinx
	sp = dbcSpell.LookupEntryForced( 18179 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 85547;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_CURSE_OF_THE_ELEMENTS;	
		sp->ProcOnNameHash[1] = SPELL_HASH_CURSE_OF_WEAKNESS;	
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 85479 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86105;
		sp->eff[2].EffectBasePoints = dbcSpell.LookupEntryForced( 18179 )->eff[2].EffectBasePoints; //target count limit
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_CURSE_OF_THE_ELEMENTS;	
		sp->ProcOnNameHash[1] = SPELL_HASH_CURSE_OF_WEAKNESS;	
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 85547 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->ThreatForSpellCoef = 0.0f;
		sp->ThreatForSpell = 0;
		sp->DurationIndex = dbcSpell.LookupEntryForced( 1490 )->DurationIndex;
	}
	sp = dbcSpell.LookupEntryForced( 86105 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->ThreatForSpellCoef = 0.0f;
		sp->ThreatForSpell = 0;
		sp->DurationIndex = dbcSpell.LookupEntryForced( 1490 )->DurationIndex;
	}

	//Cremation
	sp = dbcSpell.LookupEntryForced( 85103 );	
	//if( sp != NULL )
	{
		sp->ProcOnNameHash[0] = SPELL_HASH_HAND_OF_GUL_DAN;	
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 85104 );	
	//if( sp != NULL )
	{
		sp->ProcOnNameHash[0] = SPELL_HASH_HAND_OF_GUL_DAN;	
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Aura of Foreboding
	sp = dbcSpell.LookupEntryForced( 89604 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 93974;
		sp->eff[1].EffectTriggerSpell = 93975;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_CURSE_OF_GUL_DAN;	
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 89605 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 93987;
		sp->eff[1].EffectTriggerSpell = 93986;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_CURSE_OF_GUL_DAN;	
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 93974 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->rangeIndex = 4;	//30 yards
	}
	sp = dbcSpell.LookupEntryForced( 93975 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->rangeIndex = 4;	//30 yards
	}
	sp = dbcSpell.LookupEntryForced( 93987 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->rangeIndex = 4;	//30 yards
	}
	sp = dbcSpell.LookupEntryForced( 93986 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->rangeIndex = 4;	//30 yards
	}

	//Impending Doom
	sp = dbcSpell.LookupEntryForced( 85106 );	
	sp2 = dbcSpell.LookupEntryForced( 603 ); //bane of doom
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 18662;
		sp->procChance = sp->eff[0].EffectBasePoints;		//should increase proc chance :(. If we make it like this it has a chance to summon 2 demons
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
		sp->eff[0].EffectMiscValue = SMT_TRIGGER;
	}
	sp = dbcSpell.LookupEntryForced( 85107 );	
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 18662;
		sp->procChance = sp->eff[0].EffectBasePoints;		//should increase proc chance :(. If we make it like this it has a chance to summon 2 demons
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
		sp->eff[0].EffectMiscValue = SMT_TRIGGER;
	}
	sp = dbcSpell.LookupEntryForced( 85108 );	
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 18662;
		sp->procChance = sp->eff[0].EffectBasePoints;		//should increase proc chance :(. If we make it like this it has a chance to summon 2 demons
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
		sp->eff[0].EffectMiscValue = SMT_TRIGGER;
	}

	//Bane of Doom
	sp = dbcSpell.LookupEntryForced( 603 );	
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 18662;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->procChance = sp->eff[1].EffectBasePoints;
		sp->ProcOnNameHash[0] = SPELL_HASH_BANE_OF_DOOM;	//oh yeah, self proc
		sp->procFlags = PROC_ON_SPELL_HIT_DOT;
		SpellEntryEffectSwap(sp,sp,0,1);	//remember our bane target
	}
	sp = dbcSpell.LookupEntryForced( 18662 );	
	//if( sp != NULL )
		sp->eff[0].EffectBasePoints = 0;	//1 summon

	//Hand of Gul'dan
	sp = dbcSpell.LookupEntryForced( 71521 );	
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->eff[1].EffectTriggerSpell = 86000;	//this spell has no effect atm, best case visual only 
	}
	sp = dbcSpell.LookupEntryForced( 86000 );	
	sp2 = dbcSpell.LookupEntryForced( 86041 );
	sp3 = dbcSpell.LookupEntryForced( 71521 );	
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_INCREASE_ATTACKER_SPELL_CRIT;
		sp->eff[0].EffectMiscValue = 127;
		sp->eff[0].EffectAmplitude = 1000;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
		sp->DurationIndex = sp2->DurationIndex;
		sp->SpellVisual[0] = sp3->SpellVisual[0];
	}

	//Improved Soul Fire
	sp = dbcSpell.LookupEntryForced( 18119 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 85383;
		sp->procChance = 50;
		sp->ProcOnNameHash[0] = SPELL_HASH_SOUL_FIRE;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 15000;
	}
	sp = dbcSpell.LookupEntryForced( 18120 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 85383;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_SOUL_FIRE;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 15000;
	}

	// Bane of Havoc
	sp = dbcSpell.LookupEntryForced( 85455 );	
	//if( sp != NULL )
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
	}

	//Demonic Pact
	sp = dbcSpell.LookupEntryForced( 47236 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET;
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53646;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->c_is_flags |= SPELL_FLAG_IS_TRIGGERED_BY_TARGET;
	}

	//Demonic Rebirth
	sp = dbcSpell.LookupEntryForced( 88446 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88448;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_DIE_VICTIM;
//		sp->procFlags2 |= PROC2_REMOVEONUSE;
		sp->proc_interval = 2* 60000;
	}
	sp = dbcSpell.LookupEntryForced( 88447 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88448;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_DIE_VICTIM;
//		sp->procFlags2 |= PROC2_REMOVEONUSE;
		sp->proc_interval = 2* 60000;
	}
	sp = dbcSpell.LookupEntryForced( 89140 );	
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
		sp->procFlags2 |= PROC2_REMOVEONUSE;
	}
	sp = dbcSpell.LookupEntryForced( 88448 );	
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Nether Ward
	sp = dbcSpell.LookupEntryForced( 91713 );	
	//if( sp != NULL )
	{
/*		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_REPLACE_SPELL;
		sp->eff[0].EffectBasePoints = 91711;	//to Nether Ward
		sp->eff[0].EffectMiscValue = 6229;		//replace Shadow Ward
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1;	*/
/*		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 91713;	//self proc !
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEMON_ARMOR;
		sp->ProcOnNameHash[1] = SPELL_HASH_FEL_ARMOR;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE; */
	}
	sp = dbcSpell.LookupEntryForced( 687 );		//Demon Armor
	//if( sp != NULL )
	{
		sp->eff[2].EffectBasePoints = 6229;	//into neather ward, but only if have talent
		sp->eff[2].EffectMiscValue = 6229;	//convert shadow ward
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1;
	}
	sp = dbcSpell.LookupEntryForced( 28176 );	//Fel Armor	
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->procChance = 100;
		sp->procFlags2 |= PROC2_TARGET_SELF;	//well actually owner
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 96379;	
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectBasePoints = 6229;	//into neather ward, but onyl if have talent
		sp->eff[2].EffectMiscValue = 6229;	//convert shadow ward
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1;
	}
	sp2 = dbcSpell.LookupEntryForced( 96379 );	//Fel Armor	- heal
	//if( sp != NULL )
	{
		sp2->SpellGroupType[0] = sp->SpellGroupType[0];	//need these for the talents
		sp2->SpellGroupType[1] = sp->SpellGroupType[1];
		sp2->SpellGroupType[2] = sp->SpellGroupType[2];
		SetSpellPowerCoeffsAll( sp2, 0 );	//scripted value
		sp2->Spell_value_is_scripted = true;
		sp2->spell_id_client = 28176;	//the shield id ?
	}

	//Demonic Aegis 
	sp = dbcSpell.LookupEntryForced( 30143 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	//mod Demon Armor
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1; //mod Fel Armor heal proc
	}
	sp = dbcSpell.LookupEntryForced( 30144 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	//mod Demon Armor
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1; //mod Fel Armor heal proc
	}

	//Burning Embers
	sp = dbcSpell.LookupEntryForced( 85112 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 85421;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_SOUL_FIRE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FIREBOLT;
		sp->procFlags = PROC_ON_SPELL_HIT;
	}
	sp = dbcSpell.LookupEntryForced( 91986 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 85421;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_SOUL_FIRE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FIREBOLT;
		sp->procFlags = PROC_ON_SPELL_HIT;
	}
	sp = dbcSpell.LookupEntryForced( 85421 );	
	//if( sp != NULL )
	{
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		sp->Spell_value_is_scripted = true;
	}

	// Hellfire 
	sp = dbcSpell.LookupEntryForced( 1949 );	
	//if( sp != NULL )
	//Hellfire effect - should target caster also ?
	sp = dbcSpell.LookupEntryForced( 5857 );	
	//if( sp != NULL )
	{
//		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 18; //13 = ten yards which is good, but it seems to me quite small, making it 15 yards :)
		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 13; //13 = ten yards which is good, but it seems to me quite small, making it 15 yards :)
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_SELF;
	}
	//Dark Intent 
	//caster casts : 80398 -> this only casts 85767 on the target
	sp = dbcSpell.LookupEntryForced( 85767 );	
	//if( sp != NULL )
	{
		//default buff that will increase haste for both of us
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_SELF;
		//put a buff on target and us so when either of us does a crit DOT there will be a proc event called
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;	//we need a proc event that will know about both caster and target
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;	//well actually we are going to link it on us also
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_SELF;
		sp->eff[1].EffectTriggerSpell = 85759;	//not the right one, we need a spell to mod dmg and healing pct
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_DARK_INTENT;
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}
	sp = dbcSpell.LookupEntryForced( 80398 );	
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//this spell gets procced and can stack up to 3 times
	sp = dbcSpell.LookupEntryForced( 85759 );	//every class has one specially made for them !! we are using one that will mod not just periodic but all spell powers this way :(
	//if( sp != NULL )
	{
		SpellEntryEffectCopy( sp, sp, 0, 1 );
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_DONE_PERCENT;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	} 
	//Health Funnel
	sp = dbcSpell.LookupEntryForced( 755 );
	//if( sp != NULL )
	{
		int32 EffVal = sp->eff[2].EffectBasePoints;
		SpellEntryEffectCopy( sp, sp, 0, 2 );
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PERIODIC_DAMAGE_PERCENT;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectBasePoints = EffVal;
		SetNoEffeCanCrit( sp ); 
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		sp->Spell_value_is_scripted = true;
	}
	//drain life
	sp = dbcSpell.LookupEntryForced( 689 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy( sp, sp, 0, 1 );
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
		sp->eff[1].EffectBasePoints = 200;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->ss.coeff_points_gtscale[1] = 0;	//fixed value
	}
	sp2 = dbcSpell.LookupEntryForced( 89420 ); //drain life - soulburn : drain life - same but with fast heal / dmg
	//if( sp != NULL )
	{
		
		SpellEntryEffectCopy( sp, sp2, 0, 0 );
		SpellEntryEffectCopy( sp, sp2, 1, 1 );
		SpellEntryEffectCopy( sp, sp2, 2, 2 );
		sp2->eff[0].EffectAmplitude = sp2->eff[0].EffectAmplitude / 2;
		sp2->eff[1].EffectAmplitude = sp2->eff[1].EffectAmplitude / 2;
		sp2->eff[2].EffectAmplitude = sp2->eff[2].EffectAmplitude / 2;
		sp2->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
	}
	//Inferno
	sp = dbcSpell.LookupEntryForced( 85105 );
	//if( sp != NULL )
	{
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->activeIconID = sp->SpellIconID;		//anything but 0 to make us send the aura packet to client :(
		sp->eff[0].EffectMiscValue = SPELL_HASH_HELLFIRE;	//ignore interrupt on move for this spell
	}
	//Fiery Apocalypse - Increases all fire damage you deal by 10%.  Each point of Mastery increases fire damage by an additional 1.25%.
	sp = dbcSpell.LookupEntryForced( 77220 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 10;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Potent Afflictions - Increases all periodic shadow damage you deal by 13.04%.  Each point of Mastery increases periodic shadow damage by an additional 1.63%.
	sp = dbcSpell.LookupEntryForced( 77215 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 13;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Master Demonologist - mastery 
	// Increases the damage done by your demon servants and damage you deal while transformed into a demon by $77219s1%.  Each point of Mastery increases damage by an additional ${$77219m3/100}.1%.
	sp = dbcSpell.LookupEntryForced( 77219 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//	sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->procFlags = PROC_ON_CAST_SPELL_EVENT | PROC_ON_AURA_REMOVE_EVENT | PROC_ON_NOT_VICTIM;
		sp->procChance = 100;
		sp->procFlags2 |= PROC2_TARGET_SELF;	//well actually owner
		sp->proc_interval = 0;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77221; //we will create this spell
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_METAMORPHOSIS;
	}
	sp = CreateDummySpell( 77221 );
	//if( sp != NULL )
	{
		sp->DurationIndex = dbcSpell.LookupEntryForced( 47241 )->DurationIndex;	
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
		sp->eff[0].EffectMiscValue = 127;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->Attributes |= ATTRIBUTES_PASSIVE;
	}

	//Empowered Imp
	sp = dbcSpell.LookupEntryForced( 47220 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints+1;
		SetPPMForChance( sp, 4, 1000, 60000 );
		sp->procChance = 10 + sp->eff[0].EffectBasePoints+1;
		sp->procFlags2 |= PROC2_TARGET_SELF;	//well actually owner
		sp->eff[0].Effect = SPELL_EFFECT_NULL; //no idea what this is right now
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 47283;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FIREBOLT;
	}
	sp = dbcSpell.LookupEntryForced( 47221 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints+1;
		SetPPMForChance( sp, 4, 1000, 60000 );
		sp->procChance = 10 + sp->eff[0].EffectBasePoints+1;
		sp->procFlags2 |= PROC2_TARGET_SELF;	//well actually owner
		sp->eff[0].Effect = SPELL_EFFECT_NULL; //no idea what this is right now
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 47283;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FIREBOLT;
	}
	sp = dbcSpell.LookupEntryForced( 47283 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//warlock set that can be exploited by DK class to increase health uber much
	//oblivion rainment
	sp = dbcSpell.LookupEntryForced( 37376 );
	//if( sp != NULL )
		sp->RequiredPlayerClass = ( 1 << WARLOCK );
	sp = dbcSpell.LookupEntryForced( 37375 );
	//if( sp != NULL )
		sp->RequiredPlayerClass = ( 1 << WARLOCK );

	//Improved Shadow Bolt 
	//Shadow and Flame
	sp = dbcSpell.LookupEntryForced( 17793 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_INCINERATE;
	}
	sp = dbcSpell.LookupEntryForced( 17796 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_INCINERATE;
	}
	sp = dbcSpell.LookupEntryForced( 17801 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_INCINERATE;
	}

	//Decimation
	sp = dbcSpell.LookupEntryForced( 63156 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_INCINERATE;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_SOUL_FIRE;
	}
	sp = dbcSpell.LookupEntryForced( 63158 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_INCINERATE;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_SOUL_FIRE;
	}

	//Warlock Everlasting Affliction 
	sp = dbcSpell.LookupEntryForced( 47201 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DRAIN_LIFE;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_DRAIN_SOUL;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_HAUNT;
	}
	sp = dbcSpell.LookupEntryForced( 47202 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DRAIN_LIFE;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_DRAIN_SOUL;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_HAUNT;
	}
	sp = dbcSpell.LookupEntryForced( 47203 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DRAIN_LIFE;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_DRAIN_SOUL;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_HAUNT;
	}

	//Warlock Haunt 
	sp = dbcSpell.LookupEntryForced( 48181 );
	//if( sp != NULL )
	{
		//get previous dmg then register a cast on aura remove on the target to cast it on us
//		sp->eff[1].Effect = SPELL_EFFECT_SCRIPT_EFFECT;
//		sp->procFlags2 |= PROC2_REMOVEONUSE;
//		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HAUNT;
		sp->eff[2].EffectMiscValue = SCHOOL_MASK_SHADOW;
		//213,"$damage=${(($SP*0.5577)*1.25)+$m1}",
		sp->eff[0].EffectSpellPowerCoef = 0.5578f * 1.25f;
	}
//	sp = dbcSpell.LookupEntryForced( 48210 );
//	sp2 = dbcSpell.LookupEntryForced( 50091 );
	//if( sp != NULL )
//		SpellEntryEffectCopy( sp, sp2, 0, 0 ); 
	//haunt is supposed to heal exactly the amount of damage it did
	sp2 = dbcSpell.LookupEntryForced( 48210 );
	//if( sp != NULL )
	{
//		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
//		sp->Spell_value_is_scripted = true;
		SetNoEffeCanCrit( sp );
	}

	//Warlock Improved Felhunter 
/*	sp = dbcSpell.LookupEntryForced( 54037 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 54425;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BITE;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 54038 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 54425;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BITE;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
	}*/

	//Warlock Improved Fear 
	sp = dbcSpell.LookupEntryForced( 53754 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 60946;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FEAR;
	}
	sp = dbcSpell.LookupEntryForced( 53759 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 60947;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FEAR;
	}

	//Warlock Create Healthstone 
	sp = dbcSpell.LookupEntryForced( 6201 );
	//if( sp != NULL )
		sp->eff[0].EffectBasePoints = 1;
	//Soulburn: Healthstone 
	sp = dbcSpell.LookupEntryForced( 79437 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_HEALTH_PERCENT;

	//Death Coil
	sp = dbcSpell.LookupEntryForced( 6789 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_SCHOOL_DAMAGE;
		SpellEntryEffectCopy( sp, sp, 0, 2 ); 
		sp->speed = 0;
		sp->eff[2].Effect = SPELL_EFFECT_HEAL;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}

	//Warlock Shadowflame 
	sp = dbcSpell.LookupEntryForced( 47897 );
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[1].EffectImplicitTargetA = sp->eff[0].EffectImplicitTargetA;
		sp->eff[1].EffectImplicitTargetB = sp->eff[0].EffectImplicitTargetB;
		sp->eff[1].EffectTriggerSpell = 47960;
		sp->eff[1].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp2 = dbcSpell.LookupEntryForced( 47960 );
	//if( sp != NULL )
	{
		sp2->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex;
		sp2->eff[1].EffectRadiusIndex = sp->eff[1].EffectRadiusIndex;
		sp2->eff[2].EffectRadiusIndex = sp->eff[2].EffectRadiusIndex;
	}

	//Warlock Metamorphosis
	sp = dbcSpell.LookupEntryForced( 47241 );
	//if( sp != NULL )
	{
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_CAST_SPELL;	//some say this happens
		sp->Attributes |= ATTRIBUTES_CANT_CANCEL;	//not sure if this is correct. Description says you can use your seplls but client will try to cancel the aura when you cast a spell
	}

	//Warlock Chaos bolt 
	sp = dbcSpell.LookupEntryForced( 50796 );
	//if( sp != NULL )
	{
		sp->Attributes |= ATTRIBUTES_IGNORE_INVULNERABILITY;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_AVOIDING_ALL_RESIST;
//		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;	//scripting this to avoid absorbtion
		sp->School = 2;
	}
	// End Warlock chaos bolt

	//////////////////////////////////////////
	// DRUID								//
	//////////////////////////////////////////

	// Insert druid spell fixes here

	// Feline Grace
	sp = dbcSpell.LookupEntryForced( 20719 );
	//if( sp != NULL )
		sp->RequiredShapeShift = (1<<(FORM_CAT-1));

	// Faerie Fire - feral
	sp = dbcSpell.LookupEntryForced( 16875 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Hibernate
	sp = dbcSpell.LookupEntryForced( 2637 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Remove Corruption
	sp = dbcSpell.LookupEntryForced( 2782 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Growl 
	sp = dbcSpell.LookupEntryForced( 6795 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Faerie Fire 
	sp = dbcSpell.LookupEntryForced( 770 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	// Glyph of Barkskin
	sp = dbcSpell.LookupEntryForced( 63057 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->proc_interval = 0;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectTriggerSpell = 63058; //!self cast 
		sp->ProcOnNameHash[0] = SPELL_HASH_BARKSKIN;
	}

	// Glyph of Innervate
	sp = dbcSpell.LookupEntryForced( 54832 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 54833;		
		sp->ProcOnNameHash[0] = SPELL_HASH_INNERVATE;
	}

	// Glyph of Regrowth
	sp = dbcSpell.LookupEntryForced( 54743 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->eff[0].EffectTriggerSpell = 54743;		//self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_REGROWTH;
	}

	// Dreamstate
	sp = dbcSpell.LookupEntryForced( 33597 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 33599 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}

	// Heart of the Wild
	sp = dbcSpell.LookupEntryForced( 17003 );
	//if( sp != NULL )
	{
		sp->apply_on_shapeshift_change = true;
		sp->RequiredShapeShift = (1 << (FORM_FLIGHT-1)) | (1 << (FORM_AQUA-1)) | (1 << (FORM_TRAVEL-1)) | (1 << (FORM_MOONKIN-1)) | (1 << (FORM_TREE-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1)) | (1 << (FORM_CUSTOM_NORMAL-1));
		//create a dummy aura
		uint32 basep = sp->eff[1].EffectBasePoints;
		SpellEntryEffectCopy( sp, sp, 0, 1 ); 
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].EffectMiscValueB = 1 << STAT_STAMINA;
		sp->eff[1].EffectBasePoints = basep;
	}
	sp = dbcSpell.LookupEntryForced( 17004 );
	//if( sp != NULL )
	{
		sp->apply_on_shapeshift_change = true;
		sp->RequiredShapeShift = (1 << (FORM_FLIGHT-1)) | (1 << (FORM_AQUA-1)) | (1 << (FORM_TRAVEL-1)) | (1 << (FORM_MOONKIN-1)) | (1 << (FORM_TREE-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1)) | (1 << (FORM_CUSTOM_NORMAL-1));
		//create a dummy aura
		uint32 basep = sp->eff[1].EffectBasePoints;
		SpellEntryEffectCopy( sp, sp, 0, 1 ); 
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].EffectMiscValueB = 1 << STAT_STAMINA;
		sp->eff[1].EffectBasePoints = basep;
	}
	sp = dbcSpell.LookupEntryForced( 17005 );
	//if( sp != NULL )
	{
		sp->apply_on_shapeshift_change = true;
		sp->RequiredShapeShift = (1 << (FORM_FLIGHT-1)) | (1 << (FORM_AQUA-1)) | (1 << (FORM_TRAVEL-1)) | (1 << (FORM_MOONKIN-1)) | (1 << (FORM_TREE-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1)) | (1 << (FORM_CUSTOM_NORMAL-1));
		//create a dummy aura
		uint32 basep = sp->eff[1].EffectBasePoints;
		SpellEntryEffectCopy( sp, sp, 0, 1 ); 
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].EffectMiscValueB = 1 << STAT_STAMINA;
		sp->eff[1].EffectBasePoints = basep;
	}

	// Track Humanoids
	sp = dbcSpell.LookupEntryForced( 5225 );
	//if( sp != NULL )
	{
		sp->apply_on_shapeshift_change = true;
		sp->RequiredShapeShift = (1 << (FORM_CAT-1));
	}
	
	sp = dbcSpell.LookupEntryForced( 88747 );
	//if( sp != NULL )
		sp->eff[0].EffectBasePoints = 0;
	//Wild Mushroom - dmg
	sp = dbcSpell.LookupEntryForced( 78777 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = 29;	//6 yards
	}

	//Glyph of Rebirth
	sp = dbcSpell.LookupEntryForced( 54733 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	//Glyph of Unburdened Rebirth
	sp = dbcSpell.LookupEntryForced( 57857 );
	sp2 = dbcSpell.LookupEntryForced( 20484 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
	}
	//Prowl
	sp = dbcSpell.LookupEntryForced( 5215 );
	//if( sp != NULL )
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN | AURA_INTERRUPT_ON_ENTER_COMBAT;
		DynamicCreateAssignSpellStackGroup( sp, 0, "Stealth" );
	}

	//Typhoon
	sp = dbcSpell.LookupEntryForced( 50516 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->eff[0].EffectTriggerSpell = 61391;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_IN_FRONT_OF_CASTER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 61391 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
	}
	//Thrash
	sp = dbcSpell.LookupEntryForced( 77758);
	//if( sp != NULL )
	{
		sp->eff[1].EffectRadiusIndex = 14; //8 yards to bleed
		sp->eff[1].EffectRadiusMaxIndex = 14; //8 yards to bleed
	}

	//Solar Beam
	sp = dbcSpell.LookupEntryForced( 78675 );
	//if( sp != NULL )
	{
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->eff[1].EffectRadiusIndex = 13;	//10 yards ?
		sp->eff[1].EffectRadiusMaxIndex = 13;	//10 yards ?
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_SILENCE;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
		sp->spell_id_client = 81261;
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
	}

	//aquatic form
	sp = dbcSpell.LookupEntryForced( 1066 );
	//if( sp != NULL )
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_LEAVE_WATER & ~AURA_INTERRUPT_ON_MOVEMENT;
	//Aquatic Form (Passive)
	sp = dbcSpell.LookupEntryForced( 5421 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	//Glyph of Aquatic Form
	sp2 = dbcSpell.LookupEntryForced( 57856 );
	//if( sp != NULL )
	{
		sp2->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}

	//Euphoria
	sp = dbcSpell.LookupEntryForced( 81061 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81069;	
		sp->eff[1].EffectTriggerSpell = 81070;	
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->procFlags2 |= PROC2_TARGET_SELF;	//well actually owner
	}
	sp = dbcSpell.LookupEntryForced( 81062 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81069;	
		sp->eff[1].EffectTriggerSpell = 81070;	
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->procFlags2 |= PROC2_TARGET_SELF;	//well actually owner
	}
	sp = dbcSpell.LookupEntryForced( 48518 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC | SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	sp = dbcSpell.LookupEntryForced( 48517 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC | SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;

	//Gift of the Earthmother
	sp = dbcSpell.LookupEntryForced( 51179 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_HEAL;
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 51179;	//SELF proc !
		sp->procChance = 100;
		sp->proc_interval = 500;
		SetSpellPowerCoeffsAll( sp, 0.0f );
		sp->Spell_value_is_scripted = true;
	}
	sp = dbcSpell.LookupEntryForced( 51180 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_HEAL;
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 51179;	//SELF proc !
		sp->procChance = 100;
		sp->proc_interval = 500;
		SetSpellPowerCoeffsAll( sp, 0.0f );
		sp->Spell_value_is_scripted = true;
	}
	sp = dbcSpell.LookupEntryForced( 51181 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_HEAL;
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 51179;	//SELF proc !
		sp->procChance = 100;
		sp->proc_interval = 500;
		SetSpellPowerCoeffsAll( sp, 0.0f );
		sp->Spell_value_is_scripted = true;
	}

	//Fury of Stormrage
	sp = dbcSpell.LookupEntryForced( 17104 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_WRATH;
	}
	sp = dbcSpell.LookupEntryForced( 24943 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_WRATH;
	}
	sp = dbcSpell.LookupEntryForced( 81093 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Rend and Tear
	sp = dbcSpell.LookupEntryForced( 48432 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	sp = dbcSpell.LookupEntryForced( 48433 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	sp = dbcSpell.LookupEntryForced( 48434 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;

	//Primal Madness
	sp = dbcSpell.LookupEntryForced( 80316 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectTriggerSpell = 80879;
		sp->ProcOnNameHash[0] = SPELL_HASH_TIGER_S_FURY;
		sp->ProcOnNameHash[1] = SPELL_HASH_BERSERK;
	}
	sp = dbcSpell.LookupEntryForced( 80317 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectTriggerSpell = 80886;
		sp->ProcOnNameHash[0] = SPELL_HASH_TIGER_S_FURY;
		sp->ProcOnNameHash[1] = SPELL_HASH_BERSERK;
	}
	sp = dbcSpell.LookupEntryForced( 80879 );
	//if( sp != NULL )
		sp->DurationIndex = dbcSpell.LookupEntryForced( 50334 )->DurationIndex; //Berserk duration 
	sp = dbcSpell.LookupEntryForced( 80886 );
	//if( sp != NULL )
		sp->DurationIndex = dbcSpell.LookupEntryForced( 50334 )->DurationIndex; //Berserk duration 

	//Brutal Impact
	sp = CreateDummySpell( 16942 );
	//if( sp != NULL )
	{
		sp->DurationIndex = 21;	//infinit
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 82365; 
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_SKULL_BASH;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->NameHash = SPELL_HASH_BRUTAL_IMPACT + 1;
		sp->DiminishStatus = -1;
	}

	sp2 = dbcSpell.LookupEntryForced( 80964 );
	sp = dbcSpell.LookupEntryForced( 16940 );
	//if( sp != NULL )
		sp->chained_cast = dbcSpell.LookupEntryForced( 16942 );
	sp = dbcSpell.LookupEntryForced( 16941 );
	//if( sp != NULL )
		sp->chained_cast = dbcSpell.LookupEntryForced( 16942 );

	//Disentanglement
	sp = dbcSpell.LookupEntryForced( 96429 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
		sp->RequiredShapeShift = (1 << (FORM_BEAR-1))|(1 << (FORM_CAT-1))|(1 << (FORM_CUSTOM_NORMAL-1))|(1 << (FORM_AQUA-1))|(1 << (FORM_MOONKIN-1))|(1 << (FORM_TREE-1))|(1 << (FORM_TRAVEL-1))|(1 << (FORM_SWIFT-1));
	}

	//Natural Reaction
	sp = dbcSpell.LookupEntryForced( 57878 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_DODGE_VICTIM;
		sp->procChance = 100;
		sp->RequiredShapeShift = (1 << (FORM_BEAR-1));
	}
	sp = dbcSpell.LookupEntryForced( 57880 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_DODGE_VICTIM;
		sp->procChance = 100;
		sp->RequiredShapeShift = (1 << (FORM_BEAR-1));
	}

	//Stampede
	sp = dbcSpell.LookupEntryForced( 78892 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FERAL_CHARGE;
		sp->eff[0].EffectTriggerSpell = 33876; //self proc, suicide reqquired !
		sp->eff[1].EffectTriggerSpell = 81016; 
		sp->eff[2].EffectTriggerSpell = 81021; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 78893 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FERAL_CHARGE;
		sp->eff[0].EffectTriggerSpell = 33876; //self proc, suicide reqquired !
		sp->eff[1].EffectTriggerSpell = 81017; 
		sp->eff[2].EffectTriggerSpell = 81022; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 81021 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES;
		sp->chained_cast = dbcSpell.LookupEntryForced( 109881 );	//this will remove stealth requirement - note that the name of the spell is bad !
		sp->eff[0].EffectMiscValue = 6785;	//replace Ravage with Ravage!
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_REPLACE_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 81022 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES;
		sp->chained_cast = dbcSpell.LookupEntryForced( 109881 ); //this will remove stealth requirement - note that the name of the spell is bad !
		sp->eff[0].EffectMiscValue = 6785;	//replace Ravage with Ravage!
	}
	//Ravage!
	sp = dbcSpell.LookupEntryForced( 81170 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//Mangle (Cat)
	sp = dbcSpell.LookupEntryForced( 33876 );
	//if(sp != NULL)
		sp->chained_cast = dbcSpell.LookupEntryForced( 34071 );	//award 1 combo pint. Missing since 3.3

	//////////////////////////////////////////
	// WARRIOR								//
	//////////////////////////////////////////

	// Glyph of Shield Wall 
	sp = dbcSpell.LookupEntryForced( 63329 );
	//if( sp != NULL )
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;	

	// Intimidating shout 
	sp = dbcSpell.LookupEntryForced( 5246 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//Shield Specialization
	sp = dbcSpell.LookupEntryForced( 12724 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_BLOCK_VICTIM | PROC_ON_REFLECT_EVENT;
	sp = dbcSpell.LookupEntryForced( 12724 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_BLOCK_VICTIM | PROC_ON_REFLECT_EVENT;
	sp = dbcSpell.LookupEntryForced( 12725 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_BLOCK_VICTIM | PROC_ON_REFLECT_EVENT;

	//Shield Mastery
	sp = dbcSpell.LookupEntryForced( 29598 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_BLOCK;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 97954;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 84607 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_BLOCK;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 97954;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 84608 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_BLOCK;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 97954;
		sp->procChance = 100;
	}

	//Vigilance
	sp = dbcSpell.LookupEntryForced( 50720 );
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	}
	//Last Stand
	sp = dbcSpell.LookupEntryForced( 12976 );
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_HEALTH_PERCENT;
		sp->eff[0].EffectBasePoints = dbcSpell.LookupEntryForced( 12975 )->eff[0].EffectBasePoints;
	}
	//Glyph of Bloody Healing
	sp = dbcSpell.LookupEntryForced( 58369 );
	sp2 = dbcSpell.LookupEntryForced( 23880 );
	{
		sp->eff[0].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	//Glyph of Victory Rush
	sp = dbcSpell.LookupEntryForced( 58382 );
	sp2 = dbcSpell.LookupEntryForced( 34428 );
	{
		if( sp2->SpellGroupType[1] & 134217728 )
			sp->eff[0].EffectSpellGroupRelation[1] = 134217728;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
	}
	//Glyph of Intercept
	sp = dbcSpell.LookupEntryForced( 94372 );
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
	//Demoralizing Shout
	sp = dbcSpell.LookupEntryForced( 1160 );
	{ 
		sp->eff[0].EffectRadiusIndex = 13;	//10 yards ?
		sp->eff[0].EffectRadiusMaxIndex = 13;	//10 yards ?
//		sp->c_is_flags3 |= SPELL_FLAG3_IS_BREAKING_STEALTH_TARGET;	//no, it does not based on blizz changelog
	}
	//Intimidating Shout
	sp = dbcSpell.LookupEntryForced( 5246 );
	sp2 = dbcSpell.LookupEntryForced( 20511 );
	//if( sp != NULL )
	{ 
//		sp->c_is_flags3 |= SPELL_FLAG3_IS_BREAKING_STEALTH_TARGET; //no, it does not based on blizz changelog
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY; //main target and around him
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_ALL_ENEMY_AT_ENEMY_IN_AREA_CHANNELED; //main target and around him
//		sp->eff[1].EffectRadiusIndex = sp2->eff[0].EffectRadiusIndex;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY; //main target and around him
		sp->eff[2].EffectImplicitTargetB = EFF_TARGET_ALL_ENEMY_AT_ENEMY_IN_AREA_CHANNELED; //main target and around him
//		sp->eff[2].EffectRadiusIndex = sp2->eff[0].EffectRadiusIndex;
	}
	sp = dbcSpell.LookupEntryForced( 20511 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_ROOT;	//tremor totem does not remove stuns, only fears
		sp->maxstack = 1;
	}

	//Glyph of Intimidating Shout
	sp = dbcSpell.LookupEntryForced( 63327 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_INTIMIDATING_SHOUT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 20511;
		sp->procChance = 100;
		sp->proc_interval = 0; //it's an AOE spell, needs to affect all
	}

	//Piercing Howl
	sp = dbcSpell.LookupEntryForced( 12323 );
	{ 
		//reported second time : Along with the change made to Demoralizing Shout in 4.0.6 Piercing Howl should not unstealth enemies anymore
//		sp->c_is_flags3 |= SPELL_FLAG3_IS_BREAKING_STEALTH_TARGET;
	}


	//Hold the Line
	sp = dbcSpell.LookupEntryForced( 84604 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_DODGE_VICTIM;
	sp = dbcSpell.LookupEntryForced( 84621 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_DODGE_VICTIM;
	//Glyph of Berserker Rage
	sp = dbcSpell.LookupEntryForced( 58096 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BERSERKER_RAGE;
	}
	//Glyph of Death Wish
	sp = dbcSpell.LookupEntryForced( 94374 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;

	//Colossus Smash
	sp = dbcSpell.LookupEntryForced( 86346 );
	//if( sp != NULL )
	{
		SpellEntryEffectSwap(sp,sp,0,1);
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 108126;
	}
	//Glyph of Colossus Smash
	sp = dbcSpell.LookupEntryForced( 89003 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_COLOSSUS_SMASH;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 58567;
		sp->procChance = 100;
	}

	//Slam
	sp = dbcSpell.LookupEntryForced( 1464 );
	//if( sp != NULL )
	{
		sp->c_is_flags2 |= SPELL_FLAG2_IS_IGNORING_MOVE_INTERUPT;
		sp->AuraInterruptFlags &= ~(AURA_INTERRUPT_ON_MOVEMENT|AURA_INTERRUPT_ON_TURNING);
	}

	//Burning Rage - Item - Warrior T12 DPS 2P Bonus
	sp = dbcSpell.LookupEntryForced( 99233 );
	//if( sp != NULL )
		sp->DurationIndex = 29; // 12 sec instead 6 sec

	//Rallying Cry
	sp = dbcSpell.LookupEntryForced( 97462 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL_WITH_VALUE;
		sp->eff[0].EffectTriggerSpell = 97463;
	}
	sp = dbcSpell.LookupEntryForced( 97463 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALTHPCT;
	//Shattering Throw
	sp = dbcSpell.LookupEntryForced( 64382 );
	//if( sp != NULL )
		sp->Spell_value_is_scripted = true;	//this dmg is AP based and calculated by us, no need to add weapon dmg
	//Heroic Throw
	sp = dbcSpell.LookupEntryForced( 57755 );
	//if( sp != NULL )
		sp->Spell_value_is_scripted = true;	//this dmg is AP based and calculated by us, no need to add weapon dmg
	//Shield slam
	sp = dbcSpell.LookupEntryForced( 23922 );
	//if( sp != NULL )
		sp->Spell_value_is_scripted = true;	//this dmg is AP based and calculated by us, no need to add weapon dmg

	//Whirlwind
	sp = dbcSpell.LookupEntryForced( 1680 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectRadiusIndex = 14;	//8 yards accoridng to wowhead ?
		sp->eff[1].EffectRadiusIndex = 14;	//8 yards accoridng to wowhead ?
		sp->rangeIndex = 165; // 8 yards ?
	} 
	sp = dbcSpell.LookupEntryForced( 44949 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectRadiusIndex = 14;	//8 yards accoridng to wowhead ?
		sp->eff[1].EffectRadiusIndex = 14;	//8 yards accoridng to wowhead ?
		sp->rangeIndex = 165; // 8 yards ?
	} 

	//Defensive Stance
//	sp = dbcSpell.LookupEntryForced( 71 );
	//if( sp != NULL )
//		sp->chained_cast = dbcSpell.LookupEntryForced( 7376 );

	//Recklessness
	sp = dbcSpell.LookupEntryForced( 1719 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;

	//Raging Blow
	sp = dbcSpell.LookupEntryForced( 85288 );
	//if( sp != NULL )
	{
//		sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
//		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
//		sp->eff[2].EffectTriggerSpell = 85384;
	}
	//Field Dressing
	sp = dbcSpell.LookupEntryForced( 84579 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_PCT;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].EffectMiscValue = SMT_DAMAGE_DONE;	//healing done by our own abilities
		sp->eff[2].EffectBasePoints = sp->eff[2].EffectBasePoints - sp->eff[0].EffectBasePoints;
	}
	sp = dbcSpell.LookupEntryForced( 84580 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_PCT;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].EffectMiscValue = SMT_DAMAGE_DONE;	//healing done by our own abilities
		sp->eff[2].EffectBasePoints = sp->eff[2].EffectBasePoints - sp->eff[0].EffectBasePoints;
	}

	//Blood and Thunder
	sp = dbcSpell.LookupEntryForced( 84614 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_THUNDER_CLAP;
		sp->eff[0].EffectTriggerSpell = 84614; //self proc, suicide reqquired !
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 84615 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_THUNDER_CLAP;
		sp->eff[0].EffectTriggerSpell = 84614; //self proc, suicide reqquired !
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
	}

	//Battle Trance
	sp = dbcSpell.LookupEntryForced( 12322 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOODTHIRST;
		sp->ProcOnNameHash[2] = SPELL_HASH_MORTAL_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SHIELD_SLAM;
	}
	sp = dbcSpell.LookupEntryForced( 85741 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOODTHIRST;
		sp->ProcOnNameHash[2] = SPELL_HASH_MORTAL_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SHIELD_SLAM;
	}
	sp = dbcSpell.LookupEntryForced( 85742 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOODTHIRST;
		sp->ProcOnNameHash[2] = SPELL_HASH_MORTAL_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SHIELD_SLAM;
	}
	sp = dbcSpell.LookupEntryForced( 12964 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}

	//Meat Cleaver
	sp = dbcSpell.LookupEntryForced( 12329 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CLEAVE;
		sp->ProcOnNameHash[1] = SPELL_HASH_WHIRLWIND;
	}
	sp = dbcSpell.LookupEntryForced( 12950 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CLEAVE;
		sp->ProcOnNameHash[1] = SPELL_HASH_WHIRLWIND;
	}

	//Die by the Sword
	sp = dbcSpell.LookupEntryForced( 81913 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->proc_interval = 2*60*1000;
	}
	sp = dbcSpell.LookupEntryForced( 81914 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->proc_interval = 2*60*1000;
	}

	//Raging Blow
	sp = dbcSpell.LookupEntryForced( 85384 );
	//if( sp != NULL )
		sp->sar.casterAuraSpell = 55694;	//not good, we need enraged state not enrage buff. Better then nothing

	//Lambs to the Slaughter
	sp = dbcSpell.LookupEntryForced( 84583 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MORTAL_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 84587 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MORTAL_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 84588 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MORTAL_STRIKE;
	}
/*	sp = dbcSpell.LookupEntryForced( 84584 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 84585 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 84586 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	} */

	//Rude Interruption
	sp = dbcSpell.LookupEntryForced( 61216 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_INTERRUPT_EVENT | PROC_ON_NOT_VICTIM;
		sp->ProcOnNameHash[0] = SPELL_HASH_PUMMEL;
	}
	sp = dbcSpell.LookupEntryForced( 61221 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_INTERRUPT_EVENT | PROC_ON_NOT_VICTIM;
		sp->ProcOnNameHash[0] = SPELL_HASH_PUMMEL;
	}

	//Incite
	sp = dbcSpell.LookupEntryForced( 50685 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEROIC_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 50686 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEROIC_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 50687 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEROIC_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 86627 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
		sp->procCharges = 1;
	}
		
	//Heavy Repercussions
	sp = dbcSpell.LookupEntryForced( 86894 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2; //mod shield block value 2 as flat value that will mod shield slam
	sp = dbcSpell.LookupEntryForced( 86896 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2; //mod shield block value 2 as flat value that will mod shield slam

	//Bladestorm - Whirlwind
	sp = dbcSpell.LookupEntryForced( 46924 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectMiscValue = (1<<(MECHANIC_CHARMED-1))|(1<<(MECHANIC_DISORIENTED-1))|(1<<(MECHANIC_DISTRACED-1))|(1<<(MECHANIC_FLEEING-1))|(1<<(MECHANIC_GRIPPED-1))|(1<<(MECHANIC_ROOTED-1))|(1<<(MECHANIC_SLOWED-1))|(1<<(MECHANIC_SILENCED-1))|(1<<(MECHANIC_ASLEEP-1))|(1<<(MECHANIC_ENSNARED-1))|(1<<(MECHANIC_STUNNED-1))|(1<<(MECHANIC_FROZEN-1))|(1<<(MECHANIC_INCAPACIPATED-1))|(1<<(MECHANIC_POLYMORPHED-1))|(1<<(MECHANIC_BANISHED-1))|(1<<(MECHANIC_SHACKLED-1))|(1<<(MECHANIC_HORRIFIED-1))|(1<<(MECHANIC_INTERRUPTED-1))|(1<<(MECHANIC_DAZED-1))|(1<<(MECHANIC_SAPPED-1));
	}
	sp = dbcSpell.LookupEntryForced( 50622 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectImplicitTargetA = sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;
		sp->eff[1].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex;
	}
	//Unshackled Fury - Increases the benefit of abilities that cause or require you to be enraged by 37.6%. Each point of Mastery increases enrage effects by an additional 4.70%.
	sp = dbcSpell.LookupEntryForced( 76856 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 38;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
		sp->eff[2].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Strikes of Opportunity - Grants a 16% chance for your melee attacks to instantly trigger an additional melee attack for 100% normal damage.  Each point of Mastery increases this chance by 2%.
	sp = dbcSpell.LookupEntryForced( 76838 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 100;	//we will calc new chance on the fly
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 76858;	
		sp->eff[0].EffectBasePoints = 16;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	sp = dbcSpell.LookupEntryForced( 76858 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//allow another proc on this proc
	//Critical Block - Increases your chance to block by 12% and your chance to critically block by 12%.  Each point of Mastery increases your block chance by an additional 1.5% and your critical block chance by an additional 1.5%.
	sp = dbcSpell.LookupEntryForced( 76857 );
	//if( sp != NULL )
		sp->eff[0].EffectBasePoints = 12;
	//Heroic Leap
	sp = dbcSpell.LookupEntryForced( 6544 );
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
//		sp->eff[1].Effect = SPELL_EFFECT_DUMMY;	
//		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	//Inner Rage - idiot messed up helper spell to enable client side spell icon click
/*	sp = dbcSpell.LookupEntryForced( 11560 );
	//if(sp != NULL)
	{
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp->procCharges = 1;	//to let it stack with cast spell
	} */
	//inner rage
/*	sp = dbcSpell.LookupEntryForced( 1134 );
	//if(sp != NULL)
	{
		sp2 = dbcSpell.LookupEntryForced( 845 ); //cleave
		sp2 = dbcSpell.LookupEntryForced( 78 ); //heroic strike
		sp->eff[0].EffectSpellGroupRelation[0] |= sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] |= sp2->SpellGroupType[2]; 
		sp->eff[0].EffectSpellGroupRelation[0] |= sp3->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] |= sp3->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] |= sp3->SpellGroupType[2]; 
	} */
	//Enraged Regeneration
	sp = dbcSpell.LookupEntryForced( 55694 );
	//if(sp != NULL)
	{
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
		sp->eff[0].EffectBasePoints *= 100;
		sp->c_is_flags2 &= ~SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->SpellGroupType[1] &= ~134218752; //this is Glyph of Bloody Healing and should not mod this spell
	}
	//Second Wind
	sp = dbcSpell.LookupEntryForced( 29841 );
	//if(sp != NULL)
	{
//		sp->c_is_flags2 &= ~SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
	}
	sp = dbcSpell.LookupEntryForced( 29842 );
	//if(sp != NULL)
	{
//		sp->c_is_flags2 &= ~SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
	}
	//Blood Craze
	sp = dbcSpell.LookupEntryForced( 16488 );
	//if(sp != NULL)
	{
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints * 100 / 2;
	}
	sp = dbcSpell.LookupEntryForced( 16490 );
	//if(sp != NULL)
	{
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints * 100 / 2;
	}
	sp = dbcSpell.LookupEntryForced( 16491 );
	//if(sp != NULL)
	{
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints * 100 / 2;
	}
	// Insert warrior spell fixes here
/*		//Shockwave
		sp = dbcSpell.LookupEntryForced( 46968 );
		//if(sp != NULL)
			sp->GetSpellDMGType() = SPELL_DMG_TYPE_MELEE;
		//Concussion Blow
		sp = dbcSpell.LookupEntryForced( 12809 );
		//if(sp != NULL)
			sp->GetSpellDMGType() = SPELL_DMG_TYPE_MELEE;
		//Thunder Clap
		sp = dbcSpell.LookupEntryForced( 6343 );
		//if(sp != NULL)
			sp->GetSpellDMGType() = SPELL_DMG_TYPE_MELEE;
			*/
	//Thunder Clap
	sp = dbcSpell.LookupEntryForced( 6343 );
	//if( sp != NULL )
		sp->eff[0].EffectRadiusIndex = 14; //8  yards


		//Damage Shield
		sp = dbcSpell.LookupEntryForced( 59653 );
		//if(sp != NULL)
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_BLOCK_VICTIM | PROC_ON_MELEE_ATTACK_VICTIM;
			sp->eff[0].EffectTriggerSpell = 58872;	//self proc !
		}

		//Sword and Board
		sp = dbcSpell.LookupEntryForced( 46951 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_DEVASTATE;
			sp->ProcOnNameHash[1] = SPELL_HASH_REVENGE;
		}
		sp = dbcSpell.LookupEntryForced( 46952 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_DEVASTATE;
			sp->ProcOnNameHash[1] = SPELL_HASH_REVENGE;
		}
		sp = dbcSpell.LookupEntryForced( 46953 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_DEVASTATE;
			sp->ProcOnNameHash[1] = SPELL_HASH_REVENGE;
		}
		sp = dbcSpell.LookupEntryForced( 50227 );
		//if(sp != NULL)
		{
			sp->eff[1].Effect = SPELL_EFFECT_DUMMY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
		}

		//Improved Defensive Stance
		sp = dbcSpell.LookupEntryForced( 29593 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_BLOCK_VICTIM | PROC_ON_DODGE_VICTIM;
		sp = dbcSpell.LookupEntryForced( 29594 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_BLOCK_VICTIM | PROC_ON_DODGE_VICTIM;

		//juggernaut - dummy spall that procs crit converter
		CreateDummySpell( 65155 );
		//juggernaut
		sp = dbcSpell.LookupEntryForced( 64976 );
		sp2 = dbcSpell.LookupEntryForced( 65155 );
		//if( sp != NULL )
		{
			sp2->DurationIndex = sp->DurationIndex; 
			sp2->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp2->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp2->eff[0].EffectTriggerSpell = 65156;
			sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp2->NameHash = SPELL_HASH_JUGGERNAUT + 1;
			sp2->procFlags = PROC_ON_CAST_SPELL;
			sp2->procFlags2 |= PROC2_TARGET_SELF;
			sp2->procChance = 100;
			sp2->ProcOnNameHash[0] = SPELL_HASH_CHARGE;
			sp2->ProcOnNameHash[1] = SPELL_HASH_INTERCEPT;
			sp2->AttributesEx &= ~1024;
			sp2->Attributes |= ATTRIBUTES_PASSIVE;
		}
		//if(sp != NULL)
		{
			sp->AttributesEx &= ~1024;
			sp->Attributes |= ATTRIBUTES_PASSIVE;
			sp->chained_cast = sp2;
		}
		sp = dbcSpell.LookupEntryForced( 65156 );
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
		}

		//Warbringer
		sp = dbcSpell.LookupEntryForced( 57499 );
		//if(sp != NULL)
		{
			sp->AttributesEx &= ~1024;
			sp->Attributes |= ATTRIBUTES_PASSIVE;
		}

		//Warrior - Rampage
		sp = dbcSpell.LookupEntryForced( 29801 );
		//if(sp != NULL)
		{
//			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//			sp->procFlags = PROC_ON_MELEE_ATTACK;
//			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->RequiredShapeShift = 0;
		}
		//Warrior - Safeguard
		sp = dbcSpell.LookupEntryForced( 46945 );
		//if(sp != NULL)
		{
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_INTERVENE;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 46949 );
		//if(sp != NULL)
		{
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_INTERVENE;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 46946 );
		//if(sp != NULL)
			sp->rangeIndex = 4;	//30 yards
		sp = dbcSpell.LookupEntryForced( 46947 );
		//if(sp != NULL)
			sp->rangeIndex = 4;	//30 yards
		//Warrior - Gag Order
		sp = dbcSpell.LookupEntryForced( 12311 );
		//if(sp != NULL)
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_PUMMEL;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HEROIC_THROW;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 12958 );
		//if(sp != NULL)
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_PUMMEL;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HEROIC_THROW;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		//Warrior - Shattering Throw
		sp = dbcSpell.LookupEntryForced( 64382 );
		//if(sp != NULL)
		{
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME;	//or just scripted
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME;	//or just scripted
		}
//		sp = dbcSpell.LookupEntryForced( 64380 );
		//if(sp != NULL)
//		{
//			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME;	//or just scripted
//			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME;	//or just scripted
//		}

		//Warrior - Revenge
//		sp = dbcSpell.LookupEntryForced( 6572 );
		//if(sp != NULL)
//			sp->AP_spell_bonus_base[0] = 0.31f;

		//Warrior - Improved Revenge
		sp = dbcSpell.LookupEntryForced( 12797 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->ProcOnNameHash[0] = SPELL_HASH_REVENGE;
		}
		sp = dbcSpell.LookupEntryForced( 12799 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->ProcOnNameHash[0] = SPELL_HASH_REVENGE;
		}

		//Warrior - Anger Management
		sp = dbcSpell.LookupEntryForced( 12296 );
		//if(sp != NULL)
			sp->eff[0].EffectBasePoints = 100 * 5; //1 rage per 3 seconds. War regen is 3 sec already. Multiply by 5 because we divide for mana

		//Warrior - Sudden Death
		sp = dbcSpell.LookupEntryForced( 29723 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 60000 / 3; //procchance
		}
		sp = dbcSpell.LookupEntryForced( 29725 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 60000 / 6; //procchance
		}
//		sp = dbcSpell.LookupEntryForced( 52437 );
		//if(sp != NULL)
//			sp->procCharges = 0;	//the proc expires on time and not on next hit or cast
		
		//Furious Attacks
		sp = dbcSpell.LookupEntryForced( 46910 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->proc_interval = 5000;
		}
		sp = dbcSpell.LookupEntryForced( 56112 );
		//if(sp != NULL)
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
/*		sp = dbcSpell.LookupEntryForced( 46911 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->proc_interval = 2000;
		}*/

		//Warrior - Bloodsurge
		sp = dbcSpell.LookupEntryForced( 46913 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_BLOODTHIRST;
		}
		sp = dbcSpell.LookupEntryForced( 46914 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_BLOODTHIRST;
		}
		sp = dbcSpell.LookupEntryForced( 46915 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_BLOODTHIRST;
		}
		sp = dbcSpell.LookupEntryForced( 46916 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK ;
			sp->procCharges = 1;
		}

		//Taste for Blood
		sp = dbcSpell.LookupEntryForced( 56636 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_MELEE_ATTACK_EVENT | PROC_ON_NOT_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_REND;
			sp->proc_interval = 7000;
		}
		sp = dbcSpell.LookupEntryForced( 56637 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_MELEE_ATTACK_EVENT | PROC_ON_NOT_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_REND;
			sp->proc_interval = 7000;
		}
		sp = dbcSpell.LookupEntryForced( 56638 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_MELEE_ATTACK_EVENT | PROC_ON_NOT_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_REND;
			sp->proc_interval = 7000;
		}
		sp = dbcSpell.LookupEntryForced( 60503 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->AuraInterruptFlags = 0;	//someone said this is getting removed all the time :S
			sp->procCharges = 1;		//1 overpower
			sp->DurationIndex = 105;	//9 sec duration
		}

		//Warrior - Enrage Procflags
		sp = dbcSpell.LookupEntryForced( 12317 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp = dbcSpell.LookupEntryForced( 13045 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp = dbcSpell.LookupEntryForced( 13046 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		/* Remove the charges only on melee attacks */
		sp = dbcSpell.LookupEntryForced( 12880 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp = dbcSpell.LookupEntryForced( 14201 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp = dbcSpell.LookupEntryForced( 14202 );
		//if(sp != NULL)
			sp->procFlags = PROC_ON_MELEE_ATTACK;

		//Warrior - Blood Craze Procflags
		sp = dbcSpell.LookupEntryForced( 16487 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 60000 / 1.8f;	//wowhead says 1.8 PPM
		}
		sp = dbcSpell.LookupEntryForced( 16489 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 60000 / 1.8f; //wowhead says 1.8 PPM
		}
		sp = dbcSpell.LookupEntryForced( 16492 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 60000 / 1.8f; //wowhead says 1.8 PPM
		}
	
		//Warrior - Deep Wounds
		sp = dbcSpell.LookupEntryForced( 12834 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectTriggerSpell = 12721;
		}
		sp = dbcSpell.LookupEntryForced( 12849 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectTriggerSpell = 12721;
		}
		sp = dbcSpell.LookupEntryForced( 12867 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectTriggerSpell = 12721;
		}
		sp2 = dbcSpell.LookupEntryForced( 12721 );
			sp2->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//needs to proc trauma
		sp = dbcSpell.LookupEntryForced( 12162 );
		//if(sp != NULL)
		{
			SpellEntryEffectCopy( sp2, sp, 0, 0 );
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		}
		sp = dbcSpell.LookupEntryForced( 12850 );
		//if(sp != NULL)
		{
			SpellEntryEffectCopy( sp2, sp, 0, 0 );
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		}
		sp = dbcSpell.LookupEntryForced( 12868 );
		//if(sp != NULL)
		{
			SpellEntryEffectCopy( sp2, sp, 0, 0 );
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		}

		//Warrior - Charge Rank 1
		sp = dbcSpell.LookupEntryForced(100);
		//if(sp != NULL)
		{
			sp->eff[1].Effect = SPELL_EFFECT_ENERGIZE;
			sp->eff[1].EffectMiscValue = POWER_TYPE_RAGE;
			sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->eff[2].EffectTriggerSpell = 7922;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		}
		sp2 = dbcSpell.LookupEntryForced(7922);
		//if(sp != NULL)
			sp2->rangeIndex = sp->rangeIndex;

		//Warrior - Blitz
		sp = dbcSpell.LookupEntryForced(80976);
		//if(sp != NULL)
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
		sp = dbcSpell.LookupEntryForced(80977);
		//if(sp != NULL)
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;

		//Warrior - Booming Voice
		sp = dbcSpell.LookupEntryForced(12321);
		//if(sp != NULL)
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp = dbcSpell.LookupEntryForced(12835);
		//if(sp != NULL)
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

		//Warrior - Sweeping Strikes
/*		sp = dbcSpell.LookupEntryForced(12328);
		//if(sp != NULL)
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell=26654;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procChance = 100;
		}*/

		//Warrior - Impending Victory
		sp = dbcSpell.LookupEntryForced(80128);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->ProcOnNameHash[0]= SPELL_HASH_DEVASTATE;
		}
		sp = dbcSpell.LookupEntryForced(80129);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->ProcOnNameHash[0]= SPELL_HASH_DEVASTATE;
		}
		sp = dbcSpell.LookupEntryForced(82368); //!! not sure this is supposed to get removed
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			SpellEntryEffectCopy( sp, sp, 0, 1 );
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS; //this new insta victory rush is nerfed version of the original
			sp->procCharges = 1;	
		}

		//Warrior - Thunderstruck
		sp = dbcSpell.LookupEntryForced(80979);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0]= SPELL_HASH_THUNDER_CLAP;
		}
		sp = dbcSpell.LookupEntryForced(80980);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0]= SPELL_HASH_THUNDER_CLAP;
		}
		sp = dbcSpell.LookupEntryForced(87096);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
			sp->eff[0].EffectSpellGroupRelation[0] = sp->eff[0].EffectSpellGroupRelation[1];
			sp->eff[0].EffectSpellGroupRelation[1] = 0;	//strange seems like mask 1 was actually ment to be mask 0
		}

		//Warrior - Executioner
		sp = dbcSpell.LookupEntryForced(20502);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->ProcOnNameHash[0]= SPELL_HASH_EXECUTE;
		}
		sp = dbcSpell.LookupEntryForced(20503);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->ProcOnNameHash[0]= SPELL_HASH_EXECUTE;
		}

		//Warrior - Improved Hamstring Rank 1
		sp = dbcSpell.LookupEntryForced(12289);
		//if(sp != NULL)
		{
			sp->eff[0].EffectTriggerSpell=23694;// Improved Hamstring : Immobilized. 5 seconds remaining.
			sp->procFlags = PROC_ON_PRE_CAST_SPELL;
			sp->ProcOnNameHash[0]= SPELL_HASH_HAMSTRING;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->proc_interval = 1000;
			sp->eff[0].EffectBasePoints = 60000;
		}
		//Warrior - Improved Hamstring Rank 2
		sp = dbcSpell.LookupEntryForced(12668);
		//if(sp != NULL)
		{
			sp->eff[0].EffectTriggerSpell=23694;// Improved Hamstring : Immobilized. 5 seconds remaining.
			sp->procFlags = PROC_ON_PRE_CAST_SPELL;
			sp->ProcOnNameHash[0]= SPELL_HASH_HAMSTRING;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->proc_interval = 1000;
			sp->eff[0].EffectBasePoints = 30000;
		}
		sp = dbcSpell.LookupEntryForced(23694);
		//if(sp != NULL)
			sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN; //unless this is so, talent will never work
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;

		//Warrior - Retaliation
		sp = dbcSpell.LookupEntryForced( 20230 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA; //aura
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 20240; 
			sp->proc_interval = 0;	//duration is too short to put it on cooldown
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM; //add procflag here since this was not processed with the others !
		}

		//"bloodthirst" new version is ok but old version is wrong from now on :(
		sp = dbcSpell.LookupEntryForced( 23881 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = 64; //cast on us, it is good
			sp->eff[1].EffectTriggerSpell = 23885; //evil , blizz is the idiot
		}
		sp2 = dbcSpell.LookupEntryForced( 23885 );
		{
			sp2->eff[1].EffectBasePoints = sp->eff[1].EffectBasePoints; //inherit heal pct amount
			sp2->procCharges = 3;
		}
		//rend
		sp = dbcSpell.LookupEntryForced( 772 );
		//if( sp != NULL )
		{
//			sp->MechanicsType = MECHANIC_BLEEDING;
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[0].Effect = SPELL_EFFECT_SCHOOL_DAMAGE;	//insta dmg part
			sp->eff[0].EffectApplyAuraName = 0;
//			sp->eff[0].EffectBasePoints *= 5; //wtf ?
		}

		//warrior - second wind should trigger on self
		sp = dbcSpell.LookupEntryForced( 29841 );
		//if( sp != NULL )
		{
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 10000;
		}
		sp = dbcSpell.LookupEntryForced( 29842 );
		//if( sp != NULL )
		{
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 10000;
		}

		//warrior - Berserker Rage
		sp = dbcSpell.LookupEntryForced( 18499 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;//Forcing a dummy aura, so we can add the missing 4th effect.
			sp->eff[1].Effect = 0;
			sp->eff[2].Effect = 0;
		}

		//warrior - Blood Frenzy
		sp = dbcSpell.LookupEntryForced( 29836 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->eff[0].Effect = SPELL_EFFECT_NULL;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 30069;	//take additional x% pct dmg. but also script the proc event to cast the mechanic dmg and rage energize
//			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_REND;
//			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_DEEP_WOUND;
			sp->procChance = 100;	//we will script this
		}
		sp = dbcSpell.LookupEntryForced( 29859 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->eff[0].Effect = SPELL_EFFECT_NULL;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 30070;	//take additional x% pct dmg. but also script the proc event to cast the mechanic dmg and rage energize
//			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_REND;
//			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_DEEP_WOUND;
			sp->procChance = 100;	//we will script this
		}
		sp = dbcSpell.LookupEntryForced( 30069 );
		//if( sp != NULL )
		{
			sp->DurationIndex = 3;	//default is infinit
//			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_MELEE_DAMAGE_TAKEN_PCT;
//			sp->eff[1].EffectMechanic = MECHANIC_BLEEDING;
		}
		sp = dbcSpell.LookupEntryForced( 30070 );
		//if( sp != NULL )
		{
			sp->DurationIndex = 3;	//default is infinit
//			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_MELEE_DAMAGE_TAKEN_PCT;
//			sp->eff[1].EffectMechanic = MECHANIC_BLEEDING;
		}
		sp = dbcSpell.LookupEntryForced( 46856 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMechanic = MECHANIC_BLEEDING;
			sp->eff[0].EffectBasePoints = 30;
		}

		//warrior - Unbridled Wrath
/*		sp = dbcSpell.LookupEntryForced( 12322 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}*/

		// Insert warrior spell fixes here
		// Wrecking Crew Rank 1
		sp = dbcSpell.LookupEntryForced( 46867 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MORTAL_STRIKE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 56611 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MORTAL_STRIKE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 56612 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MORTAL_STRIKE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		//Warrior - Overpower Rank 1
		sp = dbcSpell.LookupEntryForced(7384);
		//if(sp != NULL)
			sp->Attributes |= ATTRIBUTES_CANT_BE_DPB;

		//Heroic Throw
		sp = dbcSpell.LookupEntryForced( 57755 );
		//if( sp != NULL )
			sp->eff[0].Effect = SPELL_EFFECT_SCHOOL_DAMAGE;
		//Heroic Fury
		sp = dbcSpell.LookupEntryForced( 60970 );
		//if( sp != NULL )
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
		//Shockwave Damage
		sp = dbcSpell.LookupEntryForced( 46968 );
		//if(sp!=NULL)
			SpellEntryEffectSwap(sp,sp,0,1);	//first damage then stun so dmg would not remove stun
		//Ranger: Intervene stop attack
		sp = dbcSpell.LookupEntryForced( 3411 );
		//if( sp != NULL )
		{
			sp->Attributes |= ATTRIBUTES_STOP_ATTACK;
		}

		//////////////////////////////////////////
		// DRUID								//
		//////////////////////////////////////////

		//Moonfire
		sp = dbcSpell.LookupEntryForced(8921); 
		//if( sp != NULL )
			sp->AttributesExC &= ~CAN_PERSIST_AND_CASTED_WHILE_DEAD;

		//Genesis
		sp = dbcSpell.LookupEntryForced(57810); 
		//if( sp != NULL )
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp = dbcSpell.LookupEntryForced(57811); 
		//if( sp != NULL )
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp = dbcSpell.LookupEntryForced(57812); 
		//if( sp != NULL )
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;

		//Lifebloom
		sp = dbcSpell.LookupEntryForced(33763); 
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_HEAL; //so that calculate effect would work
//			sp->eff[1].EffectApplyAuraName = sp->eff[0].EffectApplyAuraName; //so that calculate effect would work
//			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_NONE; //so that calculate effect would work
//			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE; //so that calculate effect would work
		}

		//Thick Hide
		sp = dbcSpell.LookupEntryForced(16929); 
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_BEAR-1));
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
		}
		sp = dbcSpell.LookupEntryForced(16930); 
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_BEAR-1));
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
		}
		sp = dbcSpell.LookupEntryForced(16931); 
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_BEAR-1));
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
		}

		//Ferocious Bite
		sp = dbcSpell.LookupEntryForced(22568); 
		//if( sp != NULL )
			sp->eff[1].EffectBasePoints = 35;
		//Ravage
		sp = dbcSpell.LookupEntryForced(6785); 
		//if( sp != NULL )
		{
			sp->AttributesExB |= FLAGS3_REQ_BEHIND_TARGET;
			sp->FacingCasterFlags |= CASTER_FACE_FACING;
		}
		//Shred
		sp = dbcSpell.LookupEntryForced(5221); 
		//if( sp != NULL )
		{
			sp->AttributesExB |= FLAGS3_REQ_BEHIND_TARGET;
			sp->FacingCasterFlags |= CASTER_FACE_FACING;
		}

		//Aggression
		sp = dbcSpell.LookupEntryForced(84735); 
		//if( sp != NULL )
		{
			sp->Attributes |= ATTRIBUTES_PASSIVE;
			sp->RequiredShapeShift = 0;
		}
		//swiftmend
/*		sp = dbcSpell.LookupEntryForced(18562); 
		//if( sp != NULL )
		{
			sp->Spell_value_is_scripted = true;
			SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		}*/
		//Flight Form
		sp = dbcSpell.LookupEntryForced(33943); 
		//if( sp != NULL )
		{
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_DIRECT_DAMAGE | AURA_INTERRUPT_ON_ENTER_COMBAT | AURA_INTERRUPT_ON_HOSTILE_SPELL_INFLICTED | AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_ENTER_WATER | AURA_INTERRUPT_ON_CAST_SPELL;
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_ENTER_WATER | AURA_INTERRUPT_ON_CAST_SPELL;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
		}
		//Swift Flight Form
		sp = dbcSpell.LookupEntryForced(40120); 
		//if( sp != NULL )
		{
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_DIRECT_DAMAGE | AURA_INTERRUPT_ON_ENTER_COMBAT | AURA_INTERRUPT_ON_HOSTILE_SPELL_INFLICTED | AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_ENTER_WATER | AURA_INTERRUPT_ON_CAST_SPELL;
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_ENTER_WATER | AURA_INTERRUPT_ON_CAST_SPELL;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
		}

		//Shooting Stars
		sp = dbcSpell.LookupEntryForced(93398); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_CAST_SPELL ;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_INSECT_SWARM;
		}
		sp = dbcSpell.LookupEntryForced(93399); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_CAST_SPELL ;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_INSECT_SWARM;
		}
		//Lunar Shower
		sp = dbcSpell.LookupEntryForced(33603); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_SUNFIRE;
		}
		sp = dbcSpell.LookupEntryForced(33604); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_SUNFIRE;
		}
		sp = dbcSpell.LookupEntryForced(33605); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_SUNFIRE;
		}

		//Skull Bash - bear
		sp = dbcSpell.LookupEntryForced(80964); 
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_CHARGE;
			sp->eff[1].Effect = SPELL_EFFECT_INTERRUPT_CAST;
			sp->eff[1].EffectMechanic = MECHANIC_INTERRUPTED;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->DurationIndex = AURA_DURATION_INDEX_5_SECONDS;
		}
		//Skull Bash - cat
		sp = dbcSpell.LookupEntryForced(80965); 
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_CHARGE;
			sp->eff[1].Effect = SPELL_EFFECT_INTERRUPT_CAST;
			sp->eff[1].EffectMechanic = MECHANIC_INTERRUPTED;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->DurationIndex = AURA_DURATION_INDEX_5_SECONDS;
		}
		//Tranquility
		sp = dbcSpell.LookupEntryForced(44203); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_RAID_INJURED_MULTI;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_CUSTOM_RAID_INJURED_MULTI;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		}

		//Feral charge -> spawns an npc ? Remove that
		sp = dbcSpell.LookupEntryForced(49376); 
		if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_CHARGE;	
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
		}
		//Feral charge ( bear stun )-> are you sure this should not break on dmg ?
		sp = dbcSpell.LookupEntryForced( 45334 ); 
		if( sp != NULL )
			sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN; 

		//Wild Growth
		sp = dbcSpell.LookupEntryForced(48438); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_RAID_INRANGE;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 10;	//30 yards ?
			sp->rangeIndex = 5;	//40 yards
			sp->MaxAffectedTargets = 5;
//			sp->eff[1].Effect = SPELL_EFFECT_NULL;	
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;	//PeriodicDummy
			sp->eff[1].EffectAmplitude = MIN( sp->eff[0].EffectAmplitude - 70, sp->eff[0].EffectAmplitude * 95 / 100 );	//tick before the heal to mod it's value
//			sp->eff[2].Effect = SPELL_EFFECT_NULL;	
		}

		//Intensity
		sp = dbcSpell.LookupEntryForced(17106); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ENRAGE;
		}
		sp = dbcSpell.LookupEntryForced(17107); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ENRAGE;
		}
		sp = dbcSpell.LookupEntryForced(17108); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ENRAGE;
		}

		//savage roar -> merge chain spell
		sp = dbcSpell.LookupEntryForced(52610); 
		sp2 = dbcSpell.LookupEntryForced(62071); 
		//if( sp != NULL )
			sp->eff[1].EffectApplyAuraName = sp2->eff[0].EffectApplyAuraName;

		//Force of Nature
		sp = dbcSpell.LookupEntryForced(33831); 
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_INHERITING_LEVEL;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF; //some land under target is used that gathers multiple targets ...
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_NONE;
		}

		// Spell 22570 (Maim Rank 1)
//		sp = dbcSpell.LookupEntryForced(22570);
		//if( sp != NULL )
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;

	//////////////////////////////////////////
	// PALADIN								//
	//////////////////////////////////////////

	// Insert paladin spell fixes here

	//Hand of Freedom
	sp = dbcSpell.LookupEntryForced( 1044 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//		sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED;	//video proved. BUT players QQed a lot so it got removed again
	}
	//Holy Wrath
	sp = dbcSpell.LookupEntryForced( 2812 );
	//if( sp != NULL )
	{
		if( sp->eff[0].EffectSpellPowerCoef == 0.0010000000f || sp->eff[0].EffectSpellPowerCoef == SPELL_EFFECT_MAGIC_UNDECIDED_SPELL_POWER_COEFF )
			sp->eff[0].EffectSpellPowerCoef = 0.61f;
//		if( sp->SpellTargetRestrictionsId == 0 )
//			sp->SpellTargetRestrictionsId = 2921;
	}

	//Seals of Command
	sp = dbcSpell.LookupEntryForced( 85126 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
//		sp->ProcOnNameHash[0] = SPELL_HASH_SEAL_OF_RIGHTEOUSNESS;
//		sp->ProcOnNameHash[1] = SPELL_HASH_SEAL_OF_TRUTH;
//		sp->ProcOnNameHash[1] = SPELL_HASH_CENSURE;	//this is casted by seal of truth
//		sp->ProcOnNameHash[2] = SPELL_HASH_SEAL_OF_JUSTICE;
	}

	//Plate Specialization
//	sp = dbcSpell.LookupEntryForced( 86525 );
	//if( sp != NULL )
//		sp->spell_learn_is_linked_to_talent = 0;

	//Turn Evil
/*	sp = dbcSpell.LookupEntryForced( 10326 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMechanic = MECHANIC_TURNED;
		sp->MechanicsType = MECHANIC_TURNED;
		sp->MechanicsTypeFlags = (1<<MECHANIC_TURNED);
	}/**/
	//Acts of Sacrifice
	sp = dbcSpell.LookupEntryForced( 85446 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,1,2);
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	sp = dbcSpell.LookupEntryForced( 85795 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,1,2);
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	//Selfless Healer
	sp = dbcSpell.LookupEntryForced( 85803 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 90811;	
		sp->ProcOnNameHash[0] = SPELL_HASH_WORD_OF_GLORY;
		sp->procChance = 100;	
	}
	sp = dbcSpell.LookupEntryForced( 85804 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 90811;	
		sp->ProcOnNameHash[0] = SPELL_HASH_WORD_OF_GLORY;
		sp->procChance = 100;	
	}

	// Sanctity of Battle 
	sp = dbcSpell.LookupEntryForced( 25956 );
	sp2 = dbcSpell.LookupEntryForced( 35395 ); //Crusader Strike
	sp3 = dbcSpell.LookupEntryForced( 53385 ); //Divine Storm
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectAmplitude = 2000; //update every 2 seconds
		sp->eff[0].EffectMiscValue = SMT_COOLDOWN_DECREASE;
		sp->eff[0].EffectSpellGroupRelation[0] |= sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] |= sp2->SpellGroupType[2]; 
		sp->eff[0].EffectSpellGroupRelation[0] |= sp3->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] |= sp3->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] |= sp3->SpellGroupType[2]; 
	}
	// Cleanse 
	sp = dbcSpell.LookupEntryForced( 4987 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Hammer of Justice
	sp = dbcSpell.LookupEntryForced( 853 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Judgment 
//	sp = dbcSpell.LookupEntryForced( 5998 );
	//if( sp != NULL )
//		sp->FacingCasterFlags = 0;
	// Blessing of Kings 
	sp = dbcSpell.LookupEntryForced( 20217 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Beacon of Light
	sp = dbcSpell.LookupEntryForced( 53563 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Turn Evil
	sp = dbcSpell.LookupEntryForced( 10326 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Hand of Protection
	sp = dbcSpell.LookupEntryForced( 1022 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Hand of Freedom
	sp = dbcSpell.LookupEntryForced( 1044 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Divine Light
	sp = dbcSpell.LookupEntryForced( 82326 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Hand of Salvation
	sp = dbcSpell.LookupEntryForced( 1038 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Light of Dawn
	sp = dbcSpell.LookupEntryForced( 85222 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Hand of Sacrifice
	sp = dbcSpell.LookupEntryForced( 6940 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Blessing of Might
	sp = dbcSpell.LookupEntryForced( 19740 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//Word of Glory
/*	sp = dbcSpell.LookupEntryForced( 85673 );
	//if( sp != NULL )
	{
		sp->AttributesExC |= FLAGS4_PLAYER_RANGED_SPELLS;	//force cooldown update client side
		sp->RecoveryTime = 20000;
	}*/

	//Aura Mastery
	sp = dbcSpell.LookupEntryForced( 31821 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
	sp = dbcSpell.LookupEntryForced( 64364 );
	//if( sp != NULL )
		sp->spell_id_client = 31821;

	//Glyph of Dazing Shield
	sp = dbcSpell.LookupEntryForced( 56414 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT | PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK_EVENT;
		sp->proc_interval = 0;	//need to hit multiple targets !
		sp->ProcOnNameHash[0] = SPELL_HASH_AVENGER_S_SHIELD;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
	}

	//Clarity of Purpose
	sp = dbcSpell.LookupEntryForced( 85462 );
	//if( sp != NULL )
		sp->RequiredShapeShift = 0;
	sp = dbcSpell.LookupEntryForced( 85463 );
	//if( sp != NULL )
		sp->RequiredShapeShift = 0;
	sp = dbcSpell.LookupEntryForced( 85464 );
	//if( sp != NULL )
		sp->RequiredShapeShift = 0;

	//Glyph of Seal of Truth
	sp = dbcSpell.LookupEntryForced( 56416 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
		sp->BGR_one_buff_on_target &= ~SPELL_TYPE_SEAL;
	}

	//Holy Shock - heal
	sp = dbcSpell.LookupEntryForced( 20473 );
	//if( sp != NULL )
	{
		sp->rangeIndex = 5; //40 yards
		sp->FacingCasterFlags = 0;
	}
	sp = dbcSpell.LookupEntryForced( 25914 );
	//if( sp != NULL )
		sp->rangeIndex = 5; //40 yards
	sp = dbcSpell.LookupEntryForced( 25912 );
	//if( sp != NULL )
		sp->rangeIndex = 3;	//20 yards

	//Repentance
	sp = dbcSpell.LookupEntryForced( 20066 );
	//if( sp != NULL )
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN; //SOT should not break it
//		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_DIRECT_DAMAGE;	//not yet implemented

	//Tower of Radiance
	sp = dbcSpell.LookupEntryForced( 84800 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
		sp->ProcOnNameHash[1] = SPELL_HASH_DIVINE_LIGHT;
		sp->ProcOnNameHash[2] = SPELL_HASH_HOLY_RADIANCE;
	}
	sp = dbcSpell.LookupEntryForced( 85511 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
		sp->ProcOnNameHash[1] = SPELL_HASH_DIVINE_LIGHT;
		sp->ProcOnNameHash[2] = SPELL_HASH_HOLY_RADIANCE;
	}
	sp = dbcSpell.LookupEntryForced( 85512 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
		sp->ProcOnNameHash[1] = SPELL_HASH_DIVINE_LIGHT;
		sp->ProcOnNameHash[2] = SPELL_HASH_HOLY_RADIANCE;
	}

	//Pursuit of Justice
	sp = dbcSpell.LookupEntryForced( 26022 );
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 89024;
		sp->procFlags = PROC_ON_SPELL_LAND_VICTIM;
	}
	sp = dbcSpell.LookupEntryForced( 26023 );
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 89024;
		sp->procFlags = PROC_ON_SPELL_LAND_VICTIM;
	}

	//Sanctified Wrath 
	sp = dbcSpell.LookupEntryForced( 53375 );
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57318;
		sp->ProcOnNameHash[0] = SPELL_HASH_AVENGING_WRATH;
		sp->procChance = 100;
		sp->proc_interval = 0;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
	}
	sp = dbcSpell.LookupEntryForced( 53376 );
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57318;
		sp->ProcOnNameHash[0] = SPELL_HASH_AVENGING_WRATH;
		sp->procChance = 100;
		sp->proc_interval = 0;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
	}
	sp = dbcSpell.LookupEntryForced( 90286 );
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57318;
		sp->ProcOnNameHash[0] = SPELL_HASH_AVENGING_WRATH;
		sp->procChance = 100;
		sp->proc_interval = 0;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
	}
	sp = dbcSpell.LookupEntryForced( 57318 );
	//if( sp != NULL )
	{
		sp->DurationIndex = dbcSpell.LookupEntryForced( 31884 )->DurationIndex;
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
	}

	//Holy Radiance 
	sp = dbcSpell.LookupEntryForced( 82327 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell = 86452;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA; 
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	sp = dbcSpell.LookupEntryForced( 86452 );
	//if( sp != NULL )
	{
		//heal friendlies near us
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA; 
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = 9; // 20 yards
	}

/*	//Light of Dawn
	sp = dbcSpell.LookupEntryForced( 85222 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectRadiusIndex = 10; // 30 yards, some say this is messed up, need to double check
		sp->eff[1].EffectRadiusIndex = 10; // 30 yards, some say this is messed up, need to double check
	} */

	//Speed of Light 
	sp = dbcSpell.LookupEntryForced( 85495 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 85497;	
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PROTECTION;
	}
	sp = dbcSpell.LookupEntryForced( 85498 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 85497;	
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PROTECTION;
	}
	sp = dbcSpell.LookupEntryForced( 85499 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 85497;	
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PROTECTION;
	}

	//Zealotry 
	sp = dbcSpell.LookupEntryForced( 85696 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 85696;		//!self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
	}

	//Long Arm of the Law
	sp = dbcSpell.LookupEntryForced( 87168 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87173;	
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
	}
	sp = dbcSpell.LookupEntryForced( 87172 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87173;	
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
	}

	//Guardian of Ancient Kings
	sp = dbcSpell.LookupEntryForced( 86150 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_SUMMON;
		sp->eff[0].EffectMiscValue = 46506;
		sp->DurationIndex = 9;	//30 seconds
		sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;
	}
	sp = dbcSpell.LookupEntryForced( 86700 );	//Ancient Power
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 86657 ); //Ancient Guardian
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;
		sp->eff[1].EffectMiscValue = 127;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;
	}

	//Touched by the Light
	sp = dbcSpell.LookupEntryForced( 53592 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = STAT_STRENGTH;
		sp->eff[1].EffectMiscValue = STAT_STRENGTH;
		sp->eff[2].EffectMiscValue = STAT_STAMINA;
	}

	//Shield of the Templar
	sp = dbcSpell.LookupEntryForced( 31848 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 31848;	//!!self proc!
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PLEA;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 31849 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 31848;	//!!self proc!
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PLEA;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 84854 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 31848;	//!!self proc!
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PLEA;
		sp->procChance = 100;
	}

	//Eternal Glory
	sp = dbcSpell.LookupEntryForced( 87163 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88676;
		sp->ProcOnNameHash[0] = SPELL_HASH_WORD_OF_GLORY;
	}
	sp = dbcSpell.LookupEntryForced( 87164 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88676;
		sp->ProcOnNameHash[0] = SPELL_HASH_WORD_OF_GLORY;
	}

	//Seal of Righteousness
	sp = dbcSpell.LookupEntryForced( 20154 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 100;
		sp->proc_interval = 1;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 25742;
	}
	sp = dbcSpell.LookupEntryForced( 25742 );
	//if( sp != NULL )
//		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//for Seals of Command

	//Protector of the Innocent
	sp = dbcSpell.LookupEntryForced( 20138 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 20139 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 20140 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
/*	sp = dbcSpell.LookupEntryForced( 94286 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
	}
	sp = dbcSpell.LookupEntryForced( 94288 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
	}
	sp = dbcSpell.LookupEntryForced( 94289 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
	} */

	//Holy Shield
/*	sp = dbcSpell.LookupEntryForced( 20925 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87342;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_OF_THE_RIGHTEOUS;
		sp->ProcOnNameHash[1] = SPELL_HASH_INQUISITION;
	}*/

	//Guarded by the Light
	sp = dbcSpell.LookupEntryForced( 53556 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88063;
	}
	sp = dbcSpell.LookupEntryForced( 85646 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88063;
	}

	//Enlightened Judgements
	sp = dbcSpell.LookupEntryForced( 53556 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[2].EffectAmplitude = 10000;	//yeah right, it is supposed to be a formula parameter not a ticking bomb
	}
	sp = dbcSpell.LookupEntryForced( 53557 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[2].EffectAmplitude = 10000;	//yeah right, it is supposed to be a formula parameter not a ticking bomb
	}
/*	sp = dbcSpell.LookupEntryForced( 87188 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
	}
	sp = dbcSpell.LookupEntryForced( 87189 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
	}*/

	//Divine Purpose
	sp = dbcSpell.LookupEntryForced( 85117 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 90174;
	}
	sp = dbcSpell.LookupEntryForced( 86172 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 90174;
	}
	sp = dbcSpell.LookupEntryForced( 90174 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Glyph of Templar's Verdict
	sp = dbcSpell.LookupEntryForced( 63220 );
	sp2 = dbcSpell.LookupEntryForced( 85256 );	//Templar's Verdict
	//if( sp != NULL )
	{
//		sp->eff[0].EffectSpellGroupRelation[0] |= sp2->SpellGroupType[0];
//		sp->eff[0].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
//		sp->eff[0].EffectSpellGroupRelation[2] |= sp2->SpellGroupType[2]; //should be 8192
		sp->eff[0].EffectMiscValue = SMT_DAMAGE_DONE;
	}

	//Crusade
	sp = dbcSpell.LookupEntryForced( 31866 );
	sp2 = dbcSpell.LookupEntryForced( 85256 );	//Templar's Verdict
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
//		sp->eff[1].EffectSpellGroupRelation[0] |= sp2->SpellGroupType[0];
//		sp->eff[1].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
//		sp->eff[1].EffectSpellGroupRelation[2] |= sp2->SpellGroupType[2]; //should be 8192
		sp->eff[1].EffectMiscValue = SMT_DAMAGE_DONE;
	}
	sp = dbcSpell.LookupEntryForced( 31867 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].EffectSpellGroupRelation[0] |= sp2->SpellGroupType[0];
		sp->eff[1].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
		sp->eff[1].EffectSpellGroupRelation[2] |= sp2->SpellGroupType[2];
		sp->eff[1].EffectMiscValue = SMT_DAMAGE_DONE;
	}
	sp = dbcSpell.LookupEntryForced( 31868 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].EffectSpellGroupRelation[0] |= sp2->SpellGroupType[0];
		sp->eff[1].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
		sp->eff[1].EffectSpellGroupRelation[2] |= sp2->SpellGroupType[2];
		sp->eff[1].EffectMiscValue = SMT_DAMAGE_DONE;
	}
	sp = dbcSpell.LookupEntryForced( 94686 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}

	//Conviction
	sp = dbcSpell.LookupEntryForced( 20049 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT | PROC_ON_RANGED_ATTACK | PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 20056 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT | PROC_ON_RANGED_ATTACK | PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 20057 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT | PROC_ON_RANGED_ATTACK | PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Grand Crusader
	sp = dbcSpell.LookupEntryForced( 75806 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_HAMMER_OF_THE_RIGHTEOUS;
		sp->procChance = 10;
		sp->proc_interval = 20000;
	}
	sp = dbcSpell.LookupEntryForced( 85043 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_HAMMER_OF_THE_RIGHTEOUS;
		sp->procChance = 20;
		sp->proc_interval = 20000;
	}
	sp = dbcSpell.LookupEntryForced( 85416 ); //put a new aura on us that will give holy power when we cast avanger's shield
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
//		sp->ProcOnNameHash[0] = SPELL_HASH_AVENGER_S_SHIELD; //!need to script this !
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 98057 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_AVENGER_S_SHIELD;
		sp->procChance = 100;
		sp->procCharges = 1;
	}

	//Judgement
	sp = dbcSpell.LookupEntryForced( 20271 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_SCRIPT_EFFECT;
		SetSpellPowerCoeffsAll( sp, 0.0f );
		sp->Spell_value_is_scripted = true;
		sp->sar.CasterAuraState = 0;
	}

	//Judgements of the Wise
	sp = dbcSpell.LookupEntryForced( 31878 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 31930;
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
		sp->procChance = 100;
	}
	//Judgements of the Bold
	sp = dbcSpell.LookupEntryForced( 89901 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 89906;
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
		sp->procChance = 100;
	}
		//Illuminated Healing - Your direct healing spells also place an absorb shield on your target for 10% of the amount healed lasting 8 sec.  Each point of Mastery increases the absorb amount by an addtional 1.25%.
		sp = dbcSpell.LookupEntryForced( 76669 );
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_HEAL_SPELL;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 86273;
			sp->eff[0].EffectBasePoints = 10;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
		}
		sp = dbcSpell.LookupEntryForced( 86273 );
		//if(sp != NULL)
			sp->eff[0].EffectSpellPowerCoef = SPELL_EFFECT_MAGIC_UNDECIDED_SPELL_POWER_COEFF;

		//Hand of Light - Your autoattacks have a 8% chance to grant Hand of Light, causing your next Holy Power ability to consume no Holy Power and to cast as if 3 Holy Power were consumed.  Each point of Mastery increases the chance by an additional 1%.
		//Your Templar's Verdict, Crusader Strike, and Divine Storm deal 0.0% additional damage as Holy damage. Each point of Mastery increases the damage by an additional 2.1%.
		sp = dbcSpell.LookupEntryForced( 76672 );
		//if(sp != NULL)
		{
			sp->procChance = 100;	//we will calculate this on the fly
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
			sp->eff[0].EffectTriggerSpell = 96172;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->ProcOnNameHash[0] = SPELL_HASH_TEMPLAR_S_VERDICT;
			sp->ProcOnNameHash[1] = SPELL_HASH_DIVINE_STORM;
			sp->ProcOnNameHash[2] = SPELL_HASH_CRUSADER_STRIKE; 
		}
		sp = dbcSpell.LookupEntryForced( 90174 );
		//if(sp != NULL)
		{
			sp->procCharges = 1;
			sp->procFlags = PROC_ON_CAST_SPELL;	//ability that eats up holy power
		}
		sp = dbcSpell.LookupEntryForced( 96172 );
		//if(sp != NULL)
		{
			sp->Spell_value_is_scripted = true;
//			sp->spell_can_crit = false;
			SetNoEffeCanCrit( sp );
		}
		//76671
		sp = dbcSpell.LookupEntryForced( 76671 );
		//if(sp != NULL)
		{
			sp->eff[0].EffectBasePoints = 18;	//description has it. Why don't we have it ?
		}
		//Consecration- this is required in case using the NPC spawn version only, or we can use old dynamic object version meanwhile
		sp = dbcSpell.LookupEntryForced( 26573 );
		//if(sp != NULL)
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 36946; //should deal dmg from 81297
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[2].Effect = SPELL_EFFECT_NULL;
		}
		//Consecration- this is required in case using the NPC spawn version
		sp = dbcSpell.LookupEntryForced( 81297 );
		//if(sp != NULL)
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMIES_AROUND_CASTER;
			sp->eff[0].EffectRadiusIndex = 13; //this might be already correct
		}
//		sp = dbcSpell.LookupEntryForced( 36946 );
		//if(sp != NULL)
		{
//			SetSpellPowerCoeffsAll(sp,0.0f);
//			sp->Spell_value_is_scripted = true;
		}

		//Blessing of Might
		sp = dbcSpell.LookupEntryForced(19740);
		//if(sp != NULL)
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 79101;	//this is used as damage
			sp->eff[0].EffectImplicitTargetB  = EFF_TARGET_ALL_RAID;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		}

		//Blessing of Kings
		sp = dbcSpell.LookupEntryForced(20217);
		//if(sp != NULL)
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 79062;	//this is used as damage
			sp->eff[0].EffectImplicitTargetB  = EFF_TARGET_ALL_RAID;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		}

		//Righteous Fury
		sp = dbcSpell.LookupEntryForced( 25780 );
		//if( sp != NULL )
			sp->eff[0].EffectBasePoints *= 3;	//hackfix to help paladins hold agro

		//Righteous Vengeance
/*		sp = dbcSpell.LookupEntryForced( 53380 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 61840;
		}
		sp = dbcSpell.LookupEntryForced( 53381 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 61840;
		}
		sp = dbcSpell.LookupEntryForced( 53382 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 61840;
		} */

		//Hammer of the Righteous
		sp = dbcSpell.LookupEntryForced( 53595 );
		//if( sp != NULL )
		{
			sp->eff[ 0 ].EffectChainTarget = 3;
//			SetSpellPowerCoeffsAll( sp, 0.0f );
//			sp->Spell_value_is_scripted = true; //this would be good for the spell
		}
		sp = dbcSpell.LookupEntryForced( 88263 );
		//if( sp != NULL )
		{
//			SetSpellPowerCoeffsAll( sp, 0.0f );
//			sp->Spell_value_is_scripted = true;
		}

		//Avenger's Shield
//		sp = dbcSpell.LookupEntryForced( 31935 );
		//if( sp != NULL )
//		{
//			SetSpellPowerCoeffsAll( sp, 0.0f );
//			sp->Spell_value_is_scripted = true;
//		}

		//Forbearance
		sp = dbcSpell.LookupEntryForced( 25771 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
//			sp->GetDispelType() = 66666; //this shoud be invalid
		}
		//divine shield
		sp = dbcSpell.LookupEntryForced( 642 );
		//if( sp != NULL )
		{
			sp->chained_cast = dbcSpell.LookupEntryForced( 25771 );
			sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_STUNNED;
			sp->sar.excludeCasterAuraSpell = 25771;
		}
		//Divine Protection
//		sp = dbcSpell.LookupEntryForced( 498 );
		//if( sp != NULL )
//			sp->chained_cast = dbcSpell.LookupEntryForced( 25771 );
		//Glyph of Divine Protection
		sp = dbcSpell.LookupEntryForced( 54924 );
		//if( sp != NULL )
		{
			SpellEntryEffectCopy(sp,sp,0,2);
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		}
		//Hand of Protection
		sp = dbcSpell.LookupEntryForced( 1022 );
		//if( sp != NULL )
			sp->chained_cast = dbcSpell.LookupEntryForced( 25771 );
		//Lay on Hands
		sp = dbcSpell.LookupEntryForced( 633 );
		//if( sp != NULL )
			sp->chained_cast = dbcSpell.LookupEntryForced( 25771 );

		// Divine storm
		sp = dbcSpell.LookupEntryForced( 53385 );
		//if( sp != NULL )
		{
			SpellEntryEffectSwap(sp,sp,2,0);
//			sp->eff[0].Effect = SPELL_EFFECT_WEAPON_PERCENT_DAMAGE;
//			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMIES_AROUND_CASTER;
//			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
//			sp->eff[0].EffectRadiusIndex = SPELL_RADIUS_INDEX_2YARDS;
			sp->eff[1].Effect = SPELL_EFFECT_HEAL;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
			sp->eff[1].EffectDieSides = -1;
			sp->MaxAffectedTargets = 3;
			sp->eff[1].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex; //8 yards
			sp->eff[2].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex; //8 yards
//			sp->eff[2].Effect = SPELL_EFFECT_NULL;
			sp->eff[2].EffectBasePoints = 0;
		}

		// Sacred Shield
		sp = dbcSpell.LookupEntryForced( 85285 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 60000;
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_SACRED_SHIELD;
		}
		sp = dbcSpell.LookupEntryForced( 96263 );
		//if( sp != NULL )
			sp->maxstack = 1; 

		// blessing of sanctuary
		sp = dbcSpell.LookupEntryForced( 20911 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_DODGE_VICTIM | PROC_ON_BLOCK_VICTIM;
			sp->procChance = 100;

			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;

			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 57319;	//restore mana or some energy
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
			sp->procFlags = PROC_ON_DODGE_VICTIM | PROC_ON_BLOCK_VICTIM;
		}

		//Seals of the Pure
/*		sp = dbcSpell.LookupEntryForced( 20224 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectSpellGroupRelation[1] |= 536870912;	// Seal of Righteousness
			sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;	
			sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;	
		}
		sp = dbcSpell.LookupEntryForced( 20225 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectSpellGroupRelation[1] |= 536870912;	// Seal of Righteousness
			sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;	
			sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;	
		}
		sp = dbcSpell.LookupEntryForced( 20330 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectSpellGroupRelation[1] |= 536870912;	// Seal of Righteousness
			sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;	
			sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;	
		}*/

		// Holy Shield
//		sp = dbcSpell.LookupEntryForced( 20925 ); // -- rank 1
		//if( sp != NULL )
//			sp->procFlags = PROC_ON_BLOCK_VICTIM;

		// paladin - Vindication
		sp = dbcSpell.LookupEntryForced( 26016 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
			sp->ProcOnNameHash[1] = SPELL_HASH_HAMMER_OF_THE_RIGHTEOUS;
		}
/*		sp = dbcSpell.LookupEntryForced( 9452 );
		//if( sp != NULL )
		{
			sp->procChance = 30;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		} */
		//Seal of Justice
		sp = dbcSpell.LookupEntryForced( 20164 );
		//if( sp != NULL )
		{
			sp->procChance = 100;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->proc_interval = 1;
			sp->eff[0].EffectTriggerSpell = 20170;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
            sp->BGR_one_buff_on_target |= SPELL_TYPE_SEAL;
			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		} 
		sp = dbcSpell.LookupEntryForced( 20170 );
		//if( sp != NULL )
		{
//			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//for Seals of Command
			SetSpellPowerCoeffsAll( sp, 0.0f );
		}

		// Seal of Truth ( Vengeance )
		sp = dbcSpell.LookupEntryForced( 31801 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
			sp->eff[0].EffectTriggerSpell = 31803;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
            sp->BGR_one_buff_on_target |= SPELL_TYPE_SEAL;
			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->proc_interval = 1;
		}
		//avoid boosting already calculated value
		sp = dbcSpell.LookupEntryForced( 31803 );
		//if( sp != NULL )
		{
//			SpellEntryEffectCopy(sp,sp,0,1);//we are going to frikkin script this to not spam combat log
//			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
//			sp->Spell_value_is_scripted = true; //need these to proc 
			SetSpellPowerCoeffsAll( sp, 0.0f );
			sp->eff[0].EffectSpellPowerCoef = 0.0100f * 5.0f / sp->quick_tickcount;
//			sp->AP_spell_bonus_base[0] = 0.0270f * 5.0f / sp->quick_tickcount;
//			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//for Seals of Command
		}
		//Seal of Insight
		sp = dbcSpell.LookupEntryForced( 20165 );
		//if( sp != NULL )
		{
            sp->BGR_one_buff_on_target |= SPELL_TYPE_SEAL;
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 60;
			sp->proc_interval = 6000;	//some say 30%;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;	
			SetSpellPowerCoeffsAll( sp, 0.0f);
			sp->Spell_value_is_scripted = true;
			SpellEntryEffectCopy(sp,sp,0,2);
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_DONE_PERCENT;
			sp->eff[2].EffectBasePoints = 0;	//do nothing unless Glyph of Seal of Insight says so
		}
		sp = dbcSpell.LookupEntryForced( 20167 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL; // whatever se are sending spell will accept it
			SetSpellPowerCoeffsAll( sp, 0.0f);
			sp->Spell_value_is_scripted = true;
		}
		//Glyph of Seal of Insight
		sp = dbcSpell.LookupEntryForced( 54943 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;

		// 	Denounce
		sp = dbcSpell.LookupEntryForced( 31825 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_EXORCISM;
		}
		sp = dbcSpell.LookupEntryForced( 85510 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_EXORCISM;
		}
		//the proc
		sp = dbcSpell.LookupEntryForced( 85509 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
		}

		//Daybreak
		sp = dbcSpell.LookupEntryForced( 88820 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
			sp->ProcOnNameHash[1] = SPELL_HASH_HOLY_LIGHT;
			sp->ProcOnNameHash[2] = SPELL_HASH_DIVINE_LIGHT;
		}
		sp = dbcSpell.LookupEntryForced( 88821 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
			sp->ProcOnNameHash[1] = SPELL_HASH_HOLY_LIGHT;
			sp->ProcOnNameHash[2] = SPELL_HASH_DIVINE_LIGHT;
		}
		//the proc
		sp = dbcSpell.LookupEntryForced( 88819 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
		}

/*		// 	Judgements of the Pure
		sp = dbcSpell.LookupEntryForced( 53695 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
		}
		sp = dbcSpell.LookupEntryForced( 53673 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
		}
		sp = dbcSpell.LookupEntryForced( 54151 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
		} */
		// 	Judgements of the Just
		sp = dbcSpell.LookupEntryForced( 53695 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 68055;
			sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
//			sp->eff[2].EffectMiscValue = SMT_DURATION;
//			sp->eff[2].EffectSpellGroupRelation[0] = 134217728;	//Seal of Justice
		}
		sp = dbcSpell.LookupEntryForced( 53696 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 68055;
			sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
//			sp->eff[2].EffectMiscValue = SMT_DURATION;
//			sp->eff[2].EffectSpellGroupRelation[0] = 134217728;	//Seal of Justice
		}
		/**********************************************************
		 * Reckoning
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 20177 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_BLOCK_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 9000; //avoid proc while it is active
		}
		sp = dbcSpell.LookupEntryForced( 20179 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_BLOCK_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 9000; //avoid proc while it is active
		}


		/**********************************************************
		 * Reckoning Effect
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 20178 );
		//if( sp != NULL )
		{
			sp->procChance = 100;
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 2000; //avoid proc while it is active
		}
		
		//Infusion of Light
		sp = dbcSpell.LookupEntryForced( 53569 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_SPELL_HIT_EVENT | PROC_ON_CRIT | PROC_ON_NOT_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procFlagsRemove = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_SHOCK;
		}
		sp = dbcSpell.LookupEntryForced( 53576 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_SPELL_HIT_EVENT | PROC_ON_CRIT | PROC_ON_NOT_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_SHOCK;
			sp->procFlagsRemove = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 53672 );
		//if( sp != NULL )
		{
			sp->procCharges = 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 54149 );
		//if( sp != NULL )
		{
			sp->procCharges = 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 25912 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
		sp = dbcSpell.LookupEntryForced( 25914 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
		//exorcism no extra bonuses pls
		sp = dbcSpell.LookupEntryForced( 879 );
		//if( sp != NULL )
		{
			sp->Spell_value_is_scripted = true;
			SetSpellPowerCoeffsAll(sp,0.0f);
		}

		//Paladin - Concentration Aura
		sp = dbcSpell.LookupEntryForced( 19746 );
		//if( sp != NULL )
			sp->RequiredShapeShift = 0;

		//Paladin - Ardent Defender
		//Reduce damage taken by $s1% for $d. While Ardent Defender is active, the next attack that would otherwise kill you will instead cause you to be healed for $s2% of your maximum health.
		sp = dbcSpell.LookupEntryForced( 31850 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;
			sp->eff[0].EffectMiscValue = 127;
			sp->eff[0].EffectBasePoints = -sp->eff[0].EffectBasePoints;
			//effect to save player from death
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 66235;
			sp->proc_interval = 18*10000;	//proc only once
			sp->procChance = 100;
			//effect to heal player on dmg
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//			sp->eff[1].EffectTriggerSpell = 66233;
//			sp->proc_interval = 1;	//all dmg
		}
		sp2 = dbcSpell.LookupEntryForced( 66235 );
		//if( sp != NULL )
		{
			sp2->spell_id_client = sp->Id;//maybe this way we will see it ?
			sp->Spell_value_is_scripted = true;
			SetSpellPowerCoeffsAll(sp,0.0f);
		}

		//Paladin - Sacred Duty
		sp = dbcSpell.LookupEntryForced( 53709 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_AVENGER_S_SHIELD;
		}
		sp = dbcSpell.LookupEntryForced( 53710 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_AVENGER_S_SHIELD;
		}

		//Paladin - Hand of Reckoning
		sp = dbcSpell.LookupEntryForced( 62124 );
		//if( sp != NULL )
		{
			SetSpellPowerCoeffsAll(sp, 0.0f );
			sp->Spell_value_is_scripted = true;
			sp->eff[0].Effect = SPELL_EFFECT_SCHOOL_DAMAGE;	//missing for some reason
		}


		//Paladin - Illumination
/*		sp = dbcSpell.LookupEntryForced( 20210 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT_VICTIM;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FLASH_OF_LIGHT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HOLY_LIGHT;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_HOLY_SHOCK;
			sp->eff[0].EffectTriggerSpell = 20272;	
		}
		sp = dbcSpell.LookupEntryForced( 20212 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT_VICTIM;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FLASH_OF_LIGHT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HOLY_LIGHT;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_HOLY_SHOCK;
			sp->eff[0].EffectTriggerSpell = 20272;	
		}
		sp = dbcSpell.LookupEntryForced( 20213 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT_VICTIM;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FLASH_OF_LIGHT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HOLY_LIGHT;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_HOLY_SHOCK;
			sp->eff[0].EffectTriggerSpell = 20272;	
		}*/

		//Paladin - Sacred Cleansing
		sp = dbcSpell.LookupEntryForced( 53551 );
		//if( sp != NULL )
		{
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[0].EffectMiscValueB = sp->eff[1].EffectMiscValue;
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		}

		//Paladin - Judgements of the Pure
		sp = dbcSpell.LookupEntryForced( 53671 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_JUDGEMENT;
		}
		sp = dbcSpell.LookupEntryForced( 53673 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_JUDGEMENT;
		}
		sp = dbcSpell.LookupEntryForced( 54151 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_JUDGEMENT;
		}

		/**********************************************************
		 * Eye for an Eye
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 9799 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM | PROC_ON_SPELL_CRIT_HIT_VICTIM;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 25997;
			SetSpellPowerCoeffsAll( sp, 0.0f);
			sp->Spell_value_is_scripted = true;
		}
		sp = dbcSpell.LookupEntryForced( 25988 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM | PROC_ON_SPELL_CRIT_HIT_VICTIM;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 25997;
			SetSpellPowerCoeffsAll( sp, 0.0f);
			sp->Spell_value_is_scripted = true;
		}
		sp = dbcSpell.LookupEntryForced( 25997 );
		//if( sp != NULL )
		{
			SetSpellPowerCoeffsAll( sp, 0.0f);
			sp->Spell_value_is_scripted = true;
		}

		/**********************************************************
		 * Blessed Life
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 31828 );
		//if( sp != NULL )
		{
//			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 8000;
		}
		sp = dbcSpell.LookupEntryForced( 31829 );
		//if( sp != NULL )
		{
//			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 8000;
		}

		//Paladin - Hammer of Justice - Interrupt effect
/*		sp = dbcSpell.LookupEntryForced( 853 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 32747;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		} */

		// paladin - Holy Guidance
/*		sp = dbcSpell.LookupEntryForced( 31837 );
		//if( sp != NULL )
			sp->eff[1].EffectMiscValueB = 3;	//increase healing by intellect
		sp = dbcSpell.LookupEntryForced( 31838 );
		//if( sp != NULL )
			sp->eff[1].EffectMiscValueB = 3;	//increase healing by intellect
		sp = dbcSpell.LookupEntryForced( 31839 );
		//if( sp != NULL )
			sp->eff[1].EffectMiscValueB = 3;	//increase healing by intellect
		sp = dbcSpell.LookupEntryForced( 31840 );
		//if( sp != NULL )
			sp->eff[1].EffectMiscValueB = 3;	//increase healing by intellect
		sp = dbcSpell.LookupEntryForced( 31841 );
		//if( sp != NULL )
			sp->eff[1].EffectMiscValueB = 3;	//increase healing by intellect
			*/

		// paladin - Sanctified Retribution
/*		sp = dbcSpell.LookupEntryForced( 31869 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		}*/

		//Paladin - Improved Lay on Hands
		//Last Word
		sp = dbcSpell.LookupEntryForced( 20234 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_WORD_OF_GLORY;
		}
		sp = dbcSpell.LookupEntryForced( 20235 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_WORD_OF_GLORY;
		}

		//Paladin - Crusader Strike
//		sp = dbcSpell.LookupEntryForced( 35395 );
		//if( sp != NULL )
//			sp->Attributes |= ATTRIBUTES_CANT_BE_DPB;

		//Replenishment
		sp = dbcSpell.LookupEntryForced( 57669 );
		//if( sp !=NULL )
			sp->eff[0].EffectAmplitude = 3000; // stop spamming combat log like  maniac with 10 mana regens

		//Paladin - Communion
		sp = dbcSpell.LookupEntryForced( 31876 );
		//if( sp !=NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			SpellEntryEffectCopy(sp,sp,1,0);
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 57669;
			sp->proc_interval = 10000;
			sp->procChance = 100;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_JUDGEMENT;
		}

		//Shield of the Righteous
		sp = dbcSpell.LookupEntryForced( 53600 );
		//if( sp !=NULL )
		{
			sp->c_is_flags2 |= SPELL_FLAG2_IS_DRAINING_ALL_POWER;
//			sp->AP_spell_bonus_base[0] = 0.10f;
//			SetSpellPowerCoeffsAll( sp, 0.0f );
//			sp->Spell_value_is_scripted = true;
		}
		//Templar's Verdict
		sp = dbcSpell.LookupEntryForced( 85256 );
		//if( sp !=NULL )
		{
			sp->c_is_flags2 |= SPELL_FLAG2_IS_DRAINING_ALL_POWER;
//			sp->Attributes |= ATTRIBUTES_CANT_BE_DPB;
		}
		//Inquisition
		sp = dbcSpell.LookupEntryForced( 84963 );
		//if( sp !=NULL )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_DRAINING_ALL_POWER;

		//Paladin - The Art of War
		sp = dbcSpell.LookupEntryForced( 53486 );
		//if( sp !=NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 2000;	//
		}
		sp = dbcSpell.LookupEntryForced( 53488 );
		//if( sp !=NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 2000;
		}
		sp = dbcSpell.LookupEntryForced( 87138 );
		//if( sp !=NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 2000;
		}
		sp = dbcSpell.LookupEntryForced( 59578 );
		//if( sp !=NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL; //charge removal
			sp->procCharges = 1;
			sp->eff[2].EffectMiscValue = SMT_MISC_EFFECT;	//mod effect 0 and 1 of exorcism
		}

  /*      // Paladin - Improved Devotion Aura
        sp = dbcSpell.LookupEntryForced( 20138 );
        //if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;	//for the armor
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	//for the heal
		}
        sp = dbcSpell.LookupEntryForced( 20139 );
        //if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;	//for the armor
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	//for the heal
		}
        sp = dbcSpell.LookupEntryForced( 20140 );
        //if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;	//for the armor
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	//for the heal
		}*/

        // Paladin - Devotion Aura
//        sp = dbcSpell.LookupEntryForced( 465 );
        //if( sp != NULL )
		{
//			SpellEntryEffectCopy(sp,sp,0,1);
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_PCT;
//			sp->eff[1].EffectBasePoints = 0;	//so that Improved Devotion Aura may mod it
		}

        // Paladin - Beacon of Light -> Light's Beacon
		// X casts spell on Y that periodically will cast spell on raid members
		// Light's Beacon is checking if players receive a heal spell, if caster is the
        sp = dbcSpell.LookupEntryForced( 53563 );
        //if( sp != NULL )
        {
			//create a copy so we cast it on target just for visual effect
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->eff[0].EffectTriggerSpell = 53652;	
			sp->procFlags = PROC_ON_HEAL_SPELL;
			sp->procChance = 100;
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_FOCUS_MAGIC;
        }
        sp = dbcSpell.LookupEntryForced( 53652 );
        //if( sp != NULL )
    		sp->Spell_value_is_scripted = true;	//we define this when we proc
	//////////////////////////////////////////
	// HUNTER								//
	//////////////////////////////////////////


	//Track Hidden
	sp = dbcSpell.LookupEntryForced( 19885 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectBasePoints = sp->eff[1].EffectBasePoints * 30 / 100;	//this is just too strong, almost completely removes stealth power
	}
		
	//Lick Your Wounds
	sp = dbcSpell.LookupEntryForced( 53426 );
	//if( sp != NULL )
	{
		sp->c_is_flags2 &= ~SPELL_FLAG2_IS_VALUE_OVER_TIME;
	}
	//Venom Web Spray
	sp = dbcSpell.LookupEntryForced( 54706 );
	//if( sp != NULL )
	{
		//it does break in MOP but not in Cata or wotlk
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}
	//Silverback
	sp = dbcSpell.LookupEntryForced( 62764 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 62800;
		sp->procChance = 100;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_GROWL;
	}
	sp = dbcSpell.LookupEntryForced( 62765 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 62801;
		sp->procChance = 100;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_GROWL;
	}

	//Wolverine Bite
	sp = dbcSpell.LookupEntryForced( 53508 );
	//if( sp != NULL )
		sp->sar.CasterAuraState |= AURASTATE_CRITICAL;

	//Owl's Focus
	sp = dbcSpell.LookupEntryForced( 53514 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SMACK;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_BITE;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_CLAW;
	}
	sp = dbcSpell.LookupEntryForced( 53516 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SMACK;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_BITE;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_CLAW;
	}

	//Feeding Frenzy
	sp = dbcSpell.LookupEntryForced( 53511 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53511;	//self proc !
		sp->proc_interval = 1;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 53512 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53511;	//self proc !
		sp->proc_interval = 1;
		sp->procChance = 100;
	}
	//Cornered
	sp = dbcSpell.LookupEntryForced( 52234 );
	//if( sp != NULL )
	{
//		sp->eff[0].Effect = SPELL_EFFECT_NULL;
//		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectAmplitude = 1000;
	}
	sp = dbcSpell.LookupEntryForced( 53497 );
	//if( sp != NULL )
	{
//		sp->eff[0].Effect = SPELL_EFFECT_NULL;
//		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectAmplitude = 1000;
	}
	//Wild Hunt
	sp = dbcSpell.LookupEntryForced( 62758 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->DurationIndex = 21;	//infinit
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 62758;	//self proc !
		sp->proc_interval = 1;
		sp->procChance = 100;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SMACK;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_BITE;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_CLAW;
	}
	sp = dbcSpell.LookupEntryForced( 62762 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->DurationIndex = 21;	//infinit
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 62758;	//self proc !
		sp->proc_interval = 1;
		sp->procChance = 100;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SMACK;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_BITE;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_CLAW;
	}
	//Call of the Wild
	sp = dbcSpell.LookupEntryForced( 53434 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET_MASTER;
	//Rabid
	sp = dbcSpell.LookupEntryForced( 53401 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Bloodthirsty
	sp = dbcSpell.LookupEntryForced( 54131 );
	//if( sp != NULL )
		sp->c_is_flags2 &= ~SPELL_FLAG2_IS_VALUE_OVER_TIME;

	// Scare Beast
	sp = dbcSpell.LookupEntryForced( 1513 );
		sp->FacingCasterFlags = 0;

	//Spirit Mend
	sp = dbcSpell.LookupEntryForced( 90361 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_STACKABLE_OTHER_CASTER_POS;
		sp->c_is_flags3 |= SPELL_FLAG3_IS_SKIP_REFRESH_SAME_AURAS_OTHERS;
	}

	//Longevity
	sp = dbcSpell.LookupEntryForced( 53262 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 53263 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 53264 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
	}

	//Spiked Collar
	sp = dbcSpell.LookupEntryForced( 53182 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_AUTO_ATTACK_DMG_PCT;
	sp = dbcSpell.LookupEntryForced( 53183 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_AUTO_ATTACK_DMG_PCT;
	sp = dbcSpell.LookupEntryForced( 53184 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_AUTO_ATTACK_DMG_PCT;

	//Tranquilizing Shot
	sp = dbcSpell.LookupEntryForced( 19801 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;

	//Revive Pet
	sp = dbcSpell.LookupEntryForced( 982 );
	//if( sp != NULL )
		if( sp->CastingTimeIndex == 7 )
			sp->CastingTimeIndex = 171;

	//Freezing Trap
	sp = dbcSpell.LookupEntryForced( 1499 );
	//if( sp != NULL )
		if( sp->eff[0].Effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT1 )
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON_OBJECT_SLOT2;
	sp = dbcSpell.LookupEntryForced( 60202 );
	//if( sp != NULL )
		if( sp->eff[0].Effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT1 )
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON_OBJECT_SLOT2;
	//Ice Trap
	sp = dbcSpell.LookupEntryForced( 13809 );
	//if( sp != NULL )
		if( sp->eff[0].Effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT1 )
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON_OBJECT_SLOT2;
	sp = dbcSpell.LookupEntryForced( 82940 );
	//if( sp != NULL )
		if( sp->eff[0].Effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT1 )
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON_OBJECT_SLOT2;
	//Snake Trap
	sp = dbcSpell.LookupEntryForced( 34600 );
	//if( sp != NULL )
		if( sp->eff[0].Effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT1 )
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON_OBJECT_SLOT3;
	sp = dbcSpell.LookupEntryForced( 82949 );
	//if( sp != NULL )
		if( sp->eff[0].Effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT1 )
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON_OBJECT_SLOT3;

	//Arcane Shot
	sp = dbcSpell.LookupEntryForced( 3044 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE;

	//Master's Call
	sp = dbcSpell.LookupEntryForced( 53271 );
	//if( sp != NULL )
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
	sp = dbcSpell.LookupEntryForced( 54216 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	//is this charge blizzlike ? Description says nothing about it

	//Intervene
	sp = dbcSpell.LookupEntryForced( 53476 );
	//if( sp != NULL )
	{
//		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 53476; //self proc
		sp->procChance = 100;
		sp->proc_interval = 0; //every DMG cause we are absorb
		sp->procCharges = 0;
	}

	//Mirrored Blades
	//apply and remove with detterence. Add a new buff that will proc on PROC_ON_IMMUNE_VICTIM
	sp = dbcSpell.LookupEntryForced( 83494 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL_EVENT | PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DETERRENCE;
		sp->eff[0].EffectTriggerSpell = 83495; //self proc
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procChance = 100;
		sp->proc_interval = 0;
	}
	sp = dbcSpell.LookupEntryForced( 83495 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL_EVENT | PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DETERRENCE;
		sp->eff[0].EffectTriggerSpell = 83495; //self proc
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procChance = 100;
		sp->proc_interval = 0;
	}
	// Point of No Escape
/*	sp = dbcSpell.LookupEntryForced( 53298 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_TRAP_TRIGGER;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53300;
//		sp->eff[0].EffectBasePoints = -sp->eff[0].EffectBasePoints;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procChance = 100;
		sp->proc_interval = 0;
	}
	sp = dbcSpell.LookupEntryForced( 53299 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_TRAP_TRIGGER | PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53300;
//		sp->eff[0].EffectBasePoints = -sp->eff[0].EffectBasePoints;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procChance = 100;
		sp->proc_interval = 0;
	}
	//ice trap - 13810 freezing trap - 3355
	CreateDummySpell( 53300 );
	sp2 = dbcSpell.LookupEntryForced( 53300 );
	//if( sp != NULL )
	{
		sp2->DurationIndex = 3; //1 min is freezing trap, but how much is ice trap ? Or we should remove if debuff is getting removed ?
		sp2->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp2->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
	} /**/
	// Point of No Escape
	sp = dbcSpell.LookupEntryForced( 53298 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	
		sp->eff[0].EffectSpellGroupRelation[0] |= sp->eff[1].EffectSpellGroupRelation[0];
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 53299 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	
		sp->eff[0].EffectSpellGroupRelation[0] |= sp->eff[1].EffectSpellGroupRelation[0];
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	//ice trap
	sp = dbcSpell.LookupEntryForced( 13810 );
	//if( sp != NULL )
		SpellEntryEffectSwap(sp,sp,1,2);

	// Bestial Discipline
	sp = dbcSpell.LookupEntryForced( 19590 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_POWER_REGEN_PERCENT;
		sp->eff[0].EffectMiscValue = POWER_TYPE_FOCUS;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
	}
	sp = dbcSpell.LookupEntryForced( 19592 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_POWER_REGEN_PERCENT;
		sp->eff[0].EffectMiscValue = POWER_TYPE_FOCUS;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
	}
	sp = dbcSpell.LookupEntryForced( 82687 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_POWER_REGEN_PERCENT;
		sp->eff[0].EffectMiscValue = POWER_TYPE_FOCUS;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
	}
	// Improved Mend Pet
	sp = dbcSpell.LookupEntryForced( 19572 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_DOT | PROC_ON_VICTIM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 24406; 
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MEND_PET;
//		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->procChance = sp->eff[0].EffectBasePoints;
//		sp->procChance *= 3; //should proc on each tick not just cast :(
	}
	sp = dbcSpell.LookupEntryForced( 19573 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_DOT | PROC_ON_VICTIM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 24406; 
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MEND_PET;
//		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->procChance = sp->eff[0].EffectBasePoints;
//		sp->procChance *= 3; //should proc on each tick not just cast :(
	}
	sp = dbcSpell.LookupEntryForced( 24406 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[0].EffectMiscValue = DISPEL_MAGIC;
		sp->eff[1].EffectMiscValue = DISPEL_CURSE;
	}
	// Glyph of Dazzled Prey
	sp = dbcSpell.LookupEntryForced( 56856 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_STEADY_SHOT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_COBRA_SHOT;
	}
	// Sic 'Em!
	sp = dbcSpell.LookupEntryForced( 83340 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83359; 
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ARCANE_SHOT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_AIMED_SHOT;	//what about instant version ?
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_EXPLOSIVE_SHOT;
	}
	sp = dbcSpell.LookupEntryForced( 83356 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 89388; 
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ARCANE_SHOT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_AIMED_SHOT;	//what about instant version ?
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_EXPLOSIVE_SHOT;
	}
	sp = dbcSpell.LookupEntryForced( 83359 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL; //charge removal
	}
	sp = dbcSpell.LookupEntryForced( 89388 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL; //charge removal
	}

	// Pin
	sp = dbcSpell.LookupEntryForced( 50245 );
	//if( sp != NULL )
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	// Lock Jaw
	sp = dbcSpell.LookupEntryForced( 90327 );
	//if( sp != NULL )
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;

	// Resistance is Futile
	sp = dbcSpell.LookupEntryForced( 82893 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procChance = 100;
		sp->proc_interval = 0;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83676; 
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HUNTER_S_MARK;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_MARKED_FOR_DEATH_53241;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_MARKED_FOR_DEATH_67823;
	}
	sp = dbcSpell.LookupEntryForced( 82894 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procChance = 100;
		sp->proc_interval = 0;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83676; 
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HUNTER_S_MARK;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_MARKED_FOR_DEATH_53241;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_MARKED_FOR_DEATH_67823;
	}
	sp = dbcSpell.LookupEntryForced( 83676 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
	sp = dbcSpell.LookupEntryForced( 82897 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; //charge removal
		sp->procCharges = 1;
	}

	//Ancient Hysteria
	sp = dbcSpell.LookupEntryForced( 90355 );
	sp2 = dbcSpell.LookupEntryForced( 95809 ); //insanity
	//if( sp != NULL )
	{
		sp->chained_cast = sp2;
		sp2->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
		sp2->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
	}
	//Focus Fire
	sp = dbcSpell.LookupEntryForced( 82692 );
	//if( sp != NULL )
	{
		if( sp->eff[0].EffectBasePoints == 3 )
			sp->eff[0].EffectBasePoints = 6;
		sp->eff[1].Effect = SPELL_EFFECT_ENERGIZE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->eff[1].EffectMiscValue = POWER_TYPE_FOCUS;
	}
	//Glyph of Concussive Shot
	sp = dbcSpell.LookupEntryForced( 56851 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 56851; //!self proc
		sp->procChance = 100;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CONCUSSIVE_SHOT;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
	}
	//Last Stand
	sp = dbcSpell.LookupEntryForced( 53478 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53479;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp = dbcSpell.LookupEntryForced( 53479 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 30;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	//Glyph of Kill Shot
	sp = dbcSpell.LookupEntryForced( 63067 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63067; //self proc
		sp->procChance = 100;
		sp->proc_interval = 6000;	//it's in the description
		sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_SPELL_HIT_EVENT;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_KILL_SHOT;
	}
	//Culling the Herd
	sp = dbcSpell.LookupEntryForced( 52858 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70893;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
	}
	sp = dbcSpell.LookupEntryForced( 61680 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70893;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
	}
	sp = dbcSpell.LookupEntryForced( 61681 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70893;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
	}

	//Roar of Sacrifice
	sp = dbcSpell.LookupEntryForced( 53480 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 67481;
		sp->procChance = 100;
		sp->proc_interval = 0; //all dmg
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
	}
	//Killing Streak
	sp = dbcSpell.LookupEntryForced( 82748 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 94006;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_HIT_EVENT;
		sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_KILL_COMMAND;
	}
	sp = dbcSpell.LookupEntryForced( 82749 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 94007;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_HIT_EVENT;
		sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_KILL_COMMAND;
	}

	//Fervor
	sp = dbcSpell.LookupEntryForced( 82726 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;

	//whatever dummy spell to make hunter spells cast 500 ms faster. Fucked up dbc data in 4.3.0 client
/*	sp = dbcSpell.LookupEntryForced( 56641 );
	sp = dbcSpell.LookupEntryForced( 77767 );
	sp = dbcSpell.LookupEntryForced( 19434 );
	sp = dbcSpell.LookupEntryForced( 2643 );
	sp = dbcSpell.LookupEntryForced( 5116 );
	sp = dbcSpell.LookupEntryForced( 19801 );
	sp = dbcSpell.LookupEntryForced( 20736 );
	sp = dbcSpell.LookupEntryForced( 75 );
	sp = dbcSpell.LookupEntryForced( 34490 );*/
	dbcSpell.LookupEntryForced( 3018 )->SpellGroupType[0] = dbcSpell.LookupEntryForced( 75 )->SpellGroupType[0]; //shoot / auto shoot
	CreateDummySpell( 56642 );
	sp2 = dbcSpell.LookupEntryForced( 56642 );
	//if( sp != NULL )
	{
		sp2->DurationIndex = 21;	//infinit
		sp2->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp2->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp2->eff[0].EffectMiscValue = SMT_CAST_TIME;
		sp2->eff[0].EffectBasePoints = -500;
		//Multi-Shot,Aimed Shot,Steady Shot,Cobra Shot,Silencing Shot,Concussive Shot,Tranquilizing Shot,Distracitng Shot,Auto Shot
		sp2->eff[0].EffectSpellGroupRelation[0] = 0x20000 | 0x1000 | 0x40000 | 0x200 | 0x01;
		sp2->eff[0].EffectSpellGroupRelation[1] = 0x01 | 0x20000;
		sp2->eff[0].EffectSpellGroupRelation[2] = 0x400000 | 0x100;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp2->AttributesEx &= ~1024;
		sp2->Attributes |= ATTRIBUTES_PASSIVE;
		sp2->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp2->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp2->eff[1].EffectMiscValue = SMT_RANGE;
		sp2->eff[1].EffectBasePoints = 10;
		sp2->eff[1].EffectSpellGroupRelation[0] = 1; //auto shoot 3018
		sp2->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
	}

	//Glyph of Freezing Trap
	sp = dbcSpell.LookupEntryForced( 56845 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 61394;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FREEZING_TRAP;
	}
	//Crouching Tiger, Hidden Chimera
	sp = dbcSpell.LookupEntryForced( 82898 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM | PROC_ON_SPELL_HIT_VICTIM_NOT_DOT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 82898;			//self proc
		sp->proc_interval = 2000;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 82899 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM | PROC_ON_SPELL_HIT_VICTIM_NOT_DOT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 82898;			//self proc
		sp->proc_interval = 2000;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}

	//Glyph of Raptor Strike
	sp = dbcSpell.LookupEntryForced( 63086 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_RAPTOR_STRIKE;
	}

	//One with Nature
	sp = dbcSpell.LookupEntryForced( 82682 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	sp = dbcSpell.LookupEntryForced( 82683 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	sp = dbcSpell.LookupEntryForced( 82684 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

	//Embrace of the Shale Spider
//	sp = dbcSpell.LookupEntryForced( 90363 );
	//if( sp != NULL )
//		sp->eff[0].EffectMiscValue = -1;	//i think spirit should not be moded ?

	//snake trap
	sp = dbcSpell.LookupEntryForced( 45145 );
	//if( sp != NULL )
	{
		//should try to agro the creature that triggered us
//		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 57879 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
	}

	// Improved Serpent Sting
	sp = dbcSpell.LookupEntryForced( 19464 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_CAST_SPELL_EVENT ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 83077;		
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SERPENT_STING;
		sp->proc_interval = 0;	//all multi shot targets need to receive this buff
	}
	sp = dbcSpell.LookupEntryForced( 82834 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_CAST_SPELL_EVENT ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 83077;		
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SERPENT_STING;
		sp->proc_interval = 0;	//all multi shot targets need to receive this buff
	}

	// trap launcher
	sp = dbcSpell.LookupEntryForced( 77769 );
	//if( sp != NULL )
	{
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1 | VISUALAURA_FLAG_VISIBLE_2 | VISUALAURA_FLAG_VISIBLE_3;
		sp->chained_cast = dbcSpell.LookupEntryForced( 82946 );
		sp->eff[0].EffectMiscValue = 1499;
		sp->eff[1].EffectMiscValue = 13813;
		sp->eff[2].EffectMiscValue = 13809;
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 82946 );
	//if( sp != NULL )
	{
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1 | VISUALAURA_FLAG_VISIBLE_2;
		sp->eff[0].EffectMiscValue = 13795;
		sp->eff[1].EffectMiscValue = 34600;
	}
	sp = dbcSpell.LookupEntryForced( 60192 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
	sp = dbcSpell.LookupEntryForced( 82939 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
	sp = dbcSpell.LookupEntryForced( 82941 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
	sp = dbcSpell.LookupEntryForced( 82945 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
	sp = dbcSpell.LookupEntryForced( 82948 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
//	sp = dbcSpell.LookupEntryForced( 13795 );
	//if( sp != NULL )
//		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;

	// Glyph of Misdirection
	sp = dbcSpell.LookupEntryForced( 56829 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 56829;		//self proc !
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MISDIRECTION;
	}

	// Flare
	sp = dbcSpell.LookupEntryForced( 1543 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 94528 );
	//if( sp != NULL )
	{
		//hmm, maybe we should be immune to stealth aura ? To avoid restealthing ?
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_MOD_STEALTH_LEVEL;
		sp->eff[2].EffectBasePoints = -440;
	}

	// Heart of the Phoenix
	sp = dbcSpell.LookupEntryForced( 55709 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_SUMMON_DEAD_PET;
		sp->eff[0].EffectBasePoints = 100;
		sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
		sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
	}

	// T.N.T.
	sp = dbcSpell.LookupEntryForced( 56333 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectTriggerSpell = 56453;	
		sp->procFlags = PROC_ON_SPELL_HIT ;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_BLACK_ARROW;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_IMMOLATION_TRAP;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_EXPLOSIVE_TRAP;
		sp->proc_interval = 10000; //not blizzlike but too OP 
	}
	sp = dbcSpell.LookupEntryForced( 56336 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectTriggerSpell = 56453;	
		sp->procFlags = PROC_ON_SPELL_HIT ;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_BLACK_ARROW;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_IMMOLATION_TRAP;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_EXPLOSIVE_TRAP;
		sp->proc_interval = 10000; //not blizzlike but too OP 
	}

	// Toxicology
/*	sp = dbcSpell.LookupEntryForced( 82832 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_CRITICAL_DAMAGE;
	sp = dbcSpell.LookupEntryForced( 82833 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_CRITICAL_DAMAGE; */

	// Serpent Spread
	sp = dbcSpell.LookupEntryForced( 87934 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_SPELL_HIT_EVENT | PROC_ON_MELEE_ATTACK_EVENT;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectTriggerSpell = 88453;	
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MULTI_SHOT;
		sp->proc_interval = 0;	//all multi shot targets need to receive this buff
	}
	sp = dbcSpell.LookupEntryForced( 87935 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_SPELL_HIT_EVENT | PROC_ON_MELEE_ATTACK_EVENT ;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectTriggerSpell = 88466;	
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MULTI_SHOT;
		sp->proc_interval = 0;	//all multi shot targets need to receive this buff
	}

	// Marked for Death
	sp = dbcSpell.LookupEntryForced( 53241 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectTriggerSpell = 88691;	
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ARCANE_SHOT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CHIMERA_SHOT;
	}
	sp = dbcSpell.LookupEntryForced( 53243 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectTriggerSpell = 88691;	
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ARCANE_SHOT;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CHIMERA_SHOT;
	}
	sp = dbcSpell.LookupEntryForced( 88691 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
	}

	// Invigoration
	sp = dbcSpell.LookupEntryForced( 53252 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->procFlags = PROC_ON_CRIT_ATTACK ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 53398;	
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 53253 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->procFlags = PROC_ON_CRIT_ATTACK ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 53398;	
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 53398 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;

	// Ferocious Inspiration
	sp = dbcSpell.LookupEntryForced( 34460 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 75447;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 75447 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_BY_PET_SUMMON_ON_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
	}

	//Mend Pet
	sp = dbcSpell.LookupEntryForced(136);
	//if(sp != NULL)
	{
		sp->ChannelInterruptFlags = 0;
		sp->c_is_flags2 &= ~SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->FacingCasterFlags = 0;
	}
	//Glyph of Mending
	sp = dbcSpell.LookupEntryForced(56833);
	//if(sp != NULL)
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

	//Rapid Fire
//	sp = dbcSpell.LookupEntryForced(3045);
	//if(sp != NULL)
//		sp->eff[0].EffectBasePoints = -sp->eff[0].EffectBasePoints;
	//Master Marksman
	sp = dbcSpell.LookupEntryForced(34485);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
		sp->proc_interval = 1;
	}
	sp = dbcSpell.LookupEntryForced(34486);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
		sp->proc_interval = 1;
	}
	sp = dbcSpell.LookupEntryForced(34487);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
		sp->proc_interval = 1;
	}
	sp = dbcSpell.LookupEntryForced(82926);	//FIRE! -> only this spell seems to be using this feature
	//if(sp != NULL)
	{
		sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES;
//		sp->eff[1].EffectMiscValue = 56641;// replace steady shot
		sp->eff[1].EffectMiscValue = 19434;// replace aimed shot
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced(82928);
	//if(sp != NULL)
	{
		sp->ss.castTimeMin = 0;
		sp->ss.castTimeMax = 0;
		sp->ss.castScalingMaxLevel = 0;
		sp->CastingTimeIndex = 0;
	}

	//Termination
	sp = dbcSpell.LookupEntryForced(83489);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 83489;	//!!self proc !!
		sp->ProcOnNameHash[0] = SPELL_HASH_COBRA_SHOT;
		sp->ProcOnNameHash[1] = SPELL_HASH_STEADY_SHOT;
	}
	sp = dbcSpell.LookupEntryForced(83490);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 83489;	//!!self proc !!
		sp->ProcOnNameHash[0] = SPELL_HASH_COBRA_SHOT;
		sp->ProcOnNameHash[1] = SPELL_HASH_STEADY_SHOT;
	}
	//Camouflage
	sp = dbcSpell.LookupEntryForced(51753);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 51755;	//this is the visual marker on player. If you remove this then stealth should get removed also
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->c_is_flags |= SPELL_FLAG_IS_TRIGGERED_BY_TARGET;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp = dbcSpell.LookupEntryForced(51755);	//makes player to be transparent
	//if(sp != NULL)
	{
		sp->chained_cast = dbcSpell.LookupEntryForced(80326); //this periodically make splayer stealthed
		sp->maxstack = 1;
//		sp->AuraInterruptFlags &= ~(AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN | AURA_INTERRUPT_ON_CAST_SPELL);
		sp->AuraInterruptFlags &= ~( AURA_INTERRUPT_ON_CAST_SPELL );	//wowhead says it breaks on dmg
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}
	sp = dbcSpell.LookupEntryForced(80326);
	//if(sp != NULL)
	{
		sp->maxstack = -1;
//		sp->AuraInterruptFlags &= ~(AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN | AURA_INTERRUPT_ON_CAST_SPELL);
		sp->AuraInterruptFlags &= ~( AURA_INTERRUPT_ON_CAST_SPELL );	//wowhead says it breaks on dmg
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}

	//hunter's mark
	sp = dbcSpell.LookupEntryForced(1130);
	//if(sp != NULL)
	{
		sp->ThreatForSpellCoef = 0.0f;
		sp->ThreatForSpell = 0;
	}

	//Master of Beasts - Increases the damage done by your pets by ${$76657m2/12.5}%.  Each point of Mastery increases pet damage by an additional ${$76657m2/100}.2%.
	sp = dbcSpell.LookupEntryForced(76657);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[1].EffectAmplitude = 1000; //update pet pct dmg every 1 sec
	}
	//Wild Quiver - Grants a 14.4% chance for your ranged attacks to also instantly fire an additional ranged shot.  Each point of Mastery increases the chance by an additional 1.8%.
	sp = dbcSpell.LookupEntryForced(76659);
	//if(sp != NULL)
	{
		sp->eff[0].EffectBasePoints = 15;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_RANGED_ATTACK ;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 76663;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
		sp->eff[2].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Essence of the Viper - Increases all elemental damage you deal by 8%.  Each point of Mastery increases elemental damage by an additional 1.0%.
	sp = dbcSpell.LookupEntryForced( 76658 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 8;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
		sp->eff[2].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Aspect of the Fox 
	sp = dbcSpell.LookupEntryForced(82661);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 82661;	//SELF PROC !
	}
	//Chimera Shot 
	sp = dbcSpell.LookupEntryForced(53209);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_HEAL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].Effect = SPELL_EFFECT_WEAPON_DAMAGE; //not normalized weapon dmg cause that scales to the sky
		sp->c_is_flags2 |= SPELL_FLAG2_IS_CASTABLE_SCHOOL_SILANCE;
	}
	//multi shot 
	sp = dbcSpell.LookupEntryForced(2643);
	//if(sp != NULL)
		sp->eff[1].EffectRadiusIndex = 14;	//8 yards instead 0
	//cobra shot 
	sp = dbcSpell.LookupEntryForced(77767);
	//if(sp != NULL)
	{
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[1].EffectTriggerSpell = 91954;	
		sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET;
	}
	//aimed shot 
	sp = dbcSpell.LookupEntryForced(19434);
	//if(sp != NULL)
	{
		sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET;
	}
	//scatter shot 
	sp = dbcSpell.LookupEntryForced(19503);
	//if(sp != NULL)
	{
		sp->eff[0].EffectBasePoints = 143;
		sp->Attributes |= ATTRIBUTES_STOP_ATTACK;
	}
	// Insert hunter spell fixes here
/*	//tame creature 
	sp = dbcSpell.LookupEntryForced(1515);
	//if(sp != NULL)
		sp->SpellTargetRestrictionsId = 0;	
	//dismiss pet 
	sp = dbcSpell.LookupEntryForced(2641);
	//if(sp != NULL)
		sp->SpellTargetRestrictionsId = 0;	*/

		//freezing arrow
		sp = dbcSpell.LookupEntryForced(60192);
		sp2 = dbcSpell.LookupEntryForced(60202);
		//if(sp != NULL)
		//if(sp != NULL)
			SpellEntryEffectCopy(sp2,sp,0,0);

		//Explosive Shot
		sp = dbcSpell.LookupEntryForced(53301);
		//if(sp != NULL)
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_DAMAGE;
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[1].Effect = SPELL_EFFECT_SCHOOL_DAMAGE;	//first tick is instant
		}

		//lock and load
		sp = dbcSpell.LookupEntryForced(56342);// Lock and Load
		//if(sp != NULL)
		{
			sp->procChance = sp->eff[0].EffectBasePoints;
			sp->procFlags = PROC_ON_TRAP_TRIGGER;
//			sp->proc_interval = 30000;
			sp->ProcOnNameHash[0] = SPELL_HASH_ICE_TRAP;
			sp->ProcOnNameHash[1] = SPELL_HASH_FREEZING_TRAP;
		}
		sp = dbcSpell.LookupEntryForced(56343);
		//if(sp != NULL)
		{
			sp->procChance = sp->eff[0].EffectBasePoints;
			sp->procFlags = PROC_ON_TRAP_TRIGGER;
//			sp->proc_interval = 30000;
			sp->ProcOnNameHash[0] = SPELL_HASH_ICE_TRAP;
			sp->ProcOnNameHash[1] = SPELL_HASH_FREEZING_TRAP;
		}
		sp = dbcSpell.LookupEntryForced(56453);
		//if(sp != NULL)
		{
			SpellEntry *sp2 = dbcSpell.LookupEntryForced(53301);	//Explosive Shot
			SpellEntry *sp3 = dbcSpell.LookupEntryForced(3044);	//Arcane Shot
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 2;
			
			sp2->SpellGroupType[2] |= ( 1 << 31 );	//eeeeek, adding custom SMT flag to be able to reduce cost. Maybe we should replace the spell ?

			sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
			sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
			sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
			sp->eff[1].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
			sp->eff[1].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
			sp->eff[1].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];

			sp->eff[0].EffectSpellGroupRelation[0] |= sp3->SpellGroupType[0];
			sp->eff[0].EffectSpellGroupRelation[1] |= sp3->SpellGroupType[1];
			sp->eff[0].EffectSpellGroupRelation[2] |= sp3->SpellGroupType[2];
			sp->eff[1].EffectSpellGroupRelation[0] |= sp3->SpellGroupType[0];
			sp->eff[1].EffectSpellGroupRelation[1] |= sp3->SpellGroupType[1];
			sp->eff[1].EffectSpellGroupRelation[2] |= sp3->SpellGroupType[2];
		}

		//Piercing Shots
		sp = dbcSpell.LookupEntryForced( 53234 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
			sp->ProcOnNameHash[0] = SPELL_HASH_AIMED_SHOT;
			sp->ProcOnNameHash[1] = SPELL_HASH_STEADY_SHOT;
			sp->ProcOnNameHash[2] = SPELL_HASH_CHIMERA_SHOT;
			sp->eff[0].EffectTriggerSpell = 63468;
		}
		sp = dbcSpell.LookupEntryForced( 53237 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
			sp->ProcOnNameHash[0] = SPELL_HASH_AIMED_SHOT;
			sp->ProcOnNameHash[1] = SPELL_HASH_STEADY_SHOT;
			sp->ProcOnNameHash[2] = SPELL_HASH_CHIMERA_SHOT;
			sp->eff[0].EffectTriggerSpell = 63468;
		}
		sp = dbcSpell.LookupEntryForced( 53238 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
			sp->ProcOnNameHash[0] = SPELL_HASH_AIMED_SHOT;
			sp->ProcOnNameHash[1] = SPELL_HASH_STEADY_SHOT;
			sp->ProcOnNameHash[2] = SPELL_HASH_CHIMERA_SHOT;
			sp->eff[0].EffectTriggerSpell = 63468;
		}
//		sp = dbcSpell.LookupEntryForced( 63468 );
		//if( sp != NULL )
//			sp->c_is_flags3 |= SPELL_FLAG3_IS_NOT_REFRESHING_OTHER_BUFFS;

/*		//Wild quiver rank 1
		sp = dbcSpell.LookupEntryForced( 53215 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 53254;
			sp->procChance = 4;
		}

		sp = dbcSpell.LookupEntryForced( 53216 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 53254;
			sp->procChance = 7;
		}

/*		sp = dbcSpell.LookupEntryForced( 53217 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 53254;
			sp->procChance = 10;
		}*/

		// hunter : Deterrence
		sp = dbcSpell.LookupEntryForced( 19263 );
		//if( sp != NULL )
		{
			//as long as parry is diminishing returned this will never have the 100% parry chance effect. We make the player phisical immune ?
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_PACIFY;
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_SCHOOL_IMMUNITY;
//			sp->eff[1].EffectMiscValue = 127;	//in cata, all attacks
			sp->eff[1].EffectBasePoints = 400;	//imba defense chances
//			sp->eff[2].EffectApplyAuraName = SPELL_AURA_MOD_PACIFY_SILENCE;
		}

		//hunter : beast mastery
		sp = dbcSpell.LookupEntryForced( 53270 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_NULL;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
		}
		//Hunter : Explosive Trap
		sp = dbcSpell.LookupEntryForced( 13813 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_TRAP_TRIGGER;
			sp->eff[1].EffectTriggerSpell = 13812;
		}
		//Hunter : Immolation Trap
		sp = dbcSpell.LookupEntryForced( 13795 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_TRAP_TRIGGER;
			sp->eff[1].EffectTriggerSpell = 13797;
		}
		sp = dbcSpell.LookupEntryForced( 13797 );
		//if( sp != NULL )
			sp->AttackPowerToSpellDamageCoeff = 0.02f;
		//Glyph of Immolation Trap
		sp = dbcSpell.LookupEntryForced( 56846 );
		//if( sp != NULL )
		{
			SpellEntryEffectCopy(sp,sp,1,2);
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		}
		//Snakes from Snake Trap cast this, shouldn't stack
		sp = dbcSpell.LookupEntryForced( 25810 );
		//if( sp != NULL )
			sp->maxstack = 1;
		sp = dbcSpell.LookupEntryForced( 25809 );
		//if( sp != NULL )
			sp->maxstack = 1;
		//Frost Trap
		sp = dbcSpell.LookupEntryForced( 13809 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_TRAP_TRIGGER;
			sp->eff[0].EffectTriggerSpell = 13810;
			sp->eff[0].EffectRadiusIndex = 13;	//10 yards instead 2
		};
		//frost trap spell registered on gameobject_names->sound
		sp = dbcSpell.LookupEntryForced( 63487 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_NULL; //double freez ? but why ? Due to no instant tick ?
//			sp->eff[0].EffectRadiusIndex = 13;	//10 yards instead 2
			sp->c_is_flags2 |= SPELL_FLAG2_IS_TICKING_IMEDIATLY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		}
		//Hunter - disengage
		sp = dbcSpell.LookupEntryForced( 781 );
		//if( sp != NULL )
		{
			//14333
			//DB D3 18 48 3F AE AD 1F 3F 
			//00 00 F0 C0 = -7.5 = vertical speed
			//81 
			//11 00 00 00 = radius = 17 
			//00 00 A0 41 A5 22 0E 00 00 

			sp->eff[0].Effect = SPELL_EFFECT_KNOCK_BACK;
			sp->eff[0].EffectBasePoints = 75;	//vertical speed
			sp->eff[0].EffectMiscValue = 170;	//radius
		}
		//hunter - Sniper Training
		sp = dbcSpell.LookupEntryForced( 53302 );
		//if( sp != NULL )
			sp->eff[0].EffectTriggerSpell = 64418;	
		sp = dbcSpell.LookupEntryForced( 53303 );
		//if( sp != NULL )
			sp->eff[0].EffectTriggerSpell = 64419;	
		sp = dbcSpell.LookupEntryForced( 53304 );
		//if( sp != NULL )
			sp->eff[0].EffectTriggerSpell = 64420;	
//		sp = dbcSpell.LookupEntryForced( 64418 );
		//if( sp != NULL )
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOVEMENT;
//		sp = dbcSpell.LookupEntryForced( 64419 );
		//if( sp != NULL )
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOVEMENT;
//		sp = dbcSpell.LookupEntryForced( 64420 );
		//if( sp != NULL )
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOVEMENT;
		//Hunter - Bestial Wrath
		sp = dbcSpell.LookupEntryForced( 19574 );
		//if( sp != NULL )
		{
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_DUMMY;	
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOVEMENT;
		}
		//Hunter - The Beast Within
		sp = dbcSpell.LookupEntryForced( 34692 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->eff[0].EffectTriggerSpell = 34471;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_BESTIAL_WRATH;
		}
		sp = dbcSpell.LookupEntryForced( 34471 );
		//if( sp != NULL )
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_DUMMY;

		//Hunter - Go for the Throat
		sp = dbcSpell.LookupEntryForced( 34950 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 34954 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 34952 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp = dbcSpell.LookupEntryForced( 34953 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;

		// hunter - Improved Revive Pet
/*		sp = dbcSpell.LookupEntryForced( 19575 );
		//if( sp != NULL )
			sp->eff[2].Effect = SPELL_EFFECT_NULL;		//!!! this would make some spells gain insane bonuses due to flag collision
		sp = dbcSpell.LookupEntryForced( 24443 );
		//if( sp != NULL )
			sp->eff[2].Effect = SPELL_EFFECT_NULL;		//!!! this would make some spells gain insane bonuses due to flag collision
			*/

		// Hunter - Master Tactician
		sp = dbcSpell.LookupEntryForced( 34506 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34507 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34508 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34838 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34839 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}

		//Hunter Silencing Shot
		//http://www.naxxramas.net/bug_list/showreport.php?bugid=234 NTY
		sp = dbcSpell.LookupEntryForced(34490);
		//if(sp != NULL)
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_SILENCE ;
		}

		// Hunter - Cobra Strikes
		sp = dbcSpell.LookupEntryForced( 53256 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_SHOT;
		}
		sp = dbcSpell.LookupEntryForced( 53259 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_SHOT;
		}
		sp = dbcSpell.LookupEntryForced( 53260 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_SHOT;
		}
		sp = dbcSpell.LookupEntryForced( 53257 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_CRIT_PERCENT;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->procCharges = 2;
			sp->procFlags = PROC_ON_CRIT_ATTACK;
		}

		// Hunter - Thrill of the Hunt
		sp = dbcSpell.LookupEntryForced( 34497 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+1;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 34720;
		}
		sp = dbcSpell.LookupEntryForced( 34498 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+1;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 34720;
		}
		sp = dbcSpell.LookupEntryForced( 34499 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+1;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 34720;
		}

		// Hunter	-	Thick	Hide
/*		sp = dbcSpell.LookupEntryForced(19609);
		//if( sp != NULL)
		{
			sp->c_is_flags |=	SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_RESISTANCE;
			sp->eff[0].EffectBasePoints	*= 10;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced(19610);
		//if( sp != NULL)
		{
			sp->c_is_flags |=	SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_RESISTANCE;	
			sp->eff[0].EffectBasePoints	*= 10;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}*/

		// Hunter - kill command
		sp = dbcSpell.LookupEntryForced( 34026 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->c_is_flags |= SPELL_FLAG_IS_TRIGGERED_BY_TARGET;
			sp->eff[1].EffectTriggerSpell = sp->eff[1].EffectBasePoints;
		} 
		sp = dbcSpell.LookupEntryForced( 83381 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		// Hunter - Feign Death
		sp = dbcSpell.LookupEntryForced( 5384 );
		//if( sp != NULL )
			sp->ThreatForSpellCoef = 0;
		// Eagle eye
		sp = dbcSpell.LookupEntryForced( 6197 );
		//if( sp != NULL )
			sp->ThreatForSpellCoef = 0;
		// Hunter - Expose Weakness
/*		sp = dbcSpell.LookupEntryForced( 34500 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34502 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34503 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}*/

		//Hunter - Frenzy
		sp = dbcSpell.LookupEntryForced( 19621 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 19615;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		}
		sp = dbcSpell.LookupEntryForced( 19622 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 19615;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		}
		sp = dbcSpell.LookupEntryForced( 19623 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 19615;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET | SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		}

		//Hunter : Pathfinding
		sp = dbcSpell.LookupEntryForced( 19559 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp = dbcSpell.LookupEntryForced( 19560 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

		//Hunter : Rapid Killing - might need to add honor trigger too here. I'm guessing you receive Xp too so i'm avoiding double proc
		sp = dbcSpell.LookupEntryForced( 34948 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_GAIN_EXPIERIENCE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34949 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_GAIN_EXPIERIENCE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 35098 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//rapid recuperation
		}
		sp = dbcSpell.LookupEntryForced( 35099 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//rapid recuperation
		}

		//we need to adress this somehow : shot or auto shoot ?
		sp = dbcSpell.LookupEntryForced( 3018 );
		//if( sp != NULL )
		{
			//sp->GetSpellGroupType()[0] = 4;
			sp->InterruptFlags &= ~CAST_INTERRUPT_ON_MOVEMENT;
			sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_MOVEMENT;
			sp->CastingTimeIndex = 0; //insta cast
			sp->c_is_flags3 |= SPELL_FLAG3_IS_SKIPPING_AUTOFACE_ON_CAST;
		}

		//Concussive Barrage
		sp = dbcSpell.LookupEntryForced( 35100 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK_EVENT | PROC_ON_NOT_VICTIM;
			sp->ProcOnNameHash[0] = SPELL_HASH_CHIMERA_SHOT;
			sp->ProcOnNameHash[1] = SPELL_HASH_MULTI_SHOT;
		}
		sp = dbcSpell.LookupEntryForced( 35102 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK_EVENT | PROC_ON_NOT_VICTIM;
			sp->ProcOnNameHash[0] = SPELL_HASH_CHIMERA_SHOT;
			sp->ProcOnNameHash[1] = SPELL_HASH_MULTI_SHOT;
		}
		sp = dbcSpell.LookupEntryForced( 35101 );
		//if( sp != NULL )
			sp->rangeIndex = 5; //Long Range

		//Hunting Party
		sp = dbcSpell.LookupEntryForced( 53290 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_HASTE;	//melee
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_MOD_RANGED_HASTE;
		}
/*		sp = dbcSpell.LookupEntryForced( 53291 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 57669;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK;
			sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_SHOT;
			sp->ProcOnNameHash[1] = SPELL_HASH_EXPLOSIVE_SHOT;
			sp->ProcOnNameHash[2] = SPELL_HASH_STEADY_SHOT;
		}
		sp = dbcSpell.LookupEntryForced( 53292 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 57669;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK;
			sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_SHOT;
			sp->ProcOnNameHash[1] = SPELL_HASH_EXPLOSIVE_SHOT;
			sp->ProcOnNameHash[2] = SPELL_HASH_STEADY_SHOT;
		}*/

		//hunter : Aspect Mastery
/*		sp = dbcSpell.LookupEntryForced( 53265 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;		//mod my balls
//			sp->eff[1].Effect = SPELL_EFFECT_NULL;	- keep it for visual ?
//			sp->eff[2].Effect = SPELL_EFFECT_NULL;	- keep it for visual ?
		}*/

		//hunter : Kindred Spirits
		sp = dbcSpell.LookupEntryForced( 56314 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
//			sp->eff[0].Effect = SPELL_EFFECT_FORCE_CAST;
			sp->eff[0].EffectImplicitTargetA= EFF_TARGET_PET;
			sp->eff[0].EffectImplicitTargetB= EFF_TARGET_SELF;
//			sp->eff[0].EffectTriggerSpell=57447;
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_SPEED;
//			sp->eff[1].EffectImplicitTargetB= EFF_TARGET_PET;
//			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
//			sp->eff[1].EffectImplicitTargetA= EFF_TARGET_SELF;
//			sp->eff[1].EffectTriggerSpell=57485;	//speed self
		}
		sp = dbcSpell.LookupEntryForced( 56315 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
//			sp->eff[0].Effect = SPELL_EFFECT_FORCE_CAST;
			sp->eff[0].EffectImplicitTargetA= EFF_TARGET_PET;
			sp->eff[0].EffectImplicitTargetB= EFF_TARGET_SELF;
//			sp->eff[0].EffectTriggerSpell=57452;
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_SPEED;
//			sp->eff[1].EffectImplicitTargetB= EFF_TARGET_PET;
//			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
//			sp->eff[1].EffectImplicitTargetA= EFF_TARGET_SELF;
//			sp->eff[1].EffectTriggerSpell=57484;	//speed self
		}

/*		//hunter : Improved Hunter's Mark
		sp = dbcSpell.LookupEntryForced( 19421 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	
		sp = dbcSpell.LookupEntryForced( 19422 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	
		sp = dbcSpell.LookupEntryForced( 19423 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;	
			*/

		//hunter : Improved Arcane Shot
/*		sp = dbcSpell.LookupEntryForced( 19454 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp = dbcSpell.LookupEntryForced( 19455 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp = dbcSpell.LookupEntryForced( 19456 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
			*/

		//hunter : Improved Tracking
		sp = dbcSpell.LookupEntryForced( 52783 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
		sp = dbcSpell.LookupEntryForced( 52785 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
		sp = dbcSpell.LookupEntryForced( 52786 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;

		//hunter : Counterattack
		sp = dbcSpell.LookupEntryForced( 19306 );
		//if( sp != NULL )
			sp->EffectHandler = &HandleCounterAttack;

		//hunter : Steady Shot
		sp = dbcSpell.LookupEntryForced( 56641 );
		//if( sp != NULL )
		{
			sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 77443;
			sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET;
		}

		//hunter : Posthaste
		sp = dbcSpell.LookupEntryForced( 83558 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_DISENGAGE;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 83559;
			sp->procChance = 100;
		}
		sp = dbcSpell.LookupEntryForced( 83560 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_DISENGAGE;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 83559;
			sp->procChance = 100;
		}
		//hunter : Bombardment
		sp = dbcSpell.LookupEntryForced( 35104 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_RANGED_ATTACK_EVENT | PROC_ON_CRIT | PROC_ON_NOT_VICTIM;
			sp->ProcOnNameHash[0] = SPELL_HASH_MULTI_SHOT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 82921;
		}
		sp = dbcSpell.LookupEntryForced( 35110 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_RANGED_ATTACK_EVENT | PROC_ON_CRIT | PROC_ON_NOT_VICTIM;
			sp->ProcOnNameHash[0] = SPELL_HASH_MULTI_SHOT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 82921;
		}
		//hunter : Improved Steady Shot
		sp = dbcSpell.LookupEntryForced( 53221 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
//			sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 53220;
		}
		sp = dbcSpell.LookupEntryForced( 53222 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
//			sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 53220;
		}
		sp = dbcSpell.LookupEntryForced( 53224 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
//			sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 53220;
		}

		//hunter : Spirit Bond
		sp = dbcSpell.LookupEntryForced( 19578 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			sp->chained_cast = dbcSpell.LookupEntryForced( 19579 );		//why not copy effect from spell ?
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
		}
		sp = dbcSpell.LookupEntryForced( 19579 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			sp->eff[0].EffectImplicitTargetA= EFF_TARGET_PET;
			sp->eff[0].EffectImplicitTargetB= EFF_TARGET_SELF;
			sp->eff[1].EffectImplicitTargetA= EFF_TARGET_PET;
			sp->eff[1].EffectImplicitTargetB= EFF_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 20895 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->chained_cast = dbcSpell.LookupEntryForced( 24529 );		//why not copy effect from spell ?
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
		}
		sp = dbcSpell.LookupEntryForced( 24529 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			sp->eff[0].EffectImplicitTargetA= EFF_TARGET_PET;
			sp->eff[0].EffectImplicitTargetB= EFF_TARGET_SELF;
			sp->eff[1].EffectImplicitTargetA= EFF_TARGET_PET;
			sp->eff[1].EffectImplicitTargetB= EFF_TARGET_SELF;
		}

		//hunter : Intimidation
		sp = dbcSpell.LookupEntryForced( 7093 );
		//if( sp != NULL )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;

		//hunter : Animal Handler
/*		sp = dbcSpell.LookupEntryForced( 34453 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_ATTACK_POWER_PCT;	
			sp->eff[1].EffectImplicitTargetA= EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 34454 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_ATTACK_POWER_PCT;	
			sp->eff[1].EffectImplicitTargetA= EFF_TARGET_PET;
		}*/

		//hunter : Thick Hide
/*		sp = dbcSpell.LookupEntryForced( 19609 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_RESISTANCE_PCT;	//we do not have defense rating for pets :(
			sp->eff[0].EffectMiscValue = 1;	//phisical
		}
		sp = dbcSpell.LookupEntryForced( 19610 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_RESISTANCE_PCT;	//we do not have defense rating for pets :(
			sp->eff[0].EffectMiscValue = 1;	//phisical
		}
		sp = dbcSpell.LookupEntryForced( 19612 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_RESISTANCE_PCT;	//we do not have defense rating for pets :(
			sp->eff[0].EffectMiscValue = 1;	//phisical
		} */

		//hunter : Noxious Stings
		sp = dbcSpell.LookupEntryForced( 53295 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 53295;	//self proc
			sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
		}
		sp = dbcSpell.LookupEntryForced( 53296 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 53295;	//self proc
			sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
		}
		//hunter : Serpent Sting
		sp = dbcSpell.LookupEntryForced( 1978 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS; //only mod this hunter ranged damage. Required to not stack
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//this is needed for "Serpent Spread" talent to proc "Improved Serpent Sting"
			sp->c_is_flags3 |= SPELL_FLAG3_IS_OVERRIDE_ON_TARGET;	
		}

		//hunter : Rapid Recuperation
		sp = dbcSpell.LookupEntryForced( 53228 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_RAPID_FIRE;
			sp->ProcOnNameHash[1] = SPELL_HASH_RAPID_KILLING;
		}
		sp = dbcSpell.LookupEntryForced( 53232 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_RAPID_FIRE;
			sp->ProcOnNameHash[1] = SPELL_HASH_RAPID_KILLING;
		}

		//Hunter : Wyvern Sting
		sp = dbcSpell.LookupEntryForced( 19386 );
		//if( sp != NULL )
		{
//			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
//			sp->eff[1].EffectAmplitude = sp->quick_duration_min;
//			sp->eff[1].EffectTriggerSpell = 24131;
//			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->aura_remove_cast = dbcSpell.LookupEntryForced( 24131 );
		}

		//hunter pet : growl
		sp = dbcSpell.LookupEntryForced( 2649 );
		//if( sp != NULL )
			sp->eff[0].EffectBasePoints *= 4;	//hackfix to help pet hold agro

		//Hunter : Misdirection
		sp = dbcSpell.LookupEntryForced( 34477 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;
			//this is hack, implement threat redirection
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_THREAT;	//well we are misisng the threath proxy aura :(
			sp->eff[1].EffectMiscValue = 127;
			sp->eff[1].EffectBasePoints = -1000;
			sp->FacingCasterFlags = 0;
		}

		//Hunter : Intimidation
		sp = dbcSpell.LookupEntryForced( 19577 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->procCharges = 1;
			sp->CategoryRecoveryTime = 60000;
		}

		//Hunter : Entrapment
		sp = dbcSpell.LookupEntryForced( 19184 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_TRAP_TRIGGER;
			sp->ProcOnNameHash[0] = SPELL_HASH_ICE_TRAP;
			sp->ProcOnNameHash[1] = SPELL_HASH_SNAKE_TRAP;
		}
		sp = dbcSpell.LookupEntryForced( 19387 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_TRAP_TRIGGER;
			sp->ProcOnNameHash[0] = SPELL_HASH_ICE_TRAP;
			sp->ProcOnNameHash[1] = SPELL_HASH_SNAKE_TRAP;
		}
		sp = dbcSpell.LookupEntryForced( 64803 );
		//if( sp != NULL )
		{
			sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		}
		
		/* aspect of the pack - change to AA */
		sp = dbcSpell.LookupEntryForced( 13159 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;

		/* aspect of the cheetah - add proc flags */
		sp = dbcSpell.LookupEntryForced( 5118 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;

	//////////////////////////////////////////
	// ROGUE								//
	//////////////////////////////////////////

	// Insert rogue spell fixes here

	//Evasion
	sp = dbcSpell.LookupEntryForced( 5277 );
	//if(sp != NULL)
		sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;

	//Glyph of Sinister Strike
	sp = dbcSpell.LookupEntryForced( 56821 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SINISTER_STRIKE;
	}

	//Glyph of Kick
	sp = dbcSpell.LookupEntryForced( 56805 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_INTERRUPT_EVENT | PROC_ON_NOT_VICTIM;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_KICK;
		sp->eff[1].EffectTriggerSpell = 56805;	//self proc = no continue !
		sp->procChance = 100;	//will script this 
	}

	// Sap 
	sp = dbcSpell.LookupEntryForced( 6770 );
	//if( sp != NULL )
	{
		sp->ThreatForSpellCoef = 0.0f; //do not trigger combat
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF; //bugs out if you sap someone that is in stealth ?
//		sp->AuraInterruptFlags |= AURA_INTERRUPT_CUSTOM_ZERO_DMG;
	}

	// Premeditation 
	sp = dbcSpell.LookupEntryForced( 14183 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Redirect 
	sp = dbcSpell.LookupEntryForced( 73981 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Blind 
	sp = dbcSpell.LookupEntryForced( 2094 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Tricks of the Trade 
	sp = dbcSpell.LookupEntryForced( 57934 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Vendetta  
	sp = dbcSpell.LookupEntryForced( 79140 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//whatever dummy spell to make hunter spells cast 500 ms faster. Fucked up dbc data in 4.3.0 client
//	sp = dbcSpell.LookupEntryForced( 2764 );
	CreateDummySpell( 2767 );
	sp2 = dbcSpell.LookupEntryForced( 2767 );
	//if( sp != NULL )
	{
		sp2->DurationIndex = 21;	//infinit
		sp2->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp2->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp2->eff[0].EffectMiscValue = SMT_CAST_TIME;
		sp2->eff[0].EffectBasePoints = -500;
		//Throw
		sp2->eff[0].EffectSpellGroupRelation[0] = 0x01;
		sp2->eff[0].EffectSpellGroupRelation[1] = 0;
		sp2->eff[0].EffectSpellGroupRelation[2] = 0;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp2->AttributesEx &= ~1024;
		sp2->Attributes |= ATTRIBUTES_PASSIVE;
	}

	//Fan of Knives
	sp = dbcSpell.LookupEntryForced( 51723 );
	//if( sp != NULL )
		sp->eff[0].EffectRadiusIndex = 14; //8  yards

	//Smoke Bomb
	//!! this is not a proper fix !
	sp = dbcSpell.LookupEntryForced( 76577 );
	//if( sp != NULL )
	{
		//create a Dyn object that will put an aura on friendlies
		sp->c_is_flags2 |= SPELL_FLAG2_IS_AA_TARGETTING_EVERYONE | SPELL_FLAG2_IS_BREAKING_STEALTH | SPELL_FLAG2_IS_TICKING_IMEDIATLY;
//		sp->c_is_flags2 |= SPELL_FLAG2_IS_AA_TARGETTING_EVERYONE; //only break stalth of enemy players
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->eff[0].EffectMiscValue = INVIS_FLAG_UNKNOWN8;
		sp->eff[0].EffectAmplitude = 1000;

		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//		sp->eff[1].EffectTriggerSpell = 88611;
//		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
//		sp->eff[1].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex;
//		sp->eff[1].EffectRadiusMaxIndex = sp->eff[0].EffectRadiusMaxIndex;

		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF | SPELL_FLAG_IS_TARGETINGSTEALTHED;
		sp->spell_id_client = 88611;
		sp->ThreatForSpellCoef = 0.0f;
		sp->ThreatForSpell = 0;
	}
//	sp2 = dbcSpell.LookupEntryForced( 88611 );
	//if( sp != NULL )
//		sp2->DurationIndex = sp->DurationIndex;

	//gouge
	sp = dbcSpell.LookupEntryForced( 1776 );
	//if( sp != NULL )
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
//		sp->FacingCasterFlags = TARGET_FACE_CASTER;
		sp->FacingCasterFlags = 0;	//Glyph of Gouge - we script it
	}

	//Blade Flurry
	sp = dbcSpell.LookupEntryForced(13877);
//	if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
	}

	//Sanguinary Vein
	sp = dbcSpell.LookupEntryForced(79146);
//	if(sp != NULL)
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
	sp = dbcSpell.LookupEntryForced(79147);
//	if(sp != NULL)
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;

	//Premeditation
	sp = dbcSpell.LookupEntryForced(14183);
	//if(sp != NULL)
		sp->procCharges = 1;

	//Hemorrhage
	sp = dbcSpell.LookupEntryForced(16511);
	//if(sp != NULL)
		sp->eff[2].EffectMechanic = MECHANIC_BLEEDING;

	//Blade Twisting
	sp = dbcSpell.LookupEntryForced(31124);
	//if(sp != NULL)
		SetPPMForChance( sp, 4, 1000, 60000 );
	sp = dbcSpell.LookupEntryForced(31126);
	//if(sp != NULL)
		SetPPMForChance( sp, 4, 1000, 60000 );
	sp = dbcSpell.LookupEntryForced(51585);
	//if(sp != NULL)
		sp->rangeIndex = 2; //combat range 

	//Sinister Calling
	sp = dbcSpell.LookupEntryForced(31220);
	//if(sp != NULL)
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[1].EffectMiscValueB = sp->eff[1].EffectMiscValue;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
		SpellEntryEffectCopy(sp,sp,1,2);
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}

	//Throwing Specialization
	sp = dbcSpell.LookupEntryForced(5952);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEADLY_THROW;
	}
	sp = dbcSpell.LookupEntryForced(51679);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEADLY_THROW;
	}

	//Tricks of the Trade
	sp = dbcSpell.LookupEntryForced(57934);
	//if(sp != NULL)
	{
		sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57933;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_DUEL;
	}

	//Vendetta
	sp = dbcSpell.LookupEntryForced(79140);
	//if(sp != NULL)
		sp->eff[0].EffectMiscValue = 127;	//all damage = all schools

	//Backstab
	sp = dbcSpell.LookupEntryForced(53);
	//if(sp != NULL)
	{
		sp->AttributesExB |= FLAGS3_REQ_BEHIND_TARGET;
		sp->FacingCasterFlags |= CASTER_FACE_FACING;
	}
	//ambush
	sp = dbcSpell.LookupEntryForced(8676);
	//if(sp != NULL)
	{
		sp->AttributesExB |= FLAGS3_REQ_BEHIND_TARGET;
		sp->FacingCasterFlags |= CASTER_FACE_FACING;
	}
	//garrote
	sp = dbcSpell.LookupEntryForced(703);
	//if(sp != NULL)
	{
		sp->AttributesExB |= FLAGS3_REQ_BEHIND_TARGET;
		sp->FacingCasterFlags |= CASTER_FACE_FACING;
		sp->AttributesEx &= ~ATTRIBUTESEX_NOT_BREAK_STEALTH;	//some say this was bugged in 4.3 client
		sp->DiminishStatus = -1;	//only silence has dimishing group !
	}
	sp2 = dbcSpell.LookupEntryForced(1330);
	//if(sp != NULL)
		sp2->DiminishStatus = DIMINISHING_GROUP_SILENCE;	//only silence has dimishing group !
	// Glyph of Garrote 
	sp = dbcSpell.LookupEntryForced( 56812 );
	sp2 = dbcSpell.LookupEntryForced( 703 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectSpellGroupRelation[0] |= sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] |= sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] |= sp2->SpellGroupType[2];
	}

	//Combat Readiness
	sp = dbcSpell.LookupEntryForced(74001);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
		sp->procChance = 100;
		sp->DurationIndex = 1;	//make it 10 second and we extend it 1 time if we get dmg
	}

	//Serrated Blades
	sp = dbcSpell.LookupEntryForced(73981);
	//if(sp != NULL)
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
	//Serrated Blades
	sp = dbcSpell.LookupEntryForced(14171);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_EVISCERATE;
		sp->eff[0].EffectTriggerSpell = 14171;	//self proc = no continue !
		sp->procChance = 100;	//will script this 
	}
	sp = dbcSpell.LookupEntryForced(14172);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_EVISCERATE;
		sp->eff[0].EffectTriggerSpell = 14171;	//self proc = no continue !
		sp->procChance = 100;	//will script this 
	}
	//Bandit's Guile
	sp = dbcSpell.LookupEntryForced( 84652 );
	//if( sp != NULL ) 
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 84748;	
		sp->procFlags = PROC_ON_CAST_SPELL;	
		sp->ProcOnNameHash[0] = SPELL_HASH_SINISTER_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_REVEALING_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 84653 );
	//if( sp != NULL ) 
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 84748;	
		sp->procFlags = PROC_ON_CAST_SPELL;	
		sp->ProcOnNameHash[0] = SPELL_HASH_SINISTER_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_REVEALING_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 84654 );
	//if( sp != NULL ) 
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 84748;	
		sp->procFlags = PROC_ON_CAST_SPELL;	
		sp->ProcOnNameHash[0] = SPELL_HASH_SINISTER_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_REVEALING_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 84745 );
	//if( sp != NULL ) 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
	sp = dbcSpell.LookupEntryForced( 84746 );
	//if( sp != NULL ) 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
	sp = dbcSpell.LookupEntryForced( 84747 );
	//if( sp != NULL ) 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
	//Cut to the Chase
	sp = dbcSpell.LookupEntryForced(51664);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_EVISCERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_ENVENOM;
		sp->eff[0].EffectTriggerSpell = 51664;	//self proc = no continue !
	}
	sp = dbcSpell.LookupEntryForced(51665);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_EVISCERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_ENVENOM;
		sp->eff[0].EffectTriggerSpell = 51664;	//self proc = no continue !
	}	
	sp = dbcSpell.LookupEntryForced(51667);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_EVISCERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_ENVENOM;
		sp->eff[0].EffectTriggerSpell = 51664;	//self proc = no continue !
	}
	//Murderous Intent
	sp = dbcSpell.LookupEntryForced(14158);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BACKSTAB;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 79132;
	}
	sp = dbcSpell.LookupEntryForced(14159);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BACKSTAB;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 79132;
	}

	//Deadly Momentum
	sp = dbcSpell.LookupEntryForced(79121);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
	sp = dbcSpell.LookupEntryForced(79122);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
	sp = dbcSpell.LookupEntryForced(84590);
	//if(sp != NULL)
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	}
	//Glyph of Hemorrhage
	sp = dbcSpell.LookupEntryForced(56807);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEMORRHAGE;
	}
	sp = dbcSpell.LookupEntryForced(89775);
	//if(sp != NULL)
		sp->maxstack = 1;	//let it stack with original hemorrhage
	//Energetic Recovery
	sp = dbcSpell.LookupEntryForced( 79150 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	sp = dbcSpell.LookupEntryForced( 79151 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	sp = dbcSpell.LookupEntryForced( 79152 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;

	//Ruthlessness
	sp = dbcSpell.LookupEntryForced( 14156 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced( 14160 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced( 14161 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;

	//Find Weakness
	sp = dbcSpell.LookupEntryForced( 51632 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 91021;	
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_AMBUSH;
		sp->ProcOnNameHash[1] = SPELL_HASH_GARROTE;
		sp->ProcOnNameHash[2] = SPELL_HASH_CHEAP_SHOT;
	}
	sp = dbcSpell.LookupEntryForced( 91023 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 91021;	
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_AMBUSH;
		sp->ProcOnNameHash[1] = SPELL_HASH_GARROTE;
		sp->ProcOnNameHash[2] = SPELL_HASH_CHEAP_SHOT;
	}
	//Combat Potency
	sp = dbcSpell.LookupEntryForced( 35541 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced( 35550 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced( 35551 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
	//Savage Combat
	sp = dbcSpell.LookupEntryForced( 51682 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->proc_interval=8000;
	}	
	sp = dbcSpell.LookupEntryForced( 58413 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->proc_interval=8000;
	}
	sp = dbcSpell.LookupEntryForced( 58683 );
	//if( sp != NULL )
		sp->DurationIndex = 29;//12 seconds, I hate endless debuffs
	sp = dbcSpell.LookupEntryForced( 58684 );
	//if( sp != NULL )
		sp->DurationIndex = 29;//12 seconds, I hate endless debuffs

	//Restless Blades
	sp = dbcSpell.LookupEntryForced( 79095 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79095;		//self proc !
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 79096 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79095;		//self proc !
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Revealing Strike
	sp = dbcSpell.LookupEntryForced( 84617 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->procFlags2 |= PROC2_REMOVEONUSE;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 84617;		//self proc !
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM | PROC_ON_SPELL_LAND_VICTIM;
	}

	//Blackjack
	sp = dbcSpell.LookupEntryForced( 79123 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79124;	
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->ProcOnNameHash[0] = SPELL_HASH_SAP;
	}
	sp = dbcSpell.LookupEntryForced( 79125 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79126;	
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->ProcOnNameHash[0] = SPELL_HASH_SAP;
	}
	sp = dbcSpell.LookupEntryForced( 79124 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
	sp = dbcSpell.LookupEntryForced( 79126 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
	//Recuperate
	sp = dbcSpell.LookupEntryForced( 73651 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints *= 100;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
	}
	//Improved Recuperate
	sp = dbcSpell.LookupEntryForced( 79007 );
	//if( sp != NULL )
	{
		uint32 t =sp->eff[0].EffectBasePoints;
		SpellEntryEffectCopy(sp,sp,1,0);
		sp->eff[0].EffectBasePoints = t/10;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
	}
	sp = dbcSpell.LookupEntryForced( 79008 );
	//if( sp != NULL )
	{
		uint32 t =sp->eff[0].EffectBasePoints;
		SpellEntryEffectCopy(sp,sp,1,0);
		sp->eff[0].EffectBasePoints = t/10;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
	}
	//Executioner - Increases the damage done by all your finishing moves, and the effectiveness of your Slice and Dice, by 16%.  Each point of Mastery increases damage by an additional 2.0%.
	sp = dbcSpell.LookupEntryForced( 76808 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 16;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
		sp->eff[1].EffectBasePoints = 250;
		sp->eff[2].EffectBasePoints = 16;	//slice and dice mod ?
		sp->eff[2].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	//Main Gauche - Your main hand attacks have a 16% chance to grant you an extra off hand attack.  Each point of Mastery increases the chance by an additional 2.00%.
	sp = dbcSpell.LookupEntryForced( 76806 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	//we will handle this manually
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86392;	//in 403 this is offhand weapon, in 406 it will become mainhand dmg
		sp->eff[0].EffectBasePoints = 16;
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	sp = dbcSpell.LookupEntryForced( 86392 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
	//Potent Poisons - Increases the damage done by your poisons by 28%.  Each point of Mastery increases damage by an additional 3.5%
	sp = dbcSpell.LookupEntryForced( 76803 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 28;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}

		//improved kick
		sp = dbcSpell.LookupEntryForced( 13754 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_KICK;
		}
		sp = dbcSpell.LookupEntryForced( 13867 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_KICK;
		}

		//Initiative
		sp = dbcSpell.LookupEntryForced( 13976 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CHEAP_SHOT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_AMBUSH;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_GARROTE;
		}
		sp = dbcSpell.LookupEntryForced( 13979 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CHEAP_SHOT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_AMBUSH;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_GARROTE;
		}

		//mutilate should not require facing
		sp = dbcSpell.LookupEntryForced( 1329 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = CASTER_FACE_FACING | CASTER_FACE_TARGET;
			sp->AttributesExB &= (~FLAGS3_REQ_BEHIND_TARGET);
		}
		sp = dbcSpell.LookupEntryForced( 5374 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = CASTER_FACE_FACING | CASTER_FACE_TARGET;
			sp->AttributesExB &= (~FLAGS3_REQ_BEHIND_TARGET);
		}
		sp = dbcSpell.LookupEntryForced( 27576 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = CASTER_FACE_FACING | CASTER_FACE_TARGET;
			sp->AttributesExB &= (~FLAGS3_REQ_BEHIND_TARGET);
		}
		//shiv
		sp = dbcSpell.LookupEntryForced( 5938 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = CASTER_FACE_FACING | CASTER_FACE_TARGET;
			sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET;
		}
		//kidney shot
		sp = dbcSpell.LookupEntryForced( 408 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = CASTER_FACE_FACING | CASTER_FACE_TARGET;
			sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET;
		}
		//sinister strike
		sp = dbcSpell.LookupEntryForced( 1752 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = CASTER_FACE_FACING | CASTER_FACE_TARGET;
			sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET;
		}
		/**********************************************************
		 *	Garrote - this is used? 
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 37066 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;

		//stealth is not a chargespell
		sp = dbcSpell.LookupEntryForced( 1784 );
		//if( sp != NULL )
		{
			sp->procCharges = 0;
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOUNT;
			DynamicCreateAssignSpellStackGroup( sp, 0, "Stealth" );
		}

		//Cheap Shot
		sp = dbcSpell.LookupEntryForced( 1833 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = 0;
			sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET;
			//read on wowhead this will require you to restealth
//			sp->AttributesEx &= ~ATTRIBUTESEX_NOT_BREAK_STEALTH;	//some say this was bugged in 4.3 client
			sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;
		}

		//rogue - Unfair Advantage
		sp = dbcSpell.LookupEntryForced( 51672 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_DODGE_VICTIM;
		sp = dbcSpell.LookupEntryForced( 51674 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_DODGE_VICTIM;

		//rogue - Glyph of Cloak of Shadows
		sp = dbcSpell.LookupEntryForced( 63269 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;

		//rogue - Glyph of Killing Spree
		sp = dbcSpell.LookupEntryForced( 63252 );
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;

		//rogue - Killing Spree
		sp = dbcSpell.LookupEntryForced( 51690 );
		//if( sp != NULL )
		{
			//increase DMG for duration
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
			sp->eff[0].EffectTriggerSpell = 61851;
			//setup teleportation spell
			sp->eff[1].Effect = SPELL_EFFECT_DUMMY;	
			sp->eff[1].EffectAmplitude = 500;
			sp->eff[1].EffectTriggerSpell = 57840;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME;
			sp->MaxAffectedTargets = 5;
			sp->eff[0].EffectRadiusIndex = sp->eff[1].EffectRadiusIndex = sp->eff[2].EffectRadiusIndex = 13;
			sp->maxstack = 2;	//so that the other effects like bonus dmg can stack with us
		}
		sp = dbcSpell.LookupEntryForced( 61851 );		//the increase dmg spell. why separate ?
		//if( sp != NULL )
		{
			sp->maxstack = 2;	//so that the other effects like periodic trigger can stack with us
			sp->eff[0].Effect = SPELL_EFFECT_NULL;		//wtf summon effect
			sp->eff[0].EffectRadiusIndex = sp->eff[1].EffectRadiusIndex = sp->eff[2].EffectRadiusIndex = 13;
		}
		//this is killin spree teleportation spell that we are going to attach the 2 melee attack spells
		sp = dbcSpell.LookupEntryForced( 57840 );
		//if( sp != NULL )
		{
			//teleport to the enemy
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			//increase DMG for duration
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
			sp->eff[1].EffectTriggerSpell = 57841;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			//setup teleportation spell
			sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
			sp->eff[2].EffectTriggerSpell = 57842;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->eff[0].EffectRadiusIndex = sp->eff[1].EffectRadiusIndex = sp->eff[2].EffectRadiusIndex = 13;
		}
		//we are not accepting the way blizz made this spell. they made : hit + tel + hit -> we : tel + hit + hit
		sp = dbcSpell.LookupEntryForced( 57841 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_NULL;	
			sp->eff[0].EffectRadiusIndex = sp->eff[1].EffectRadiusIndex = sp->eff[2].EffectRadiusIndex = 13;
		}

		//rogue - Cloak of Shadows.
		sp = dbcSpell.LookupEntryForced( 31224 ); 
		//if( sp != NULL )
			sp->eff[1].Effect = SPELL_EFFECT_DUMMY;

		//rogue - Camouflage.
		sp = dbcSpell.LookupEntryForced( 13975 ); 
		//if( sp != NULL )
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
		//Nightstalker
		sp = dbcSpell.LookupEntryForced( 14062 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
//			sp2 = dbcSpell.LookupEntryForced( 1784 ); 
//			sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
//			sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
//			sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
		}

		//rogue - Vanish : remove imparing shit
		sp = dbcSpell.LookupEntryForced( 1856 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
//			sp->eff[0].EffectTriggerSpell = 11327; 
			sp->eff[1].Effect =  SPELL_EFFECT_NULL;
//			sp->eff[2].Effect =  SPELL_EFFECT_NULL;
//			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
//			sp->eff[1].EffectTriggerSpell = 1784; //stealth
//			sp->chained_cast = dbcSpell.LookupEntryForced( 1784 );	//we also stealth when we vanish
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
			sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN; //for 3 seconds it does not break on dmg
			sp->c_is_flags3 |= SPELL_FLAG3_IS_STEALTH_SPELL;
			sp->Attributes |= ATTRIBUTES_STOP_ATTACK; //stop attacking ?
		}
		sp = dbcSpell.LookupEntryForced( 11327 );	//vanish procs this, it's another vanish :)
		//if( sp != NULL )
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;

		// rogue - shadowstep
		sp = dbcSpell.LookupEntryForced( 36554 );
		{
			sp->FacingCasterFlags = 0;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_ALLOWED_TO_LEAVE_CHAINED_AURAS;
		}

		//if( sp != NULL )
		sp = dbcSpell.LookupEntryForced( 36563 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectMiscValue =  SMT_ADD_TO_EFFECT_VALUE_DUMMY; //mod the dot
			sp->procCharges = 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		}

		//rogue - Honor Among Thieves
		sp = dbcSpell.LookupEntryForced( 51698 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51699;
			sp->eff[0].EffectBasePoints = 4000;
			sp->proc_interval = 2000;
		}
		sp = dbcSpell.LookupEntryForced( 51700 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51699;
			sp->eff[0].EffectBasePoints = 3000;
			sp->proc_interval = 2000;
		}
		sp = dbcSpell.LookupEntryForced( 51701 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT | PROC_ON_RANGED_CRIT_ATTACK;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51699;
			sp->eff[0].EffectBasePoints = 2000;
			sp->proc_interval = 2000;
		}

		//rogue - Cheat Death
		sp = dbcSpell.LookupEntryForced( 31228 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 90000;
			sp->procChance = sp->eff[0].EffectBasePoints;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 45182;
			sp->eff[1].EffectBasePoints = -80;
		}
		sp = dbcSpell.LookupEntryForced( 31229 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 90000;
			sp->procChance = sp->eff[0].EffectBasePoints;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 45182;	
			sp->eff[1].EffectBasePoints = -80;
		}
		sp = dbcSpell.LookupEntryForced( 31230 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 90000;
			sp->procChance = sp->eff[0].EffectBasePoints;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 45182;		
			sp->eff[1].EffectBasePoints = -80;
		}
		sp = dbcSpell.LookupEntryForced( 45182 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;
			sp->eff[0].EffectMiscValue = 127;	//all schools
		}

		// rogue - Blind (Make it able to miss!)
		sp = dbcSpell.LookupEntryForced( 2094 );
		//if( sp != NULL )
		{
//			sp->GetSpellDMGType() = SPELL_DMG_TYPE_RANGED;
			sp->is_ranged_spell = true; 
//			sp->AttributesEx &= ~ATTRIBUTESEX_NOT_BREAK_STEALTH;	//some say this was bugged in 4.3 client
			sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;	//some say this was bugged in 4.3 client
		}
		//rogue - Waylay.
		sp = dbcSpell.LookupEntryForced( 51692 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_AMBUSH;
			sp->ProcOnNameHash[1] = SPELL_HASH_BACKSTAB;
		}
		sp = dbcSpell.LookupEntryForced( 51696 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_AMBUSH;
			sp->ProcOnNameHash[1] = SPELL_HASH_BACKSTAB;
		}
//		sp = dbcSpell.LookupEntryForced( 51696 ); 
		//if( sp != NULL )
		{
//			sp->eff[0].EffectBasePoints = -sp->eff[0].EffectBasePoints;
//			sp->eff[1].EffectBasePoints = -sp->eff[1].EffectBasePoints;
		}
		sp = dbcSpell.LookupEntryForced( 51693 ); 
		//if( sp != NULL )
			sp->rangeIndex = 2; 

		//Master Poisoner
		sp = dbcSpell.LookupEntryForced( 58410 );
		//if( sp != NULL ) 
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;	//proc on proc might fail ?
			sp->proc_interval=10000;
		}

		//Venomous Wounds
		sp = dbcSpell.LookupEntryForced( 79133 );
		//if( sp != NULL ) 
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 79136;	
			sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_MELEE_ATTACK_EVENT;	
			sp->ProcOnNameHash[0] = SPELL_HASH_RUPTURE;
			sp->ProcOnNameHash[1] = SPELL_HASH_GARROTE;
			sp->proc_interval = 1;
		}
		sp = dbcSpell.LookupEntryForced( 79134 );
		//if( sp != NULL ) 
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 79136;	
			sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_MELEE_ATTACK_EVENT;	
			sp->ProcOnNameHash[0] = SPELL_HASH_RUPTURE;
			sp->ProcOnNameHash[1] = SPELL_HASH_GARROTE;
			sp->proc_interval = 1;
		}
		sp = dbcSpell.LookupEntryForced( 79136 );
		//if( sp != NULL ) 
			sp->c_is_flags |= SPELL_FLAG_IS_POISON;

		//Deadly Brew
		sp = dbcSpell.LookupEntryForced( 51625 );
		//if( sp != NULL ) 
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 3409;	//cripling poison
			sp->procFlags = PROC_ON_CAST_SPELL;	//proc on proc might fail ?
			sp->ProcOnNameHash[0] = SPELL_HASH_INSTANT_POISON;
			sp->ProcOnNameHash[1] = SPELL_HASH_WOUND_POISON;
			sp->ProcOnNameHash[2] = SPELL_HASH_MIND_NUMBING_POISON;
		}
		sp = dbcSpell.LookupEntryForced( 51626 );
		//if( sp != NULL ) 
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 3409;	//cripling poison
			sp->procFlags = PROC_ON_CAST_SPELL;	//proc on proc might fail ?
			sp->ProcOnNameHash[0] = SPELL_HASH_INSTANT_POISON;
			sp->ProcOnNameHash[1] = SPELL_HASH_WOUND_POISON;
			sp->ProcOnNameHash[2] = SPELL_HASH_MIND_NUMBING_POISON;
		}

		//rogue - Overkill
		sp = dbcSpell.LookupEntryForced( 58426 );
		//if( sp != NULL ) 
		{
			//some event to start 20 sec countdown on unstealth
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 58427;
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
			sp->ProcOnNameHash[0] = SPELL_HASH_STEALTH;
			sp->ProcOnNameHash[1] = SPELL_HASH_VANISH;
			sp->Attributes &= ~ATTRIBUTES_REQ_STEALTH;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
			sp->procChance = 100;
			sp->proc_interval = 0; //add then remove with macro
		}
		sp = dbcSpell.LookupEntryForced( 58427 );
		//if( sp != NULL ) 
		{
			sp->Attributes &= ~ATTRIBUTES_REQ_STEALTH;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH; 
			sp->DurationIndex = 6;	//1 hour
		}
		//rogue - Master of Subtlety
		sp = dbcSpell.LookupEntryForced( 31223 );
		//if( sp != NULL ) 
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 31665;
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
			sp->ProcOnNameHash[0] = SPELL_HASH_STEALTH;
			sp->ProcOnNameHash[1] = SPELL_HASH_VANISH;
			sp->Attributes &= ~ATTRIBUTES_REQ_STEALTH;
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
			sp->procChance = 100;
			sp->proc_interval = 0; //or else they make a macro to insta cancel it and keep the effect
		}
		sp2 = dbcSpell.LookupEntryForced( 31665 );
		//if( sp != NULL ) 
		{
			sp2->Attributes &= ~ATTRIBUTES_REQ_STEALTH;
			sp2->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH; 
			sp2->DurationIndex = 6;	//1 hour
			sp2->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;
		}

		//rogue - Seal Fate
		sp = dbcSpell.LookupEntryForced( 14186 );
		//if( sp != NULL ) 
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 14190 );
		//if( sp != NULL ) 
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_CRIT_ATTACK;

		//Improved Sprint
		sp = dbcSpell.LookupEntryForced( 13743 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = sp->eff[0].EffectBasePoints+1;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SPRINT;
		}
		sp = dbcSpell.LookupEntryForced( 13875 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = sp->eff[0].EffectBasePoints+1;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SPRINT;
		}
		//garrot
//		sp = dbcSpell.LookupEntryForced( 703 );
		//if( sp != NULL )
//			sp->MechanicsType = MECHANIC_BLEEDING;

		//rupture
//		sp = dbcSpell.LookupEntryForced( 1943 );
		//if( sp != NULL )
		{
//			sp->MechanicsType = MECHANIC_BLEEDING;
//			sp->spell_DOT_can_crit = true;
		}
		//Relentless Strikes
		sp = dbcSpell.LookupEntryForced( 14179 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;//proc spell
			sp->eff[0].EffectTriggerSpell = 98440;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->eff[1].EffectBasePoints = 7; //client showes 20% chance but whe do not have it ? :O
		}
		sp = dbcSpell.LookupEntryForced( 58422 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;//proc spell
			sp->eff[0].EffectTriggerSpell = 98440;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->eff[1].EffectBasePoints = 14; //client showes 20% chance but whe do not have it ? :O
		}
		sp = dbcSpell.LookupEntryForced( 58423 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;//proc spell
			sp->eff[0].EffectTriggerSpell = 98440;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->eff[1].EffectBasePoints = 20; //client showes 20% chance but whe do not have it ? :O
		}
		//rogue - intiative
		sp = dbcSpell.LookupEntryForced( 13976 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+1;
			sp->ProcOnNameHash[0] = SPELL_HASH_AMBUSH;
			sp->ProcOnNameHash[1] = SPELL_HASH_CHEAP_SHOT;
			sp->ProcOnNameHash[2] = SPELL_HASH_GARROTE;
		}

		//rogue - Glyph of Backstab
		sp = dbcSpell.LookupEntryForced( 56800 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 89765;	
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->ProcOnNameHash[0] = SPELL_HASH_BACKSTAB;
		}

		//rogue - Glyph of Preparation
		sp = dbcSpell.LookupEntryForced( 56819 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 56819;	//SELF CAST !
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->ProcOnNameHash[0] = SPELL_HASH_PREPARATION;
		}

		//rogue - Glyph of Blind
		sp = dbcSpell.LookupEntryForced( 91299 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 91299;	//SELF CAST !
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->ProcOnNameHash[0] = SPELL_HASH_BLIND;
		}

		//rogue - Glyph of Blurred Speed
		sp = dbcSpell.LookupEntryForced( 58039 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect =  SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 73757; //water walk
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->ProcOnNameHash[0] = SPELL_HASH_SPRINT;
		}/**/

		sp = dbcSpell.LookupEntryForced( 13979 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+1;
			sp->ProcOnNameHash[0] = SPELL_HASH_AMBUSH;
			sp->ProcOnNameHash[1] = SPELL_HASH_CHEAP_SHOT;
			sp->ProcOnNameHash[2] = SPELL_HASH_GARROTE;
		}

	//////////////////////////////////////////
	// PRIEST 			 					//
	//////////////////////////////////////////

	// Insert priest spell fixes here

	//Divine Hymn - the heal aura
	sp = dbcSpell.LookupEntryForced( 64843 );
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_NULL; //count number of heals then break aura after 12 heals
//		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 64844 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_RAID_INJURED_MULTI_AT_TARGET;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_CUSTOM_RAID_INJURED_MULTI_AT_TARGET;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->MaxAffectedTargets = 5;
		sp->maxstack = 1;	//to let him stack with caster spell
	}

	//Glyph of Inner Fire
	sp = dbcSpell.LookupEntryForced( 55686 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;

	//Mind Control
	sp = dbcSpell.LookupEntryForced( 605 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
//		sp->ChannelInterruptFlags = 0;
	}

	//Absolution
	sp = dbcSpell.LookupEntryForced( 33167 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	//Glyph of Smite
	sp = dbcSpell.LookupEntryForced( 55692 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	//Glyph of Desperation
	sp = dbcSpell.LookupEntryForced( 63248 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
	//Power Word: Fortitude
	sp = dbcSpell.LookupEntryForced( 21562 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Mind Vision
	sp = dbcSpell.LookupEntryForced( 2096 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Shadowfiend 
	sp = dbcSpell.LookupEntryForced( 34433 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Dispel Magic 
	sp = dbcSpell.LookupEntryForced( 527 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Cure Disease 
	sp = dbcSpell.LookupEntryForced( 528 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Shadow Word: Death 
	sp = dbcSpell.LookupEntryForced( 32379 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Guardian Spirit 
	sp = dbcSpell.LookupEntryForced( 47788 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Pain Suppression
	sp = dbcSpell.LookupEntryForced( 33206 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Fear Ward 
	sp = dbcSpell.LookupEntryForced( 6346 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Shadow Word: Pain
	sp = dbcSpell.LookupEntryForced( 589 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Shadow Protection
	sp = dbcSpell.LookupEntryForced( 27683 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Power Word: Fortitude
	sp = dbcSpell.LookupEntryForced( 21562 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Levitate
	sp = dbcSpell.LookupEntryForced( 1706 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Prayer of Mending
	sp = dbcSpell.LookupEntryForced( 33076 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Power Infusion
	sp = dbcSpell.LookupEntryForced( 10060 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Holy Word: Chastise
	sp = dbcSpell.LookupEntryForced( 88625 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//Power Word: Shield
	sp = dbcSpell.LookupEntryForced( 17 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectSpellPowerCoef = 0.87f;	//this is spell description
		sp->FacingCasterFlags = 0;
	}

	//Dispel Magic
	sp = dbcSpell.LookupEntryForced( 527 );
	//if( sp != NULL )
	{
		SpellEntryEffectSwap(sp,sp,1,0);
		sp->eff[0].Effect = SPELL_EFFECT_DISPEL;	//dispel for both friendly and enemy
		sp->eff[0].EffectMiscValue = DISPEL_MAGIC;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL; //first dispel enemy
		sp->eff[1].Effect = SPELL_EFFECT_DISPEL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //dispel ourself only if we did not find anything on enemy
		sp->eff[1].EffectMiscValue = DISPEL_MAGIC;
		sp->spell_id_client = 15090;	// does not have anim in this client rev
	}

	//Glyph of Prayer of Mending
	sp = dbcSpell.LookupEntryForced( 55685 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 55685;	 //self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_PRAYER_OF_MENDING;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Glyph of Spirit Tap
	sp = dbcSpell.LookupEntryForced( 63237 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_TARGET_DIE;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 81301;	
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__DEATH;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Glyph of Dispel Magic
	sp = dbcSpell.LookupEntryForced( 55677 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_VICTIM_CASTER;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 56131;	
		sp->ProcOnNameHash[0] = SPELL_HASH_DISPEL_MAGIC;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 56131 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
	}
	//Glyph of Power Word: Shield
	sp = dbcSpell.LookupEntryForced( 55672 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 56160;	
		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
	}
	sp = dbcSpell.LookupEntryForced( 56160 );
	//if( sp != NULL )
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
	}
	
	//mass dispel
	sp = dbcSpell.LookupEntryForced( 32375 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
//		sp->eff[1].EffectBasePoints = MAX_AURAS;	//all debuffs
		sp->eff[2].Effect = SPELL_EFFECT_DISPEL_MECHANIC;
		sp->eff[2].EffectMiscValue = MECHANIC_INVULNERABLE;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_IN_AREA;
		sp->eff[2].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
/*	sp = dbcSpell.LookupEntryForced( 32592 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[0].EffectBasePoints = MAX_AURAS;	//all debuffs
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].Effect = SPELL_EFFECT_DISPEL_MECHANIC;
		sp->eff[1].EffectMiscValue = MECHANIC_INVULNERABLE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_IN_AREA;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectBasePoints = 1;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}*/

	//Sin and Punishment
	sp = dbcSpell.LookupEntryForced( 87099 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 87204;	//fear spell
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER_EVENT | PROC_ON_NOT_VICTIM | PROC_ON_SPELL_HIT;
//		sp->ProcOnNameHash[0] = SPELL_HASH_VAMPIRIC_TOUCH;
//		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
	}
	sp = dbcSpell.LookupEntryForced( 87100 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 87204;	//fear spell
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER_EVENT | PROC_ON_NOT_VICTIM | PROC_ON_SPELL_HIT;
//		sp->ProcOnNameHash[0] = SPELL_HASH_VAMPIRIC_TOUCH;
//		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
	}
	sp = dbcSpell.LookupEntryForced( 87204 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;	//only target enemies around target
		sp->eff[0].EffectImplicitTargetB = 0;	//only target enemies around target
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;	//only target enemies around target
		sp->eff[1].EffectImplicitTargetB = 0;	//only target enemies around target
		sp->rangeIndex = 13; //reach anywhere
	}

	//Holy Word: Sanctuary
	sp = dbcSpell.LookupEntryForced( 88685 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88686;
		sp->eff[0].EffectAmplitude = 2000; //heal every 2 seconds
		sp->c_is_flags |= SPELL_FLAG_IS_AA_TARGETTING_FRIENDLY;
	}
	sp = dbcSpell.LookupEntryForced( 88686 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = 0;	
	}

	//Mind Melt
	sp = dbcSpell.LookupEntryForced( 14910 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_SPIKE;
	}
	sp = dbcSpell.LookupEntryForced( 33371 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_SPIKE;
	}
	sp = dbcSpell.LookupEntryForced( 81292 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}
	sp = dbcSpell.LookupEntryForced( 87160 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}

	//Spirit of Redemption - instead of transform we will make our spells cost no mana
	sp = dbcSpell.LookupEntryForced( 27827 );
	sp2 = dbcSpell.LookupEntryForced( 27792 );
	sp3 = dbcSpell.LookupEntryForced( 27795 );
	//if( sp != NULL )
	{
//		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_POWER_COST;	
//		sp->eff[1].EffectBasePoints = -100;
//		sp->eff[1].EffectMiscValue = 127;
		sp->chained_cast = sp2;
//		sp2->chained_cast = sp3;
		sp3->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
	}

	//Lightwell
	sp = dbcSpell.LookupEntryForced( 724 );
	//if( sp != NULL )
		sp->eff[0].EffectBasePoints--;	//at some point this was spawning 2 lightwells, i bet at another point it will get the spell bugged

	//Inner Sanctum
	sp = dbcSpell.LookupEntryForced( 14747 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell = 91724;	
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_INNER_FIRE;	//will make it to have addition effect
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	}
	sp = dbcSpell.LookupEntryForced( 14770 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell = 91724;	
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_INNER_FIRE;	//will make it to have addition effect
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	}
	sp = dbcSpell.LookupEntryForced( 14771 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 91724;	
		sp->ProcOnNameHash[0] = SPELL_HASH_INNER_FIRE;	//will make it to have addition effect
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	}
	//Fear Ward
	//bail out, imunity comes before spell cast or aura interrupt flags, no idea how to implement this spell
	sp = dbcSpell.LookupEntryForced( 6346 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_IMMUNE_VICTIM;
	}
	//Train of Thought
	sp = dbcSpell.LookupEntryForced( 92295 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 50;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 92295;	//SELF CAST !
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp2 = dbcSpell.LookupEntryForced( 92297 );
	//if( sp != NULL )
	{
		sp2->procFlags = PROC_ON_CAST_SPELL;
		sp2->procChance = 100;
		sp2->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp2->eff[0].EffectTriggerSpell = 92295;	//SELF CAST !
		sp2->eff[1].Effect = SPELL_EFFECT_NULL;
		sp2->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;
		sp2->eff[1].EffectBasePoints = sp->eff[1].EffectBasePoints;
	}
	//Chakra
	sp = dbcSpell.LookupEntryForced( 14751 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 14751;	//SELF CAST !
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
		sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;
		sp->talent_remove_auras[0] = 81206;
		sp->talent_remove_auras[1] = 81207;
		sp->talent_remove_auras[2] = 81208;
		sp->talent_remove_auras[3] = 81209;
	}
	sp = dbcSpell.LookupEntryForced( 81208 );	//serenity
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
	}
	//Chakra: Sanctuary
	sp = dbcSpell.LookupEntryForced( 81206 );
	//if( sp != NULL )
		sp->eff[2].EffectMiscValue = 88625;	//replace Holy Word: Chastise
	//Chakra: Serenity
	sp = dbcSpell.LookupEntryForced( 81208 );
	//if( sp != NULL )
		sp->eff[2].EffectMiscValue = 88625;	//replace Holy Word: Chastise

	//Inspiration
	sp = dbcSpell.LookupEntryForced( 14892 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_HEAL_CRIT;
	sp = dbcSpell.LookupEntryForced( 15362 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_HEAL_CRIT;

	//Surge of Light
	sp = dbcSpell.LookupEntryForced( 88687 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced( 88690 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced( 88688 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectMiscValue = 2061;
		sp->procCharges = 1;
	}
	//Desperate Prayer
	sp = dbcSpell.LookupEntryForced( 19236 );
	//if( sp != NULL )
	{
//		sp->eff[0].Effect = SPELL_EFFECT_HEAL_MAX_HEALTH;
//		sp->eff[0].EffectBasepoints = 30;
	}
	//Atonement
	sp = dbcSpell.LookupEntryForced( 14523 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procChance = 100;	
		sp->ProcOnNameHash[0] = SPELL_HASH_SMITE;
		sp->ProcOnNameHash[1] = SPELL_HASH_HOLY_FIRE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81751;
		sp->proc_interval = 1; //this can tick on periodic dmg and if player casts a spell betwen ticks it will not trigger the heal
	}
	sp = dbcSpell.LookupEntryForced( 81749 );
	//if( sp != NULL )
	{
		sp->procFlags =PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procChance = 100;	
		sp->ProcOnNameHash[0] = SPELL_HASH_SMITE;
		sp->ProcOnNameHash[1] = SPELL_HASH_HOLY_FIRE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 94472;
		sp->proc_interval = 1; //this can tick on periodic dmg and if player casts a spell betwen ticks it will not trigger the heal
	}
	sp = dbcSpell.LookupEntryForced( 81751 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = 0;	
	}
	sp = dbcSpell.LookupEntryForced( 94472 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = 0;	
	}
	//Shackle Undead
	sp = dbcSpell.LookupEntryForced( 9484 );
	//if( sp != NULL )
	{
		sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_SHACKLE_UNDEAD;
		sp->DiminishStatusMaxPVPDur = 8000;
	}

	//Shadowy Apparition
	sp = dbcSpell.LookupEntryForced( 78202 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procChance = 100;	//we will recalculate this to get supa chance while moving
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__PAIN;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87426;
	}
	sp = dbcSpell.LookupEntryForced( 78203 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procChance = 100;	//we will recalculate this to get supa chance while moving
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__PAIN;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87426;
	}
	sp = dbcSpell.LookupEntryForced( 78204 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procChance = 100;	//we will recalculate this to get supa chance while moving
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__PAIN;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 87426;
	}
	sp = dbcSpell.LookupEntryForced( 87426 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 0;	//1 aparition / cast pls
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}

	//Psychic Scream
	sp = dbcSpell.LookupEntryForced( 8122 );
	//if( sp != NULL )
	{
//		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//		sp->eff[2].Effect = SPELL_EFFECT_NULL;
		sp->c_is_flags3 |= SPELL_FLAG3_IS_BREAKING_STEALTH_TARGET;
	}

	//Archangel - this spell allows client to click on the icon :(
	sp = dbcSpell.LookupEntryForced( 87154 );
	//if( sp != NULL )
	{
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp->DurationIndex = 0;	//just make the damn icon be active all the time
	}
	//Dark Archangel
	sp = dbcSpell.LookupEntryForced( 87153 );
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectBasePoints = 1;
	}

	//Paralysis
	sp = dbcSpell.LookupEntryForced( 87192 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_BLAST;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
	}	
	sp = dbcSpell.LookupEntryForced( 87195 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_BLAST;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
	}

	sp = dbcSpell.LookupEntryForced( 87193 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_ROOT;
		sp->is_ranged_spell = true;	//this is according to wowhead in 4.3
	}
	sp = dbcSpell.LookupEntryForced( 87194 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_ROOT;
		sp->is_ranged_spell = true;	//this is according to wowhead in 4.3
	}

	//Improved Power Word: Shield
	sp = dbcSpell.LookupEntryForced( 14748 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	//LAME ! Blizz made it lame !
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;	//client server desync ?
	}
	sp = dbcSpell.LookupEntryForced( 14768 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	//LAME ! Blizz made it lame !
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;	//client server desync ?
	}
	//Shadow Protection
	sp = dbcSpell.LookupEntryForced( 27683 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79106;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
		sp->rangeIndex = 13; //inifinit
		sp->eff[0].EffectRadiusIndex = 28; //inifinit
		sp->eff[0].EffectRadiusMaxIndex = 28; //inifinit
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp = dbcSpell.LookupEntryForced( 79106 );
	//if( sp != NULL )
		sp->rangeIndex = 13; //inifinit
	//Improved Mind Blast
	sp = dbcSpell.LookupEntryForced( 15273 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 48301;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_BLAST;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 15312 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 48301;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_BLAST;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 15313 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 48301;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_BLAST;
		sp->procChance = 100;
	}

	//Masochism
	sp = dbcSpell.LookupEntryForced( 88994 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
	}
	sp = dbcSpell.LookupEntryForced( 88995 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
	}
	//Harnessed Shadows
	sp = dbcSpell.LookupEntryForced( 33191 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_EVENT | PROC_ON_RANGED_ATTACK_EVENT | PROC_ON_SPELL_HIT_EVENT | PROC_ON_VICTIM | PROC_ON_CRIT ;
	}
	sp = dbcSpell.LookupEntryForced( 78228 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_EVENT | PROC_ON_RANGED_ATTACK_EVENT | PROC_ON_SPELL_HIT_EVENT | PROC_ON_VICTIM | PROC_ON_CRIT;
	}
	//Echo of Light - Your direct healing spells heal for an additional 10% over 6 sec.  Each point of Mastery provides an additional 1.25% healing over 6 sec.
	sp = dbcSpell.LookupEntryForced( 77485 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77489;
		sp->eff[0].EffectBasePoints = 10;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	sp = dbcSpell.LookupEntryForced( 77489 );
	//if( sp != NULL )
	{
		sp->Spell_value_is_scripted = true;
//		sp->spell_can_crit = false;
		SetSpellPowerCoeffsAll(sp,0.0f);
	}
	//Shadow Orbs - You have a $h% chance for your Shadow Word: Pain and Mind Flay spells to grant you a Shadow Orb each time they deal damage. The Shadow Orb increases the damage done by your Mind Blast and Mind Spike spells by $s1%.  Each point of Mastery increases damage by an additional ${$m2/100}.1%.
	sp = dbcSpell.LookupEntryForced( 77486 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__PAIN;
		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Shadow Orb
	sp = dbcSpell.LookupEntryForced( 77487 );
	//if( sp != NULL )
		sp->eff[0].EffectBasePoints = 10;	//seems to be extra 10 of tooltip ? it's 30% at 3 stacks
	sp = dbcSpell.LookupEntryForced( 95799 );
	//if( sp != NULL )
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//this is double modding SWP
	//Shield Discipline - Increases  the potency of all your damage absorption spells by 20%.  Each point of Mastery increases the potency of absorbs by an additional 2.5%.
	sp = dbcSpell.LookupEntryForced( 77484 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 20;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}

	//Power Word: Barrier - this is the spell that is triggered by the spawn and not the caster
	sp = dbcSpell.LookupEntryForced( 81781 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	sp = dbcSpell.LookupEntryForced( 81782 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	sp = dbcSpell.LookupEntryForced( 90785 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	//Inner Focus
	sp = dbcSpell.LookupEntryForced(89485);
	//if(sp != NULL)
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;
	}
	//power word : fortitude
	sp = dbcSpell.LookupEntryForced(21562);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79104;	//this is used as damage
		sp->eff[0].EffectImplicitTargetB  = EFF_TARGET_ALL_RAID;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}

	//Guardian Spirit
	sp = dbcSpell.LookupEntryForced( 47788 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->procChance = 100;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 48153;
		sp->proc_interval = 0;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	sp = dbcSpell.LookupEntryForced( 48153 ); 
	//if( sp != NULL )
	{
//		sp->eff[0].Effect = SPELL_EFFECT_HEAL_MAXHEALTH_PCT;
		sp->spell_id_client = 47788;
	}

	//Rapture
	sp = dbcSpell.LookupEntryForced( 47535 ); 
	//if( sp != NULL )
	{
//		sp->procFlags = PROC_ON_AURA_REMOVE;
//		sp->procChance = 100;
//		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
//		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//		sp->eff[0].EffectTriggerSpell = 47755;	
		sp->eff[0].EffectBasePoints = 2;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//remove this effect. We will force trigger it when target has the shield absorbed
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;	//when on target the buff is absorbed...complicated :(
		sp->proc_interval = 12000;
	}
	sp = dbcSpell.LookupEntryForced( 47536 ); 
	//if( sp != NULL )
	{
//		sp->procFlags = PROC_ON_AURA_REMOVE;
//		sp->procChance = sp->eff[1].EffectBasePoints + 1;
//		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
//		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//		sp->eff[0].EffectTriggerSpell = 47755;	
		sp->eff[0].EffectBasePoints = 4;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//remove this effect. We will force trigger it when target has the shield absorbed
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;	//when on target the buff is absorbed...complicated :(
		sp->proc_interval = 12000;
	}
	sp = dbcSpell.LookupEntryForced( 47537 ); 
	//if( sp != NULL )
	{
//		sp->procFlags = PROC_ON_AURA_REMOVE;
//		sp->procChance = sp->eff[1].EffectBasePoints + 1;
//		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
//		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//		sp->eff[0].EffectTriggerSpell = 47755;	
		sp->eff[0].EffectBasePoints = 6;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//remove this effect. We will force trigger it when target has the shield absorbed
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;	//when on target the buff is absorbed...complicated :(
		sp->proc_interval = 12000;
	}
	sp = dbcSpell.LookupEntryForced( 47755 ); 
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT;

	//Devouring Plague
	sp = dbcSpell.LookupEntryForced( 2944 );
	//if( sp != NULL )
		sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_DEVOURING_PLAGUE;
	//Improved Devouring Plague
	sp = dbcSpell.LookupEntryForced( 63625 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63675;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEVOURING_PLAGUE;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 63626 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63675;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEVOURING_PLAGUE;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 63675 );
	//if( sp != NULL )
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
	}
	

	//Renewed Hope
	sp = dbcSpell.LookupEntryForced( 57470 ); 
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	sp = dbcSpell.LookupEntryForced( 57472 ); 
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;

	//Improved Flash Heal -> not blizzlike !
/*	sp = dbcSpell.LookupEntryForced( 63504 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_CRITICAL;
	}
	sp = dbcSpell.LookupEntryForced( 63505 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_CRITICAL;
	}
	sp = dbcSpell.LookupEntryForced( 63506 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_CRITICAL;
	} */

	//Circle of Healing
	sp = dbcSpell.LookupEntryForced( 34861 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectChainTarget = 5;
	}
	//Hymn of Hope
	sp = dbcSpell.LookupEntryForced( 64901 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_CAST_SPELL;
		sp->RecoveryTime = 6*60*1000;	//6 minutes ?
		sp->maxstack = 0;	//so it will stack with casting spell
	}
	sp = dbcSpell.LookupEntryForced( 64904 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_PARTY_AROUND_CASTER;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_ENERGY_PERCENT;
		sp->eff[1].EffectMiscValue = 0;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_ALL_PARTY_AROUND_CASTER;
		sp->maxstack = 1;	//so it will stack with casting spell
	}

	//Weakened Soul
	sp = dbcSpell.LookupEntryForced( 6788 ); 
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
		sp->ThreatForSpellCoef = 0;
	}

	//Vampiric Touch
	sp = dbcSpell.LookupEntryForced( 34914 );	//in 3.2.2 this is scripted effect
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 34919;
//		sp->eff[0].EffectTriggerSpell = 57669;	//replenishment - it is arguably the solution. On wowhead someone said all replenishment effects are over 15 seconds
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_BLAST;
		sp->procFlags = PROC_ON_SPELL_HIT_VICTIM_NOT_DOT;
		sp->procChance = 100;
	}
	//the effect itself
	sp = dbcSpell.LookupEntryForced( 34919 );
	sp2 = dbcSpell.LookupEntryForced( 57669 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp2,sp,0,0);
//		sp->EffectHandler = &HandleReplenishment2;
		sp->MaxAffectedTargets = 10;
		sp->DurationIndex = 1;	//10 seconds
//		sp->eff[0].Effect = SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT;
//		sp->eff[0].EffectBasePoints = 1;	//1% is fixed in description
	}

	// Vampiric Embrace -> make it proc
	sp = dbcSpell.LookupEntryForced( 15286 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 15290;
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procChance = 100;
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
		sp->proc_interval = 0;	//needs to proc multiple times if you have DOT on multiple enemies
	}
	sp2 = dbcSpell.LookupEntryForced( 15290 ); 
	//if( sp != NULL )
	{
		sp2->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID; // our target party
		sp2->eff[1].Effect = SPELL_EFFECT_NULL;	//will heall all raid including self with eff 1
		sp2->GetSpellGroupType()[ 0 ] = sp->GetSpellGroupType()[ 0 ];
		sp2->GetSpellGroupType()[ 1 ] = sp->GetSpellGroupType()[ 1 ];
		sp2->GetSpellGroupType()[ 2 ] = sp->GetSpellGroupType()[ 2 ];
		SetSpellPowerCoeffsAll(sp2,0.0f);
		sp2->Spell_value_is_scripted = true;
	}

/*	// Improved Vampiric Embrace
	sp = dbcSpell.LookupEntryForced( 27839 ); 
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		*/

	// Psychic Horror
	sp = dbcSpell.LookupEntryForced( 64044 ); 
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	sp = dbcSpell.LookupEntryForced( 64058 ); 
	//if( sp != NULL )
	{
		sp->maxstack = 1;	//so it can stack with trigger mother spell
		sp->FacingCasterFlags = 0;
//		sp->DurationIndex = sp->DurationIndex;
	}

	//Shadowform
	sp = dbcSpell.LookupEntryForced( 15473 ); 
	//if( sp != NULL )
	{
//		sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;
		sp->chained_cast = dbcSpell.LookupEntryForced( 49868 );
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_MOUNT;
	}
	sp = dbcSpell.LookupEntryForced( 49868 ); 
	//if( sp != NULL )
		sp->Attributes &= ~ATTRIBUTES_PASSIVE;
	//4.3 visual part of shadowform
	sp = dbcSpell.LookupEntryForced( 107903 ); 
	//if( sp != NULL )
		sp->maxstack = 1;	//so it can stack with trigger mother spell
	//this is for glyph effect
	sp = dbcSpell.LookupEntryForced( 107904 ); 
	//if( sp != NULL )
		sp->maxstack = 1;	//so it can stack with trigger mother spell

	// Phantasm -> make fade remove movement impairing effects
	sp = dbcSpell.LookupEntryForced( 47569 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_FADE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 47569;	//!!self proc
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced( 47570 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_FADE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 47569; //!!self proc
		sp->procChance = 100;
	}

/*	// Misery
	sp = dbcSpell.LookupEntryForced( 33191 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__PAIN;
		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
		sp->ProcOnNameHash[2] = SPELL_HASH_VAMPIRIC_TOUCH;
	}
	sp = dbcSpell.LookupEntryForced( 33192 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__PAIN;
		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
		sp->ProcOnNameHash[2] = SPELL_HASH_VAMPIRIC_TOUCH;
	}*/
/*	sp = dbcSpell.LookupEntryForced( 33193 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOW_WORD__PAIN;
		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
		sp->ProcOnNameHash[2] = SPELL_HASH_VAMPIRIC_TOUCH;
	}*/

	// Borrowed Time
	sp = dbcSpell.LookupEntryForced( 52795 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
//		sp->eff[1].EffectSpellGroupRelation[0] = 1; //effect power word shield
//		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	sp = dbcSpell.LookupEntryForced( 52797 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
//		sp->eff[1].EffectSpellGroupRelation[0] = 1; //effect power word shield
//		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	sp = dbcSpell.LookupEntryForced( 52798 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
//		sp->eff[1].EffectSpellGroupRelation[0] = 1; //effect power word shield
//		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	sp = dbcSpell.LookupEntryForced( 59887 ); 
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL ;
	sp = dbcSpell.LookupEntryForced( 59888 ); 
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL ;
	sp = dbcSpell.LookupEntryForced( 59889 ); 
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL ;

	// Evangelism
	sp = dbcSpell.LookupEntryForced( 81659 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81660;
		sp->eff[1].EffectTriggerSpell = 87117;
		sp->ProcOnNameHash[0] = SPELL_HASH_SMITE;
		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
		sp->ProcOnNameHash[2] = SPELL_HASH_HOLY_FIRE;
		sp->procChance = 100;
		sp->proc_interval = 500;	//mind flay boosted by haste
	}
	sp = dbcSpell.LookupEntryForced( 81662 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81661;
		sp->eff[1].EffectTriggerSpell = 87118;
		sp->ProcOnNameHash[0] = SPELL_HASH_SMITE;
		sp->ProcOnNameHash[1] = SPELL_HASH_MIND_FLAY;
		sp->ProcOnNameHash[2] = SPELL_HASH_HOLY_FIRE;
		sp->procChance = 100;
		sp->proc_interval = 500;	//mind flay boosted by haste
	}

	// Strength of Soul
	sp = dbcSpell.LookupEntryForced( 89488 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 96266;
	}
	sp = dbcSpell.LookupEntryForced( 89489 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 96267;
	}
	sp = dbcSpell.LookupEntryForced( 96266 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DISPEL_IMMUNITY;
		sp->eff[0].EffectMiscValue = DISPEL_ALL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MECHANIC_IMMUNITY;
		sp->eff[1].EffectMiscValue = MECHANIC_SILENCED;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_MECHANIC_IMMUNITY;
		sp->eff[2].EffectMiscValue = MECHANIC_INTERRUPTED;
	}
	sp = dbcSpell.LookupEntryForced( 96267 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DISPEL_IMMUNITY;
		sp->eff[0].EffectMiscValue = DISPEL_ALL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MECHANIC_IMMUNITY;
		sp->eff[1].EffectMiscValue = MECHANIC_SILENCED;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_MECHANIC_IMMUNITY;
		sp->eff[2].EffectMiscValue = MECHANIC_INTERRUPTED;
	}

	// Grace
	sp = dbcSpell.LookupEntryForced( 47516 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 500;
	}
	sp = dbcSpell.LookupEntryForced( 47517 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 500;
	}
	sp = dbcSpell.LookupEntryForced( 47930 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_PCT; //should receive healing bonus from priest only
		sp->eff[0].EffectMiscValue = 127;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;			 //anything we target
//		sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_GRACE;
	}
	sp = dbcSpell.LookupEntryForced( 77613 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_PCT; //should receive healing bonus from priest only
		sp->eff[0].EffectMiscValue = 127;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;			 //anything we target
//		sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_GRACE;
	}

	// Pain and Suffering
	sp = dbcSpell.LookupEntryForced( 47580 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_FLAY;
	}
	sp = dbcSpell.LookupEntryForced( 47581 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_FLAY;
	}
	sp = dbcSpell.LookupEntryForced( 47948 ); 
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;

	 //priest - Divine Hymn
/*	 sp = dbcSpell.LookupEntryForced( 64844 );
	 // if( sp != NULL )
	 {
		 sp->MaxAffectedTargets = 3;
		 sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
		 sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		 sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
		 sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		 sp->maxstack = 1;	//to let him stack with caster spell
	 } */

	 //priest - Holy Concentration
/*	 sp = dbcSpell.LookupEntryForced( 34753 );
	// //if( sp != NULL )
	 {
		 sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_SPELL_CRIT_HIT_VICTIM;
		 sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FLASH_HEAL;
		 sp->ProcOnNameHash[ 1 ] = SPELL_HASH_BINDING_HEAL;
		 sp->ProcOnNameHash[ 2 ] = SPELL_HASH_GREATER_HEAL;
	 }
	 sp = dbcSpell.LookupEntryForced( 34859 );
	 //if( sp != NULL )
	 {
		 sp->procFlags = PROC_ON_SPELL_CRIT_HIT | PROC_ON_SPELL_CRIT_HIT_VICTIM;
		 sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FLASH_HEAL;
		 sp->ProcOnNameHash[ 1 ] = SPELL_HASH_BINDING_HEAL;
		 sp->ProcOnNameHash[ 2 ] = SPELL_HASH_GREATER_HEAL;
	 }*/
/*	// Test of Faith
	sp = dbcSpell.LookupEntryForced( 47558 ); 
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_DONE_PERCENT;
	sp = dbcSpell.LookupEntryForced( 47559 ); 
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_DONE_PERCENT;
	sp = dbcSpell.LookupEntryForced( 47560 ); 
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_DONE_PERCENT;
		*/

	// Divine Touch
	sp = dbcSpell.LookupEntryForced( 63534 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RENEW;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63544;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 63542 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RENEW;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63544;
		sp->procChance = 100;
	}
/*	sp = dbcSpell.LookupEntryForced( 63543 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RENEW;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63544;
	}*/
	sp = dbcSpell.LookupEntryForced( 63544 ); 
	//if( sp != NULL )
	{
		sp->spell_id_client = sp->Id;	//we are sure we want the logs to show us and not original spell id
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
	}


	// Serendipity
	sp = dbcSpell.LookupEntryForced( 63730 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_BINDING_HEAL;
		sp->ProcOnNameHash[1] = SPELL_HASH_FLASH_HEAL;
	}
	sp = dbcSpell.LookupEntryForced( 63733 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->ProcOnNameHash[0] = SPELL_HASH_BINDING_HEAL;
		sp->ProcOnNameHash[1] = SPELL_HASH_FLASH_HEAL;
	}
	sp = dbcSpell.LookupEntryForced( 63731 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procCharges = 1;
	}
	sp = dbcSpell.LookupEntryForced( 63735 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procCharges = 1;
	}

	// Martyrdom
/*	sp = dbcSpell.LookupEntryForced( 14531 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CRIT_HIT_VICTIM | PROC_ON_RANGED_CRIT_ATTACK_VICTIM ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 14774 ); 
	//if( sp != NULL )
	{
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procFlags = PROC_ON_CRIT_HIT_VICTIM | PROC_ON_RANGED_CRIT_ATTACK_VICTIM ;
	} */

	// Divine Aegis
	sp = dbcSpell.LookupEntryForced( 47509 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_NOT_VICTIM;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 47753;
		sp->RequiredShapeShift = 0;
		sp->proc_interval = 0; //so it can work on multi targetting
	}
	sp = dbcSpell.LookupEntryForced( 47511 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_NOT_VICTIM;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 47753;
		sp->RequiredShapeShift = 0;
		sp->proc_interval = 0; //so it can work on multi targetting
	}
	sp = dbcSpell.LookupEntryForced( 47515 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_NOT_VICTIM;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 47753;
		sp->RequiredShapeShift = 0;
		sp->proc_interval = 0; //so it can work on multi targetting
	}
	//consider value scripted and do not boost it by spell power
	sp = dbcSpell.LookupEntryForced( 47753 ); 
	//if( sp != NULL )
		sp->eff[0].EffectSpellPowerCoef = SPELL_EFFECT_MAGIC_UNDECIDED_SPELL_POWER_COEFF;

	// levitate -> just make hover be last move change
	sp = dbcSpell.LookupEntryForced( 1706 ); 
	//if( sp != NULL )
		SpellEntryEffectSwap(sp,sp,1,2);

	//Mind Sear - can echo blasts from any target except self
	sp = dbcSpell.LookupEntryForced( 48045 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_SINGLE_ENEMY;
	}
	sp2 = dbcSpell.LookupEntryForced( 49821 );  //the explosion
	//if( sp2 != NULL )
	{
		sp2->rangeIndex = sp->rangeIndex;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_AT_ENEMY_IN_AREA_CHANNELED;
		sp2->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}

	//penance 
	sp = dbcSpell.LookupEntryForced( 47540 );
	sp2 = dbcSpell.LookupEntryForced( 47758 );
	//if( sp != NULL && sp2 != NULL )
	{
		sp->DurationIndex = sp2->DurationIndex;
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 47666;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[0].EffectAmplitude = sp2->eff[1].EffectAmplitude; //not a bug, eff 0 uses amplitude 1
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 47750;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
		sp->eff[1].EffectAmplitude = sp2->eff[1].EffectAmplitude;
		sp->GetSpellGroupType()[2] = sp2->GetSpellGroupType()[2];
		sp->quick_tickcount = 3;
		sp->quick_ExtendDuration = 0; //we tick imediatly and skip last
		sp->FacingCasterFlags = 0;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TICKING_IMEDIATLY;
		sp->rangeIndex = dbcSpell.LookupEntryForced( 47750 )->rangeIndex;
	}
	sp = dbcSpell.LookupEntryForced( 47666 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
	sp = dbcSpell.LookupEntryForced( 47750 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
	}

		// Prayer of mending. !very very overwriten
		// how it is after rewriten : we simply proc on damage and prochandler will get new target + do healing
		sp = dbcSpell.LookupEntryForced( 33076 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectTriggerSpell = 33110;
			//we use this heal spell when we jump to other player
			SpellEntry *healsp = dbcSpell.LookupEntryForced( sp->eff[1].EffectTriggerSpell );
			if( healsp )
			{
				healsp->eff[0].Effect = SPELL_EFFECT_HEAL;
				healsp->eff[1].Effect = healsp->eff[2].Effect = SPELL_EFFECT_NULL;
				healsp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;
//				healsp->EffectBaseDice[0] = sp->EffectBaseDice[0];
//				healsp->EffectDicePerLevel[0] = sp->EffectDicePerLevel[0];
				healsp->eff[0].EffectDieSides = sp->eff[0].EffectDieSides;
				healsp->eff[0].EffectImplicitTargetA = EFF_TARGET_PARTY_MEMBER;
				healsp->eff[0].EffectSpellPowerCoef = 0.318f;	//from wowhead
				SpellEntryScalingCopy( sp, healsp, 0, 0 );
				healsp->maxstack = 1;
			}
			//this spell is just to register the proc
			SpellEntry *procsp = dbcSpell.LookupEntryForced( sp->eff[0].EffectTriggerSpell );
			if( procsp )
			{
				procsp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
				procsp->eff[1].Effect = procsp->eff[2].Effect = SPELL_EFFECT_NULL;
				procsp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
				procsp->eff[0].EffectBasePoints = sp->procCharges - 1; //we loose 1 charge each time we cast so we need this value mobile
				procsp->eff[0].EffectImplicitTargetA = EFF_TARGET_PARTY_MEMBER; //we jump on an injured party member
				procsp->eff[0].EffectTriggerSpell = sp->eff[1].EffectTriggerSpell; //!we proc self but our system does not allow proc loops !
				procsp->procCharges = 1;
				procsp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM ;
				sp->procFlags2 |= PROC2_TARGET_SELF;
				procsp->SpellScalingId = sp->SpellScalingId;	//not even sure about this
				procsp->maxstack = 1;
			}
			//simplify old system with a simple cast spell
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->eff[2].Effect = SPELL_EFFECT_NULL;
			sp->maxstack = 1;
		}
		sp = dbcSpell.LookupEntryForced( 41635 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PARTY_MEMBER;
		sp = dbcSpell.LookupEntryForced( 33110 );	//heal spell
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PARTY_MEMBER;
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC; //need this proc
		}
		// Spirit Tap
/*		sp = dbcSpell.LookupEntryForced( 15270 ); //rank 1
		//if( sp != NULL )
		{
//			sp->procFlags = PROC_ON_TARGET_DIE;
			sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
		}
		sp = dbcSpell.LookupEntryForced( 15335 ); //rank 2
		//if( sp != NULL )
		{
//			sp->procFlags = PROC_ON_TARGET_DIE;
			sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
		}
		sp = dbcSpell.LookupEntryForced( 15336 ); //rank 3
		//if( sp != NULL )
		{
//			sp->procFlags = PROC_ON_TARGET_DIE;
			sp->procFlags = PROC_ON_GAIN_EXPIERIENCE;
		} */


		/**********************************************************
		 *	Holy Nova
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 15237 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[0].EffectRadiusIndex = 13;	//10 yards was missing
			sp->eff[1].Effect = 64;
			sp->eff[1].EffectTriggerSpell = 23455;
		}
		sp = dbcSpell.LookupEntryForced( 23455 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
			sp->eff[0].EffectRadiusIndex = 13;	//10 yards was missing
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
			sp->MaxAffectedTargets = 5;
		}

		//Priest: Blessed Recovery
		sp = dbcSpell.LookupEntryForced(27811);
		//if(sp != NULL)
		{
			sp->eff[0].EffectTriggerSpell = 27813;
			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM;
		}
		sp = dbcSpell.LookupEntryForced(27815);
		//if(sp != NULL)
		{
			sp->eff[0].EffectTriggerSpell = 27817;
			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM;
		}
		sp = dbcSpell.LookupEntryForced(27816);
		//if(sp != NULL)
		{
			sp->eff[0].EffectTriggerSpell = 27818;
			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM;
		}
		//priest- Blessed Resilience
		sp = dbcSpell.LookupEntryForced( 33142 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM | PROC_ON_CRIT_HIT_VICTIM;
			sp->procChance = 100;
		}
		sp = dbcSpell.LookupEntryForced( 33145 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM | PROC_ON_CRIT_HIT_VICTIM;
			sp->procChance = 100;
		}

		//priest- Focused Will
		sp = dbcSpell.LookupEntryForced( 45234 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM | PROC_ON_SPELL_CRIT_HIT_VICTIM;
		sp = dbcSpell.LookupEntryForced( 45243 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM | PROC_ON_SPELL_CRIT_HIT_VICTIM;

		//Priest - Wand Specialization
		sp = dbcSpell.LookupEntryForced( 14524 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		}
		sp = dbcSpell.LookupEntryForced( 14525 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		}
		sp = dbcSpell.LookupEntryForced( 14526 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		}
		sp = dbcSpell.LookupEntryForced( 14527 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		}
		sp = dbcSpell.LookupEntryForced( 14528 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		}

		//priest -  Shadow Weaving
/*		sp = dbcSpell.LookupEntryForced( 15257 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_SPELL_HIT_DOT;
			sp->procChance = sp->eff[0].EffectBasePoints + 1;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 15258;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 15331 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_SPELL_HIT_DOT;
			sp->procChance = sp->eff[0].EffectBasePoints + 1;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 15258;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 15332 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_SPELL_HIT_DOT;
			sp->procChance = sp->eff[0].EffectBasePoints + 1;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 15258;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		} */

		//Priest - Inspiration proc spell
		sp = dbcSpell.LookupEntryForced( 14893 );
		//if( sp != NULL )
			sp->rangeIndex = 4;
		sp = dbcSpell.LookupEntryForced( 15357 );
		//if( sp != NULL )
			sp->rangeIndex = 4;

		//priest - Body and Soul
		sp = dbcSpell.LookupEntryForced( 64127 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
			sp->ProcOnNameHash[1] = SPELL_HASH_LEAP_OF_FAITH;
			sp->ProcOnNameHash[2] = SPELL_HASH_CURE_DISEASE;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 64128; 
			sp->eff[1].EffectTriggerSpell = 64136; //remove one 1 poison
		}
		sp = dbcSpell.LookupEntryForced( 64129 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
			sp->ProcOnNameHash[1] = SPELL_HASH_LEAP_OF_FAITH;
			sp->ProcOnNameHash[2] = SPELL_HASH_CURE_DISEASE;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 65081; 
			sp->eff[1].EffectTriggerSpell = 64136; //remove one 1 poison
		}
		
		//priest - Dispersion
		sp = dbcSpell.LookupEntryForced( 47585 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 49766; //energize
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[1].EffectAmplitude = 1000;
			sp->chained_cast = dbcSpell.LookupEntryForced( 60069 );
		}
		sp = dbcSpell.LookupEntryForced( 60069 );
		//if( sp != NULL )
		{
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[0].Effect = SPELL_EFFECT_NULL;	//this is some periodic energize aura. But we will use this spell to give ourself mechanic immunity
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->maxstack = 1; //stack with chain owner
		}

		// priest - Reflective Shield
		sp = dbcSpell.LookupEntryForced( 33201 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL_EVENT | PROC_ON_AURA_REMOVE_EVENT;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 33619; //!! WRONG spell, we will make direct dmg here
			sp->proc_interval = 0;
		}
		sp = dbcSpell.LookupEntryForced( 33202 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL_EVENT | PROC_ON_AURA_REMOVE_EVENT;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 33619; //!! WRONG spell, we will make direct dmg here
			sp->proc_interval = 0;
		}
		sp = dbcSpell.LookupEntryForced( 33619 );
		//if( sp != NULL )
		{
			sp->ThreatForSpellCoef = 0; 
			sp->ThreatForSpell = 0; 
			SetSpellPowerCoeffsAll(sp,0.0f);
			sp->Spell_value_is_scripted = true;
		}

	//////////////////////////////////////////
	// SHAMAN								//
	//////////////////////////////////////////

	// Insert shaman spell fixes here

	//Ancestral Resolve
	sp = dbcSpell.LookupEntryForced( 77829 );
	//if( sp != NULL )
	{
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77829;	//self proc
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 77830 );
	//if( sp != NULL )
	{
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77829;	//self proc
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->procChance = 100;
	}

	//Tremor Totem Passive
	sp = dbcSpell.LookupEntryForced( 8145 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TICKING_IMEDIATLY;

	//Resurgence
	sp = dbcSpell.LookupEntryForced( 16180 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 101033;
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 16196 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 101033;
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->procChance = 100;
	}

	//Blessing of the Eternals
	sp = dbcSpell.LookupEntryForced( 51554 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 51945;
		sp->procFlags = PROC_ON_HEAL;
		sp->procChance = sp->eff[1].EffectBasePoints;
	}
	sp = dbcSpell.LookupEntryForced( 51555 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 51945;
		sp->procFlags = PROC_ON_HEAL;
		sp->procChance = sp->eff[1].EffectBasePoints;
	}

	//Soothing Rains
	sp = dbcSpell.LookupEntryForced( 16187 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 16187;	//self proc
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEALING_STREAM_TOTEM;
	}
	sp = dbcSpell.LookupEntryForced( 16205 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 16187;	//self proc
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEALING_STREAM_TOTEM;
	}

	//Earthliving Weapon (Passive)
	sp = dbcSpell.LookupEntryForced( 52007 );
	//if( sp != NULL )
		sp->procChance = 20;

	//Glyph of Water Shield
	sp = dbcSpell.LookupEntryForced( 55436 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;

	//Lightning Bolt - for Glyph of Unleashed Lightning
	sp = dbcSpell.LookupEntryForced(403);
	//if(sp != NULL)
		sp->c_is_flags3 |= SPELL_FLAG3_IS_PROPERLY_IMPLEMENTED_CANCEL;

	//Chain Lightning - for Elemental Fury
	sp = dbcSpell.LookupEntryForced(421);
	//if(sp != NULL)
		sp->c_is_flags3 |= SPELL_FLAG3_IS_ALLOWED_0_COOLDOWN;
		
	//Glyph of Shamanistic Rage
	sp = dbcSpell.LookupEntryForced(63280);
	//if(sp != NULL)
	{
		sp->eff[0].EffectMiscValueB = sp->eff[1].EffectMiscValue;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	//Improved Cleanse Spirit
	sp = dbcSpell.LookupEntryForced( 77130 );
	//if( sp != NULL )
	{
//		SpellEntryEffectCopy( sp, sp, 0, 1 ); //we do not support that target SMT mod, instead we will duplicate the effect and scale effect by 1
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	}

	// Ancestral Spirit
	sp = dbcSpell.LookupEntryForced( 2008 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Earth Shield
	sp = dbcSpell.LookupEntryForced( 974 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Cleanse Spirit
	sp = dbcSpell.LookupEntryForced( 51886 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Purge 
	sp = dbcSpell.LookupEntryForced( 370 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Bind Elemental 
	sp = dbcSpell.LookupEntryForced( 76780 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Hex 
	sp = dbcSpell.LookupEntryForced( 51514 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//Cleansing Waters
	sp = dbcSpell.LookupEntryForced( 86959 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86961;
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
		sp->procChance = 100;
		sp->proc_interval = 6000;
	}
	sp = dbcSpell.LookupEntryForced( 86962 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86958; //yes rank 2 uses smaller spell id
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
		sp->procChance = 100;
		sp->proc_interval = 6000;
	}

	//Stoneclaw Totem Passive
	sp = dbcSpell.LookupEntryForced( 5728 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM | PROC_ON_IMMUNE_VICTIM | PROC_ON_RESIST_VICTIM | PROC_ON_DODGE_VICTIM;
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 55328; //shield the totems(all)
	}
	sp = dbcSpell.LookupEntryForced( 55328 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_SCHOOL_ABSORB;
		sp->eff[1].EffectMiscValue = 127;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_DUEL;	//will script this
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
	}

	//Lava Flows
	sp = dbcSpell.LookupEntryForced( 51480 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65264;
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
		sp->procChance = 100;
//		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
	}
	sp = dbcSpell.LookupEntryForced( 51481 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65264;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
//		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
	}
	sp = dbcSpell.LookupEntryForced( 51482 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65264;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
//		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
	}

	//Glyph of Stormstrike
	sp = dbcSpell.LookupEntryForced( 55446 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

	//Improved Lava Lash
	sp = dbcSpell.LookupEntryForced( 77700 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	
	}
	sp = dbcSpell.LookupEntryForced( 77701 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	
	}

	//Glyph of Elemental Mastery
	//mods spell id 64701 instead 16166 !
	sp = dbcSpell.LookupEntryForced( 55452 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3; 

	//Earthquake
	sp = dbcSpell.LookupEntryForced( 61882 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectAmplitude = 1000;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;	
//		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;	
		sp->eff[0].EffectTriggerSpell = 77478;	//dmg spell and has a 10% chance to chain trigger 77505 stun spell
		sp->c_is_flags2 |= SPELL_FLAG2_IS_AA_CALLING_SCRIPT;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	
//		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;	
	}
	sp = dbcSpell.LookupEntryForced( 77478 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;	
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;	
	}
	sp = dbcSpell.LookupEntryForced( 77505 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;	
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;	
	}

	//Elemental Weapons
	sp = dbcSpell.LookupEntryForced( 16266 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	
		sp->eff[2].Effect = SPELL_EFFECT_NULL;	
	}
	sp = dbcSpell.LookupEntryForced( 29079 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	
		sp->eff[2].Effect = SPELL_EFFECT_NULL;	
	}

	//Spirit Link
	sp = dbcSpell.LookupEntryForced( 98020 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;	
	sp = dbcSpell.LookupEntryForced( 98021 );
	//if( sp != NULL )
	{
		sp->ThreatForSpellCoef = 0; 
		sp->ThreatForSpell = 0; 
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;	//allow cross faction healing in raid
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_DUEL;	//allow cross faction healing in raid
	}

	//Thunderstorm
	sp = dbcSpell.LookupEntryForced( 51490 );
	//if( sp != NULL )
		sp->chained_cast = dbcSpell.LookupEntryForced( 100955 ); //reduce movement speed

	//Call of Flame
	sp = dbcSpell.LookupEntryForced( 16038 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 16038;	//!self proc
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FIRE_NOVA;
	}
	sp = dbcSpell.LookupEntryForced( 16160 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 16038;	//!self proc
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FIRE_NOVA;
	}

	//Glyph of Unleashed Lightning
	sp = dbcSpell.LookupEntryForced( 101052 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SPELL_HASH_LIGHTNING_BOLT;

	//Shamanism
	sp = dbcSpell.LookupEntryForced( 62099 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[2].EffectMiscValue = SMT_CAST_TIME;
		sp->eff[2].EffectBasePoints = -500;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
	}

	//Glyph of Stoneclaw Totem
	sp = dbcSpell.LookupEntryForced( 63298 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 55277;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_STONECLAW_TOTEM;
		sp->proc_interval = 14000;	//to avoid infinit shield spam
	}
	sp = dbcSpell.LookupEntryForced( 55328 );	//this is just a scripted spell to cast the next spell on each totem with inherited value
	sp2 = dbcSpell.LookupEntryForced( 55277 );
	//if( sp != NULL )
	{
		memcpy( &sp2->ss, &sp->ss, sizeof( sp2->ss ) );	//idiot blizz chained casting for every idiot thing
		sp2->eff[0].EffectSpellPowerCoef = sp->eff[0].EffectSpellPowerCoef;
		sp2->eff[1].EffectSpellPowerCoef = sp->eff[1].EffectSpellPowerCoef;
		sp2->eff[2].EffectSpellPowerCoef = sp->eff[2].EffectSpellPowerCoef;
		sp2->SpellScalingId = sp->SpellScalingId;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp2->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}

	//Feedback
	sp = dbcSpell.LookupEntryForced( 86183 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86183;	//self proc !!
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAIN_LIGHTNING;
	}
	sp = dbcSpell.LookupEntryForced( 86184 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86183;	//self proc !!
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAIN_LIGHTNING;
	}
	sp = dbcSpell.LookupEntryForced( 86185 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 86183;	//self proc !!
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAIN_LIGHTNING;
	}

	//Unleash Wind - remove condition
	sp = dbcSpell.LookupEntryForced( 73681 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK;

	//Unleash Flame - remove condition
	sp = dbcSpell.LookupEntryForced( 73683 );
	//if( sp != NULL )
	{
		//I hate SMT
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;	
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}
		
	//Unleash Life - remove condition
	sp = dbcSpell.LookupEntryForced( 73685 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}

	//Lightning Shield - remove condition
	sp = dbcSpell.LookupEntryForced( 324 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_ANY_DAMAGE_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
		sp->proc_interval = 3000;
	}
	//Improved Lightning Shield
/*	sp = dbcSpell.LookupEntryForced( 100956 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 100956;
	}/**/

	//Tidal Waves
	sp = dbcSpell.LookupEntryForced( 51562 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53390;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAIN_HEAL;
		sp->ProcOnNameHash[1] = SPELL_HASH_RIPTIDE;
	}
	sp = dbcSpell.LookupEntryForced( 51563 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53390;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAIN_HEAL;
		sp->ProcOnNameHash[1] = SPELL_HASH_RIPTIDE;
	}
	sp = dbcSpell.LookupEntryForced( 51564 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 53390;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAIN_HEAL;
		sp->ProcOnNameHash[1] = SPELL_HASH_RIPTIDE;
	}
	sp = dbcSpell.LookupEntryForced( 53390 );	
	//if( sp != NULL )
	{
//		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Telluric Currents
	sp = dbcSpell.LookupEntryForced( 82984 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 82987;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
	}
	sp = dbcSpell.LookupEntryForced( 82988 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 82987;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
	}

	//Ancestral Awakening
	sp = dbcSpell.LookupEntryForced( 51556 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_CRIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 52752;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 51557 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_CRIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 52752;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 51558 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_CRIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 52752;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 52752 ); 
	//if( sp != NULL )
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		sp->spell_id_client = sp->Id;
	}
/*
		//shaman - Ancestral Awakening
		sp = dbcSpell.LookupEntryForced( 51558 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectTriggerSpell = 52752;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HEALING_WAVE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_LESSER_HEALING_WAVE;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_RIPTIDE;
		}
		sp = dbcSpell.LookupEntryForced( 51557 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectTriggerSpell = 52752;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HEALING_WAVE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_LESSER_HEALING_WAVE;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_RIPTIDE;
		}
		sp = dbcSpell.LookupEntryForced( 51558 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->eff[0].EffectTriggerSpell = 52752;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HEALING_WAVE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_LESSER_HEALING_WAVE;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_RIPTIDE;
		}
*/
	//Nature's Blessing
	sp = dbcSpell.LookupEntryForced( 30867 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	sp = dbcSpell.LookupEntryForced( 30868 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	sp = dbcSpell.LookupEntryForced( 30869 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;

	//Focused Insight
	sp = dbcSpell.LookupEntryForced( 77794 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77800;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_SHOCK;
		sp->ProcOnNameHash[2] = SPELL_HASH_EARTH_SHOCK;
	}
	sp = dbcSpell.LookupEntryForced( 77795 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77800;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_SHOCK;
		sp->ProcOnNameHash[2] = SPELL_HASH_EARTH_SHOCK;
	}
	sp = dbcSpell.LookupEntryForced( 77796 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77800;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_SHOCK;
		sp->ProcOnNameHash[2] = SPELL_HASH_EARTH_SHOCK;
	}
	sp = dbcSpell.LookupEntryForced( 77800 );	
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Flametongue Weapon (Passive)
	sp = dbcSpell.LookupEntryForced( 10400 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 10444;
		sp->procChance = 100;
	}
	//Static Shock
	sp = dbcSpell.LookupEntryForced( 51525 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 26364;	//lightning shield spell id. what is the spell i should send here ?
		sp->ProcOnNameHash[0] = SPELL_HASH_PRIMAL_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_STORMSTRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_LAVA_LASH;
	}
	sp = dbcSpell.LookupEntryForced( 51526 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 26364;	//lightning shield spell id. what is the spell i should send here ?
		sp->ProcOnNameHash[0] = SPELL_HASH_PRIMAL_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_STORMSTRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_LAVA_LASH;
	}
	sp = dbcSpell.LookupEntryForced( 51527 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 26364;	//lightning shield spell id. what is the spell i should send here ?
		sp->ProcOnNameHash[0] = SPELL_HASH_PRIMAL_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_STORMSTRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_LAVA_LASH;
	}
	sp = dbcSpell.LookupEntryForced( 26364 );
	//if( sp != NULL )
		if( sp->eff[0].EffectSpellPowerCoef == 0.26699999f )
			sp->eff[0].EffectSpellPowerCoef = 0.38f;

	//Flametongue Weapon - not sure about spell id :(
	sp = dbcSpell.LookupEntryForced( 78273 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK;

	//Lava Surge
/*	sp = dbcSpell.LookupEntryForced( 77746 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT_DOT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77762;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
	} */
	sp = dbcSpell.LookupEntryForced( 77756 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT_DOT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77762;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
	}

	//Totemic Wrath
	sp = dbcSpell.LookupEntryForced( 77746 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77747;	//this is casted by totem and not us
		sp->ProcOnNameHash[0] = SPELL_HASH_FIRE_ELEMENTAL_TOTEM;
		sp->ProcOnNameHash[1] = SPELL_HASH_MAGMA_TOTEM;
		sp->ProcOnNameHash[2] = SPELL_HASH_SEARING_TOTEM;
		sp->procChance = 100;
	}

	//Fulmination
	sp = dbcSpell.LookupEntryForced( 88766 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 88767; 
		sp->ProcOnNameHash[0] = SPELL_HASH_EARTH_SHOCK;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 88767 );
	sp2 = dbcSpell.LookupEntryForced( 26364 ); //lightning shield orbs
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = sp2->eff[0].EffectBasePoints;
		sp->eff[0].EffectSpellPowerCoef = sp2->eff[0].EffectSpellPowerCoef;
//		sp->spell_can_crit = false;
//		SetNoEffeCanCrit( sp );
	}
	sp = dbcSpell.LookupEntryForced( 95774 ); //the overlay spell should last until we say so
	//if( sp != NULL )
	{
		sp->DurationIndex = 21;
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	}

	//Rolling Thunder
	sp = dbcSpell.LookupEntryForced( 88756 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAIN_LIGHTNING;
	}
	sp = dbcSpell.LookupEntryForced( 88764 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAIN_LIGHTNING;
	}
				
	//Spiritwalker's Grace
	sp = dbcSpell.LookupEntryForced( 79206 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = 0xFFFFFFFF;	//all spells will ignore move interrupt

	//Deep Healing - Increases the potency of your direct healing spells by up to 20%, based on the current health level of your target (lower health targets are healed for more).  Each point of Mastery increases direct heals by up to an additional 2.5%.
	sp = dbcSpell.LookupEntryForced( 77226 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 20;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Elemental Overload - Grants a 16% chance for Elemental Overload to occur.  Elemental Overload causes a Lightning Bolt, Chain Lightning, or Lava Burst spell you cast to trigger a second, similar spell on the same target at no additional cost that causes 75% of normal damage and no threat.  Each point of Mastery increases the chance of Elemental Overload by an additional 2%.
	sp = dbcSpell.LookupEntryForced( 77222 );
	//if( sp != NULL )
	{
		sp->procChance = 100;	//we will handle this manually
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77222;	//self proc!!FEAR THE REAPER !
		sp->eff[0].EffectBasePoints = 16;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAIN_LIGHTNING;
		sp->ProcOnNameHash[2] = SPELL_HASH_LAVA_BURST;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Enhanced Elements - Increases all Fire, Frost, and Nature damage done by 20%.  Each point of Mastery increases damage by an additional 2.5%
	sp = dbcSpell.LookupEntryForced( 77223 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 20;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Healing Rain
	sp = dbcSpell.LookupEntryForced( 73920 );	
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_AA_TARGETTING_FRIENDLY;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[0].EffectAmplitude = sp->eff[1].EffectAmplitude;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL; 
		sp->eff[0].EffectTriggerSpell = 73921;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 73921 );	
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL; 
	//Efflorescence
	sp = dbcSpell.LookupEntryForced( 34151 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SWIFTMEND;
	}
	sp = dbcSpell.LookupEntryForced( 81274 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SWIFTMEND;
	}
	sp = dbcSpell.LookupEntryForced( 81275 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SWIFTMEND;
	}
	sp = dbcSpell.LookupEntryForced( 81262 );	
	//if( sp != NULL )
	{
/*		sp->c_is_flags |= SPELL_FLAG_IS_AA_TARGETTING_FRIENDLY;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_AA_CALLING_SCRIPT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[0].EffectAmplitude = sp->eff[1].EffectAmplitude;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL; 
		sp->eff[1].Effect = SPELL_EFFECT_NULL;*/
		sp->c_is_flags |= SPELL_FLAG_IS_AA_TARGETTING_FRIENDLY;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_HEAL;
		sp->eff[0].EffectAmplitude = sp->eff[1].EffectAmplitude;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL; 
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		sp->Spell_value_is_scripted = true;
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->spell_id_client = dbcSpell.LookupEntryForced( 81269 )->Id;
	}
	sp = dbcSpell.LookupEntryForced( 81269 );	
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL; 
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		sp->Spell_value_is_scripted = true;
		SetSpellPowerCoeffsAll(sp,0.0f);
	}

	//nature swiftness
	sp = dbcSpell.LookupEntryForced( 16188 );	
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 17116 );	
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	

		//Astral Shift
		sp = dbcSpell.LookupEntryForced( 51474 );	
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_NULL;
			sp->procFlags = PROC_ON_SPELL_LAND_VICTIM;
		}
		sp = dbcSpell.LookupEntryForced( 51478 );	
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_NULL;
			sp->procFlags = PROC_ON_SPELL_LAND_VICTIM;
		}
		sp = dbcSpell.LookupEntryForced( 51479 );	
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_NULL;
			sp->procFlags = PROC_ON_SPELL_LAND_VICTIM;
		}
		sp = dbcSpell.LookupEntryForced( 52179 );		//the proc
		//if( sp != NULL )
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;
			
		//Earthen Power
		sp = dbcSpell.LookupEntryForced( 51523 );	
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51531;
			sp->procChance = 100;
//			sp->procChance = sp->eff[1].EffectBasePoints + 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_EARTHBIND_TOTEM;	//not just on cast but all the time ? :(
		}
		sp = dbcSpell.LookupEntryForced( 51524 );	
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51531;	//59566
			sp->procChance = 100;
//			sp->procChance = sp->eff[1].EffectBasePoints + 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_EARTHBIND_TOTEM;	//not just on cast but all the time ? :(
		}
		CreateDummySpell( 51531 );
		sp2 = dbcSpell.LookupEntryForced( 51531 );
		sp = dbcSpell.LookupEntryForced( 6474 );
		//if( sp != NULL )
		{
			SpellEntryEffectCopy( sp,sp2,0,0); //for duration and what other i might forget about
			sp2->DurationIndex = sp->DurationIndex;
			sp2->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp2->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
			sp2->eff[0].EffectTriggerSpell = 59566;
			sp2->eff[0].EffectAmplitude = 2000;
			sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_TOTEM_EARTH;
			sp2->c_is_flags |= SPELL_FLAG_IS_TRIGGERED_BY_TARGET;
		}
		sp = dbcSpell.LookupEntryForced( 59566 );	
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_NONE;
			sp->eff[0].EffectBasePoints = MAX_AURAS;	//all snares
		}
		//Frozen Power
		sp = dbcSpell.LookupEntryForced( 63373 );	
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 63685;
			sp->procChance = sp->eff[1].EffectBasePoints + 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_FROST_SHOCK;
		}
		sp = dbcSpell.LookupEntryForced( 63374 );	
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 63685;
			sp->procChance = sp->eff[1].EffectBasePoints + 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_FROST_SHOCK;
		}
		sp = dbcSpell.LookupEntryForced( 63685 );
		//if( sp != NULL )
		{
			sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN; //sharstar said this. So it could be wrong
		}

		//Grounding Totem Effect
		sp = dbcSpell.LookupEntryForced( 8178 );	
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;			//no need for area aura if totems are spamming spells anyway
			sp->eff[0].EffectBasePoints = 1;
			sp->DurationIndex = AURA_DURATION_INDEX_15_SECONDS;		//don't leave an infinit passive aura on targets
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
		}
		//Glyph of Grounding Totem
		sp = dbcSpell.LookupEntryForced( 55441 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 89523; //reflect spells casted on grounding totem
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->procChance = 100;
			sp->ProcOnNameHash[0] = SPELL_HASH_GROUNDING_TOTEM;
		}
		sp = dbcSpell.LookupEntryForced( 89523 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_TOTEM_AIR;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[0].EffectBasePoints = 1; //all spells !
		}
		//Glyph of Water Walking
		sp = dbcSpell.LookupEntryForced( 58057 );
		sp2 = dbcSpell.LookupEntryForced( 546 ); //Water Walking
		//if( sp != NULL )
		{
			sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
			sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
			sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
		}
		//Tremor Totem
		sp = dbcSpell.LookupEntryForced( 8146 );	
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->eff[2].Effect = SPELL_EFFECT_NULL;
		}

		//Healing Stream Totem
		sp = dbcSpell.LookupEntryForced( 52041 );	
		sp2 = dbcSpell.LookupEntryForced( 5672 );	
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_HEAL;
			sp->eff[0].EffectBasePoints = 28;
			sp->eff[0].EffectSpellPowerCoef = 0.0827f;
			//${($5672m1+($SP*0.0827)*$<bonus>)}
//202,"$purification=$?s16213[${1.1}][${1.0}]
//$soothe=$?s16205[${1.50}]?s16187[${1.25}][${1.0}]
//$bonus=${($<purification>*$<soothe>)}",
//			sp->eff[0].EffectSpellPowerCoef = 0.1080f;	//this seems to be a bit off with client ?
//			SetSpellPowerCoeffsAll(sp, 0.08f);
			sp->spell_id_client = 52042;			//according to dbc
		}

		//totem of wrath
		sp = dbcSpell.LookupEntryForced( 57658 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		}

		//fire nova
		sp = dbcSpell.LookupEntryForced( 1535 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
/*			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME;
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 8349;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME;
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 19823;	//only visual fire nova
			sp->c_is_flags |= SPELL_FLAG_IS_TRIGGERED_BY_TARGET;*/
		}
		sp2 = dbcSpell.LookupEntryForced( 8349 );
		{
			sp2->eff[0].Effect = SPELL_EFFECT_NULL;
			sp2->eff[1].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex;
			sp2->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;
			sp2->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp2->eff[2].Effect = SPELL_EFFECT_NULL;
			sp2->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//can spam spell but does trigger other spells
		}

		//Call of the Elements 
		sp = dbcSpell.LookupEntryForced( 66842 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY; //button 132,133,134,135
		}
		//Call of the Ancestors 
		sp = dbcSpell.LookupEntryForced( 66843 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY; //button 136,137,138,139
		}
		//Call of the Spirits 
		sp = dbcSpell.LookupEntryForced( 66844 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY; //button 140,141,142,143
		}

		//Rockbitter weapon 
/*		sp = dbcSpell.LookupEntryForced( 8017 );
		//if( sp != NULL )
			sp->SpellTargetRestrictionsId = 0;
		//Frostbrand weapon 
		sp = dbcSpell.LookupEntryForced( 8033 );
		//if( sp != NULL )
			sp->SpellTargetRestrictionsId = 0;
		//Flametongue weapon 
		sp = dbcSpell.LookupEntryForced( 8024 );
		//if( sp != NULL )
			sp->SpellTargetRestrictionsId = 0; */

		//Flametongue totem 
		sp = dbcSpell.LookupEntryForced( 52109 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		}

		//Unleashed Rage
		sp = dbcSpell.LookupEntryForced( 30802 );
		//if( sp != NULL )
		{
			//but why ?
			sp->RequiredShapeShift = 0;
		}
		sp = dbcSpell.LookupEntryForced( 30808 );
		//if( sp != NULL )
		{
			//but why ?
			sp->RequiredShapeShift = 0;
		}
/*		sp = dbcSpell.LookupEntryForced( 30809 );
		//if( sp != NULL )
		{
			//but why ?
			sp->RequiredShapeShift = 0;
		}*/
		//Elemental Oath
		sp = dbcSpell.LookupEntryForced( 51466 );
		//if( sp != NULL )
		{
			//missing effect
			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
			sp->eff[1].EffectSpellGroupRelation[0] = 0;
			sp->eff[1].EffectSpellGroupRelation[1] = 0x00004000; // Clearcasting ( 16246 )
			//but why ?
			sp->RequiredShapeShift = 0;
		}
		sp = dbcSpell.LookupEntryForced( 51470 );
		//if( sp != NULL )
		{
			//missing effect
			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
			sp->eff[1].EffectSpellGroupRelation[0] = 0;
			sp->eff[1].EffectSpellGroupRelation[1] = 0x00004000; // Clearcasting ( 16246 )
			//but why ?
			sp->RequiredShapeShift = 0;
		}
		// Flurry -shaman
		sp = dbcSpell.LookupEntryForced( 16256 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 16281 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 16282 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;

		sp = dbcSpell.LookupEntryForced( 16257 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp = dbcSpell.LookupEntryForced( 16277 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp = dbcSpell.LookupEntryForced( 16278 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK;

		// Flurry - warrior
		sp = dbcSpell.LookupEntryForced( 12319 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 12971 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 12972 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 12966 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp = dbcSpell.LookupEntryForced( 12967 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp = dbcSpell.LookupEntryForced( 12968 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
		/**********************************************************
		 *	Shamanistic Rage
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 30823 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK;

		//hex gets removed on dmg
		sp = dbcSpell.LookupEntryForced( 51514 );
		//if( sp != NULL )
			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;

		//summon only 1 elemental totem
		sp = dbcSpell.LookupEntryForced( 2894 );
		//if( sp != NULL && sp->Id == 2894 )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_TOTEM_FIRE; //remove this targeting. it is enough to get 1 target

		//summon only 1 elemental totem
		sp = dbcSpell.LookupEntryForced( 2062 );
		//if( sp != NULL && sp->Id == 2062 )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_TOTEM_EARTH; //remove this targeting. it is enough to get 1 target

		/**********************************************************
		 *	Elemental Focus
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 16164 );
		//if( sp != NULL && sp->Id == 16164 )
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		//the proc
		sp = dbcSpell.LookupEntryForced( 16246 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;

		/**********************************************************
		 *	Stormstrike
		 **********************************************************/
//		sp = dbcSpell.LookupEntryForced( 17364 );
//		//if( sp != NULL && sp->Id == 17364 )
//			sp->eff[0].Effect=0 ;
//			sp->procFlags=PROC_ON_SPELL_HIT_VICTIM_DOT ;

		/**********************************************************
		 *	Bloodlust
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 2825 );
		//if( sp != NULL )
			sp->chained_cast = dbcSpell.LookupEntryForced( 57724 );	//sated

		/**********************************************************
		 *	Heroism
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 32182 );
		//if( sp != NULL )
			sp->chained_cast = dbcSpell.LookupEntryForced( 57723 );	//Exhaustion

		//sated
		sp = dbcSpell.LookupEntryForced( 57724 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			sp->ThreatForSpellCoef = 0;
			sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
		}
		//Exhaustion
		sp = dbcSpell.LookupEntryForced( 57723 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			sp->ThreatForSpellCoef = 0;
			sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
		}
		//if( sp != NULL )
		/**********************************************************
		 *	Lightning Overload 
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 30675 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 30675;	//self proc !
			sp->proc_interval = 1000;	//avoid cast on cast loop
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LIGHTNING_BOLT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CHAIN_LIGHTNING;
//			sp->spell_can_crit = false;
//			sp->Spell_value_is_scripted = true;
//			SetSpellPowerCoeffsAll(sp,0.0f);
		}
		sp = dbcSpell.LookupEntryForced( 30678 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 30675;	//self proc !
			sp->proc_interval = 1000;	//avoid cast on cast loop
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LIGHTNING_BOLT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CHAIN_LIGHTNING;
		}
		sp = dbcSpell.LookupEntryForced( 30679 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 30675;	//self proc !
			sp->proc_interval = 1000;	//avoid cast on cast loop
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LIGHTNING_BOLT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CHAIN_LIGHTNING;
		}
		/**********************************************************
		 *	Purge 
		 **********************************************************/
/*		sp = dbcSpell.LookupEntryForced( 370 ); 
		//if( sp != NULL )
			sp->GetDispelType() = DISPEL_MAGIC;
			*/

		/**********************************************************
		 *	Shamanistic Focus
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 43338 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;

		sp = dbcSpell.LookupEntryForced( 43339 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		//some say earth shock should interrup spell cast. Others say it shoud not
/*		sp = dbcSpell.LookupEntryForced( 8042 ); 
		//if( sp != NULL )
			sp->eff[2].Effect = SPELL_EFFECT_INTERRUPT_CAST;
			*/

		//shaman - Feral Spirit
		sp = dbcSpell.LookupEntryForced( 51533 ); 
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_INHERITING_LEVEL;
			sp->eff[0].EffectBasePoints--;	//there must be a flag signaling when to add or not to add +1
		}
		//Spirit Walk
		sp = dbcSpell.LookupEntryForced( 58876 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET_MASTER;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET_MASTER;
			sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET_MASTER;
			sp->maxstack = 1;
			dbcSpell.LookupEntryForced( 58875 )->chained_cast = sp;	//we also boost our speed
		}
		//Spirit Hunt : update creature_proto set auras = '58877' where entry = 29264 - or manually cast it ? 
		sp = dbcSpell.LookupEntryForced( 58877 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 58879;	
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 100;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		} 
		sp = dbcSpell.LookupEntryForced( 58879 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET_MASTER;
		}		

		//shaman - Elemental Mastery
		sp = dbcSpell.LookupEntryForced( 16166 ); 
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;
			sp->procCharges = 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_ALLOWED_TO_LEAVE_CHAINED_AURAS;
		}

		//shaman - Primal Wisdom
		sp = dbcSpell.LookupEntryForced( 51522 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procFlags2 = PROC2_TARGET_SELF;
		} 

		//shaman - Improved Chain Heal
		sp = dbcSpell.LookupEntryForced( 30873 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectDieSides = 0;
		}
		sp = dbcSpell.LookupEntryForced( 30872 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectDieSides = 0;
		}

		// Shaman - Improved Fire Totems
		// Seasoned Winds
		sp = dbcSpell.LookupEntryForced( 16086 ); 
		//if( sp != NULL )
		{
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->eff[0].EffectBasePoints = 2;
			sp->eff[0].EffectTriggerSpell = 97618;	
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_WIND_SHEAR;
			sp->procFlags = PROC_ON_INTERRUPT_EVENT | PROC_ON_NOT_VICTIM;
			sp->procChance = 100;
		}
		sp = dbcSpell.LookupEntryForced( 16544 ); 
		//if( sp != NULL )
		{
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->eff[0].EffectBasePoints = 1;
			sp->eff[0].EffectTriggerSpell = 97618;	
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_WIND_SHEAR;
			sp->procFlags = PROC_ON_INTERRUPT_EVENT | PROC_ON_NOT_VICTIM;
			sp->procChance = 100;
		}

		// Shaman Arena totems fix
		// Totem of Survival
		sp = dbcSpell.LookupEntryForced( 46097 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;
		sp = dbcSpell.LookupEntryForced( 43860 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;
		sp = dbcSpell.LookupEntryForced( 43861 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;
		sp = dbcSpell.LookupEntryForced( 43862 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;

		// Totem of Indomitability
		sp = dbcSpell.LookupEntryForced( 43859 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 46096 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 43857 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 43858 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		// Totem of Third WInd
		sp = dbcSpell.LookupEntryForced( 46098 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}
		sp = dbcSpell.LookupEntryForced( 34138 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}
		sp = dbcSpell.LookupEntryForced( 42370 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}
		sp = dbcSpell.LookupEntryForced( 43728 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}
		sp = dbcSpell.LookupEntryForced( 60556 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}
		sp = dbcSpell.LookupEntryForced( 60557 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}
		sp = dbcSpell.LookupEntryForced( 60558 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}
		sp = dbcSpell.LookupEntryForced( 60559 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LESSER_HEALING_WAVE;
		}

		/**********************************************************
		 *	Elemental Devastation
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 29179 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp = dbcSpell.LookupEntryForced( 29180 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp = dbcSpell.LookupEntryForced( 30160 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;

		/**********************************************************
		 *	Ancestral healing
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 16176 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_HEAL;
		sp = dbcSpell.LookupEntryForced( 16235 ); 
		//if( sp != NULL )
			sp->procFlags = PROC_ON_HEAL;

		/**********************************************************
		 *	Ancestral healing proc spell
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 16177 );
		//if( sp != NULL )
			sp->rangeIndex = 4;
		sp = dbcSpell.LookupEntryForced( 16236 );
		//if( sp != NULL )
			sp->rangeIndex = 4;

		//wrath of air totem targets sorounding creatures instead of us
		sp = dbcSpell.LookupEntryForced( 2895 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}

/*		sp = dbcSpell.LookupEntryForced( 20608 ); //Reincarnation
		//if( sp != NULL )
		{
			for(uint32 i=0;i<8;i++)
			{
				if( sp->Reagent[i])
				{
					sp->Reagent[i] = 0;
					sp->ReagentCount[i] = 0;
				}
			}
		}*/

		//shaman - Maelstrom Weapon
		sp = dbcSpell.LookupEntryForced( 51528 ); 
		//if( sp != NULL )
		{
			sp->procFlags |= PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 60;
			sp->proc_interval = 5000;
		}
		sp = dbcSpell.LookupEntryForced( 51529 ); 
		//if( sp != NULL )
		{
			sp->procFlags |= PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 70;
			sp->proc_interval = 300;
		}
		sp = dbcSpell.LookupEntryForced( 51530 ); 
		//if( sp != NULL )
		{
			sp->procFlags |= PROC_ON_MELEE_ATTACK;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 80;
			sp->proc_interval = 1000;
		}
		//this is proc -> set remove condition
		sp = dbcSpell.LookupEntryForced( 53817 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
		}
		//shaman - Rockbiter Weapon
		sp = dbcSpell.LookupEntryForced( 8017 ); 
		//if( sp != NULL )
			sp->eff[1].EffectBasePoints = 1800;	//this is duration for enchants :(

		//shaman - Earth Shield
		//170,"$heal=$?a63279[${$m1*1.2}][${$m1}]",
		sp = dbcSpell.LookupEntryForced( 974 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->procFlags2 |= PROC2_REMOVEONUSE;
			sp->proc_interval = 3000; //few seconds
			sp->eff[0].EffectTriggerSpell = 379;
			sp->SpellCategoriesId = 30; //set dispel type to magical. I really hope i got this right. Not even sure it is supposed to be like this
		}
//		sp2 = dbcSpell.LookupEntryForced( 379 ); 
		//if( sp != NULL )
//			sp2->eff[0].EffectSpellPowerCoef = 0.286f;
		//Glyph of Earth Shield
		sp = dbcSpell.LookupEntryForced( 63279 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
			sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
			sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
		}
		// Nature's Guardian
		sp = dbcSpell.LookupEntryForced( 30881 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 30000;
			sp->eff[0].EffectTriggerSpell = 31616;
		}
		sp = dbcSpell.LookupEntryForced( 30883 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 30000;
			sp->eff[0].EffectTriggerSpell = 31616;
		}
		sp = dbcSpell.LookupEntryForced( 30884 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->proc_interval = 30000;
			sp->eff[0].EffectTriggerSpell = 31616;
		}
		//Mana Tide - Mana Tide Totem
//		sp = dbcSpell.LookupEntryForced( 16191 ); 
//		sp2 = dbcSpell.LookupEntryForced( 16190 ); 
		//if( sp != NULL )
		{
//			sp->eff[1].Effect = SPELL_EFFECT_NULL; //this is periodically casting 39610 which is a dummy spell ? Maybe visual ? ^^
//			sp->eff[0].Effect = SPELL_EFFECT_PERSISTENT_AREA_AURA;
//			sp->eff[0].EffectAmplitude = 1000;
//			sp->DurationIndex = sp2->DurationIndex;
//			sp->SpellVisual[0] = 4279;
//			sp->c_is_flags |= SPELL_FLAG_IS_AA_TARGETTING_FRIENDLY;
		}
		//mana tide totem tick
//		sp = dbcSpell.LookupEntryForced( 39610 );  //this is old version
		//if( sp != NULL )
		{
//			sp->eff[0].Effect = SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT;
//			sp->eff[0].EffectBasePoints = 5;
		}
		//////////////////////////////////////////
		// SHAMAN WRATH OF AIR TOTEM			//
		//////////////////////////////////////////
		sp = dbcSpell.LookupEntryForced( 2895 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}

	//////////////////////////////////////////
	// MAGE								//
	//////////////////////////////////////////

	// Insert mage spell fixes here

	//Glyph of Mage Armor
	sp = dbcSpell.LookupEntryForced( 56383 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	//Mage Armor
	sp = dbcSpell.LookupEntryForced( 6117 );
	//if( sp != NULL )
	{
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED;
		sp->eff[1].EffectBasePoints *= 100;
	}

	//Glyph of Ice Barrier
	sp = dbcSpell.LookupEntryForced( 63095 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;

	//Pyroblast 
	sp2 = dbcSpell.LookupEntryForced( 92315 );  //Pyroblast!
	sp = dbcSpell.LookupEntryForced( 11366 ); 
	{ 
		DynamicCreateAssignSpellStackGroup( sp, 0, "Pyroblast" );
		DynamicCreateAssignSpellStackGroup( sp2, 0, "Pyroblast" );
	} 
	//spells that should be stealable by mage
	{
		dbcSpell.LookupEntryForced( 16188 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Nature's Swiftness
		dbcSpell.LookupEntryForced( 61295 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Riptide
		dbcSpell.LookupEntryForced( 69369 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Predatory Strikes - proc
		dbcSpell.LookupEntryForced( 17116 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Nature's Swiftness
		dbcSpell.LookupEntryForced( 10060 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Power Infusion
		dbcSpell.LookupEntryForced( 31842 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Divine Favor
		dbcSpell.LookupEntryForced( 11426 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Ice Barrier
		dbcSpell.LookupEntryForced( 12472 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Icy Veins
		dbcSpell.LookupEntryForced( 974 )->c_is_flags2 |= SPELL_FLAG2_IS_SPELL_STEAL_SAFE;	// Earth Shield
	}
	//Glyph of Frostfire
	sp = dbcSpell.LookupEntryForced( 61205 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}

	//Fingers of Frost
	sp = dbcSpell.LookupEntryForced( 44543 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 7;
	}
	sp = dbcSpell.LookupEntryForced( 44545 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 14;
	}
	sp = dbcSpell.LookupEntryForced( 83074 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 20;
	}
	//Deep Freeze
	sp = dbcSpell.LookupEntryForced( 44572 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CHILL_SPELL;
		sp->sar.TargetAuraState = 0; //added custom handler for this
//		sp->MechanicsType = MECHANIC_FROZEN; //remove this so it can be casted on world bosses
	}
	//Freeze - pet freez
	sp = dbcSpell.LookupEntryForced( 33395 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_CHILL_SPELL;

	//Piercing Chill
	sp = dbcSpell.LookupEntryForced( 83156 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83154;	
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROSTBOLT;
	}
	sp = dbcSpell.LookupEntryForced( 83157 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99560;	
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROSTBOLT;
	}
	sp = dbcSpell.LookupEntryForced( 83154 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 14; //8 yards ?
		sp->MaxAffectedTargets = 1 + dbcSpell.LookupEntryForced( 83156 )->eff[0].EffectBasePoints;
	}
	sp = dbcSpell.LookupEntryForced( 99560 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 14; //8 yards ?
		sp->MaxAffectedTargets = 1 + dbcSpell.LookupEntryForced( 83157 )->eff[0].EffectBasePoints;
	}

	//Molten Shields
	sp = dbcSpell.LookupEntryForced( 11094 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectTriggerSpell = 11094;		//self proc !
		sp->procChance = 100;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLAZING_SPEED;
	}

	//Improved Freeze
	sp = dbcSpell.LookupEntryForced( 86259 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectTriggerSpell = 44544;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->ProcOnNameHash[0] = SPELL_HASH_FREEZE;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
	}
	sp = dbcSpell.LookupEntryForced( 86260 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectTriggerSpell = 44544;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->ProcOnNameHash[0] = SPELL_HASH_FREEZE;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
	}
	sp = dbcSpell.LookupEntryForced( 86314 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectTriggerSpell = 44544;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->ProcOnNameHash[0] = SPELL_HASH_FREEZE;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
	}
	sp = dbcSpell.LookupEntryForced( 44544 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;	//wait until ice lance anctually reaches the target
		sp->procCharges = 1;
		SpellEntryEffectCopy(sp,sp,0,1);
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DUMMY;
	}

	//Permafrost
	sp = dbcSpell.LookupEntryForced( 11175 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectTriggerSpell = 91394;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 12569 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectTriggerSpell = 91394;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 12571 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectTriggerSpell = 91394;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
//	sp = dbcSpell.LookupEntryForced( 68391 );
	//if( sp != NULL )
//		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE; //it's still not visible :(

	//Fire Power
	sp = dbcSpell.LookupEntryForced( 83619 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMIES_AROUND_CASTER;
		sp->eff[0].EffectRadiusIndex = 13;	//10 yards ?
	}

	//Reactive Barrier
	sp = dbcSpell.LookupEntryForced( 86303 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->proc_interval = 30000;
		sp->eff[0].EffectTriggerSpell = 11426;
	}
	sp = dbcSpell.LookupEntryForced( 86304 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->proc_interval = 30000;
		sp->eff[0].EffectTriggerSpell = 11426;
	}

	//Enduring Winter
	sp = dbcSpell.LookupEntryForced( 44561 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROSTBOLT;
	}
	sp = dbcSpell.LookupEntryForced( 86500 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROSTBOLT;
	}
	sp = dbcSpell.LookupEntryForced( 86508 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROSTBOLT;
	}

	//Ice Shards
	sp = dbcSpell.LookupEntryForced( 11185 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->eff[0].EffectTriggerSpell = 12485;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLIZZARD;
		sp->procChance = 100;
		sp->proc_interval=0;	//needs to proc on multiple targets
	}
	sp = dbcSpell.LookupEntryForced( 12487 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->eff[0].EffectTriggerSpell = 12485;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLIZZARD;
		sp->procChance = 100;
		sp->proc_interval=0;	//needs to proc on multiple targets
	}
	
	//Improved Cone of Cold
	sp = dbcSpell.LookupEntryForced( 11190 );
	//if( sp != NULL )
	{
//		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 83301;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CONE_OF_COLD;
		sp->procChance = 100;
		sp->proc_interval = 0; //can be casted on multiple targets
	}
	sp = dbcSpell.LookupEntryForced( 12489 );
	//if( sp != NULL )
	{
//		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 83302;	
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CONE_OF_COLD;
		sp->procChance = 100;
		sp->proc_interval = 0; //can be casted on multiple targets
	}
	sp = dbcSpell.LookupEntryForced( 83301 );
	//if( sp != NULL )
	{
		 sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		 sp->rangeIndex = 11; //but we need 12 yards not 15
//		 sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}
	sp = dbcSpell.LookupEntryForced( 83302 );
	//if( sp != NULL )
	{
		 sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		 sp->rangeIndex = 11; //but we need 12 yards not 15
//		 sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}

	//Early Frost
	sp = dbcSpell.LookupEntryForced( 83049 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[2].EffectTriggerSpell = 83162;	//nullify original spell
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROSTBOLT;
		sp->procChance = 100;
		sp->proc_interval = 15000;	//this is the spell durtation to avoid refresh
	}
	sp = dbcSpell.LookupEntryForced( 83050 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[2].EffectTriggerSpell = 83239;	//nullify original spell
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROSTBOLT;
		sp->procChance = 100;
		sp->proc_interval = 15000;	//this is the spell durtation to avoid refresh
	}

	//Improved Mana Gems
	sp = dbcSpell.LookupEntryForced( 31584 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83098;
		sp->ProcOnNameHash[0] = SPELL_HASH_REPLENISH_MANA;	//mana gem spell
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 31585 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83098;
		sp->ProcOnNameHash[0] = SPELL_HASH_REPLENISH_MANA;	//mana gem spell
		sp->procChance = 100;
	}

	//Improved Polymorph
	sp = dbcSpell.LookupEntryForced( 11210 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83046;
		sp->ProcOnNameHash[0] = SPELL_HASH_POLYMORPH;
		sp->procChance = 100;
		sp->proc_interval = 10000;
	}
	sp = dbcSpell.LookupEntryForced( 12592 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 83047;
		sp->ProcOnNameHash[0] = SPELL_HASH_POLYMORPH;
		sp->procChance = 100;
		sp->proc_interval = 10000;
	}
	sp = dbcSpell.LookupEntryForced( 83046 );
	//if( sp != NULL )
	{
		 sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
 		 sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}
	sp = dbcSpell.LookupEntryForced( 83047 );
	//if( sp != NULL )
	{
		 sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
 		 sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}

	//Invocation
	sp = dbcSpell.LookupEntryForced( 84722 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_INTERRUPT_EVENT | PROC_ON_NOT_VICTIM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_COUNTERSPELL;	//actually spells that interrupt spell casting
	}
	sp = dbcSpell.LookupEntryForced( 84723 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_INTERRUPT_EVENT | PROC_ON_NOT_VICTIM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_COUNTERSPELL;	//actually spells that interrupt spell casting
	}
		
	//Glyph of Molten Armor
	sp = dbcSpell.LookupEntryForced( 56382 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
	//Flashburn - Increases the damage done by all your periodic fire damage effects by 20%.  Each point of Mastery increases periodic damage done by an additional 2.5%.
	sp = dbcSpell.LookupEntryForced( 76595 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 20;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Frostburn - All your spells deal 5% increased damage against Frozen targets.  Each point of Mastery increases damage by an additional 2.5%.
	sp = dbcSpell.LookupEntryForced( 76613 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 5;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Mana Adept - Increases all spell damage done by up to 12%, based on the amount of mana the Mage has unspent.  Each point of Mastery increases damage done by up to an additional 1.5%.
	sp = dbcSpell.LookupEntryForced( 76547 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 12;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
		
	//Glyph of Frost Armor
	sp = dbcSpell.LookupEntryForced( 98397 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	//Glyph of Ice Block
	sp = dbcSpell.LookupEntryForced( 56372 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 56372; //!self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_ICE_BLOCK;
		sp->procChance = 100;
	}
	//Glyph of Invisibility
	sp = dbcSpell.LookupEntryForced( 56366 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
	//Invisibility
	sp = dbcSpell.LookupEntryForced( 66 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].EffectTriggerSpell = 96243;	//we use this to get out of map
		sp->eff[1].EffectAmplitude = 2900;
		SpellEntryEffectCopy(sp,sp,1,0); //yes, it's fucked up, eff 1 into eff 0
//		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell = 110311;	//we use this one to fade
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		sp->Attributes &= ~ATTRIBUTES_MOUNT_CASTABLE;
	}
	sp = dbcSpell.LookupEntryForced( 110311 );
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	//Invisibility(Effect)
	sp = dbcSpell.LookupEntryForced( 96243 );
	//if( sp != NULL )
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_CAST_SPELL;
		sp->Attributes &= ~ATTRIBUTES_MOUNT_CASTABLE;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_SPEED;
		sp->eff[2].EffectBasePoints = 0;	//unless glyphed, make it have 0 effect
	}
	//Prismatic Cloak
	sp = dbcSpell.LookupEntryForced( 31574 );
	//if( sp != NULL )
		sp->eff[1].EffectMiscValue = SMT_TIME;
	sp = dbcSpell.LookupEntryForced( 31575 );
	//if( sp != NULL )
		sp->eff[1].EffectMiscValue = SMT_TIME;
	sp = dbcSpell.LookupEntryForced( 54354 );
	//if( sp != NULL )
		sp->eff[1].EffectMiscValue = SMT_TIME;

		//Mirror Image -> this is not finished. But at least make them spawn
		sp = dbcSpell.LookupEntryForced( 55342 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON;
			sp->eff[0].EffectMiscValue = 47244;		//some gnomes on the field
			sp->eff[0].EffectMiscValueB = 1021;
			sp->eff[0].EffectBasePoints = 2;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->eff[2].Effect = SPELL_EFFECT_NULL;
			sp->c_is_flags |= SPELL_FLAG_IS_INHERITING_LEVEL;
			sp->ThreatForSpellCoef = 0.1f;
		}
		sp = dbcSpell.LookupEntryForced( 45204 );
		//if( sp != NULL )
		{
			sp->FacingCasterFlags = 0;
			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		}
		//Hypothermia
		sp = dbcSpell.LookupEntryForced( 41425 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
//			sp->GetDispelType() = 66666; //this shoud be invalid
		}
		//deserter
		sp = dbcSpell.LookupEntryForced( 26013 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;

		//Improved Counterspell 
		sp = dbcSpell.LookupEntryForced( 11255 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_COUNTERSPELL;
		}
		sp = dbcSpell.LookupEntryForced( 12598 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_COUNTERSPELL;
		}

		//Hot Streak 
		sp = dbcSpell.LookupEntryForced( 44445 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_NOT_VICTIM | PROC_ON_CRIT | PROC_ON_NO_DOT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 48108;
//			sp->eff[1].Effect = SPELL_EFFECT_NULL;
			sp->proc_interval = 17000;	//should cast all the time, but it is getting reported as imba
			sp->procChance = 25;	//has a chance ? how much chance ?
		}
		//Improved Hot Streak
		sp = dbcSpell.LookupEntryForced( 44446 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_NOT_VICTIM | PROC_ON_NO_DOT ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 48108;
//			sp->eff[1].Effect = SPELL_EFFECT_NULL;
//			sp->proc_interval = 24000;	//should cast all the time, but it is getting reported as imba
		}
		sp = dbcSpell.LookupEntryForced( 44448 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_NOT_VICTIM | PROC_ON_NO_DOT ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 48108;
//			sp->eff[1].Effect = SPELL_EFFECT_NULL;
//			sp->proc_interval = 24000;	//should cast all the time, but it is getting reported as imba
		}
		sp = dbcSpell.LookupEntryForced( 48108 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
		}

		//Impact
		sp = dbcSpell.LookupEntryForced( 11103 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			SetPPMForChance( sp, 4, 1000, 60000 );
//			sp->proc_interval = 60000 / ( 100 - sp->procChance );
		}
		sp = dbcSpell.LookupEntryForced( 12357 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			SetPPMForChance( sp, 4, 1000, 60000 );
		}
		sp = dbcSpell.LookupEntryForced( 12358 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			SetPPMForChance( sp, 4, 1000, 60000 );
		}
		//proc of the talent aura
		sp = dbcSpell.LookupEntryForced( 64343 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;	//next fire blast
		}
		sp = dbcSpell.LookupEntryForced( 12355 );
		//if( sp != NULL )
		{
			sp->ProcOnNameHash[0] = SPELL_HASH_FIRE_BLAST;
			SpellEntryEffectCopy(sp,sp,1,2);
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[2].Effect = SPELL_EFFECT_NULL;	//using this to gather targets and eff 1 to get the list of spells we need to spread
		}
	    
		//Improved Blink - *Rank 1*
		sp = dbcSpell.LookupEntryForced( 31569 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_BLINK;
		}
		sp = dbcSpell.LookupEntryForced( 31570 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_BLINK;
		}

		//Mage - Torment the Weak
		sp = dbcSpell.LookupEntryForced( 29447 );
		//if( sp != NULL )
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp = dbcSpell.LookupEntryForced( 55339 );
		//if( sp != NULL )
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp = dbcSpell.LookupEntryForced( 55340 );
		//if( sp != NULL )
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;

		//Mage - Arcane Blast
		sp = dbcSpell.LookupEntryForced( 30451 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 36032;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[1] = SPELL_HASH_ARCANE_BLAST;
		}
		sp = dbcSpell.LookupEntryForced( 36032 );
		//if( sp != NULL )
		{
			sp->procCharges = 1;
			sp->maxstack = 4;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		//Incanter's Absorption
		sp = dbcSpell.LookupEntryForced( 44394 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ABSORB_VICTIM | PROC_ON_AURA_REMOVE_EVENT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 44413;
			sp->proc_interval = 10000;	//no spam ok ?
		}
		sp = dbcSpell.LookupEntryForced( 44395 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ABSORB_VICTIM | PROC_ON_AURA_REMOVE_EVENT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 44413;
			sp->proc_interval = 10000;	//no spam ok ?
		}

		// Arcane Concentration
		sp = dbcSpell.LookupEntryForced( 11213 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+10;
		}
		sp = dbcSpell.LookupEntryForced( 12574 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+10;
		}
		sp = dbcSpell.LookupEntryForced( 12575 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = sp->eff[0].EffectBasePoints+10;
		}

		//Clearcasting
		sp = dbcSpell.LookupEntryForced( 12536 );
		//if( sp != NULL )
		{
			sp->AuraInterruptFlags &= ~(AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN | AURA_INTERRUPT_ON_CAST_SPELL | AURA_INTERRUPT_ON_HOSTILE_SPELL_INFLICTED);
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procCharges = 1; //1 is removed on apply, 1 is used on spell cast, 1 is left ?
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	//need it for Arcane Potency
//			sp->eff[0].EffectBasePoints = -101;	//why the hack put value 1000 then say that you only use 100 ?
		}

		//Mage - ice lance should have around 60% spell power coef
//		sp = dbcSpell.LookupEntryForced( 30455 );
		//if( sp != NULL )
//			SetSpellPowerCoeffsAll( sp, 0.1429f );
		//Mage - Spell Power
		sp = dbcSpell.LookupEntryForced( 35578 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_CRITICAL_DAMAGE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		}
		sp = dbcSpell.LookupEntryForced( 35581 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_CRITICAL_DAMAGE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		}

		//Mage - Elemental Precision
		sp = dbcSpell.LookupEntryForced( 29438 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_COST;
		}
		sp = dbcSpell.LookupEntryForced( 29439 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_COST;
		}
		sp = dbcSpell.LookupEntryForced( 29440 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_COST;
		}

		//Burning Determination
		sp = dbcSpell.LookupEntryForced( 54747 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_SPELL_HIT_VICTIM_DOT;
		sp = dbcSpell.LookupEntryForced( 54749 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_SPELL_HIT_VICTIM_DOT;

		//mage - Empowered Fire
		sp = dbcSpell.LookupEntryForced( 31656 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 67545;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_MELEE_ATTACK_EVENT; //stupid spell is melee dmg type ? :O
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_IGNITE;
		}
		sp = dbcSpell.LookupEntryForced( 31657 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 67545;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_MELEE_ATTACK_EVENT; //stupid spell is melee dmg type ? :O
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_IGNITE;
		}
		sp = dbcSpell.LookupEntryForced( 31658 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 67545;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_MELEE_ATTACK_EVENT; //stupid spell is melee dmg type ? :O
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_IGNITE;
		}
		sp = dbcSpell.LookupEntryForced( 67545 );
		//if( sp != NULL )
			sp->eff[0].Effect = SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT;

		//mage - Master of Elements
		sp = dbcSpell.LookupEntryForced( 29074 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 29077;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
		}
		sp = dbcSpell.LookupEntryForced( 29075 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 29077;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
		}
		sp = dbcSpell.LookupEntryForced( 29076 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 29077;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
		}

		//mage: Blazing Speed
		sp = dbcSpell.LookupEntryForced( 31641 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectTriggerSpell = 31643;
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
			SetPPMForChance( sp, 4, 1000, 60000 );
		}
		sp = dbcSpell.LookupEntryForced( 31642 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectTriggerSpell = 31643;
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
			SetPPMForChance( sp, 4, 1000, 60000 );
		}

		sp = dbcSpell.LookupEntryForced( 31643 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;

		//Mage - Arcane shielding
		sp = dbcSpell.LookupEntryForced( 11252 );
		//if( sp != NULL )
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp = dbcSpell.LookupEntryForced( 12605 );
		//if( sp != NULL )
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

		//Mage - Summon Water Elemental
		sp = dbcSpell.LookupEntryForced( 31687 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_SUMMON;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DYNAMIC_OBJECT;
			sp->eff[0].EffectMiscValue = 510;
			sp->eff[0].EffectMiscValueB = 67;
		}

		//Mage - Focus Magic
		sp = dbcSpell.LookupEntryForced( 54646 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 100;	//script this
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->eff[1].EffectTriggerSpell = 54648;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_DUEL;
			sp->BGR_one_buff_from_caster_on_1target = SPELL_TYPE_INDEX_FOCUS_MAGIC;
		}
		sp = dbcSpell.LookupEntryForced( 54648 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
			sp->maxstack = 1;
		}
		//Mage - Arcane Empowerment
		sp = dbcSpell.LookupEntryForced( 31579 );
		//if( sp != NULL )
			sp->RequiredShapeShift = 0;
		sp = dbcSpell.LookupEntryForced( 31582 );
		//if( sp != NULL )
			sp->RequiredShapeShift = 0;
		sp = dbcSpell.LookupEntryForced( 31583 );
		//if( sp != NULL )
			sp->RequiredShapeShift = 0;

		//Mage - Presence of Mind
		sp = dbcSpell.LookupEntryForced( 12043 );
		//if( sp != NULL )
		{
			sp->procCharges = 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		//Mage - Critical Mass
		sp = dbcSpell.LookupEntryForced( 11095 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 33;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SCORCH;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_PYROBLAST;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_PYROBLAST_;
			sp->eff[1].EffectMiscValueB = sp->eff[1].EffectMiscValue;
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		}
		sp = dbcSpell.LookupEntryForced( 12872 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; 
			sp->procChance = 66;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SCORCH;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_PYROBLAST;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_PYROBLAST_;
			sp->eff[1].EffectMiscValueB = sp->eff[1].EffectMiscValue;
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		}
		sp = dbcSpell.LookupEntryForced( 12873 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SCORCH;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_PYROBLAST;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_PYROBLAST_;
			sp->eff[1].EffectMiscValueB = sp->eff[1].EffectMiscValue;
			sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		}
		// mage - Frost Warding
		sp = dbcSpell.LookupEntryForced( 11189 );
		//if( sp != NULL )
		{
			sp->procChance = 10;
		}
		sp = dbcSpell.LookupEntryForced( 28332 );
		//if( sp != NULL )
		{
			sp->procChance = 20;
		}

		// mage - Conjure Refreshment Table
		sp = dbcSpell.LookupEntryForced( 43985 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DYNAMIC_OBJECT;

		//the conjured item "drink" says : Restores ${$m2/5*30} mana over $d. 
		sp = dbcSpell.LookupEntryForced( 87959 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectBasePoints = sp->eff[1].EffectBasePoints / 5;
			sp->eff[1].EffectAmplitude = 1000;
		}

		//living bomb
		sp = dbcSpell.LookupEntryForced( 44457 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_NULL;
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
//			sp->eff[1].EffectAmplitude = 11500;
			sp->eff[1].EffectTriggerSpell = sp->eff[1].EffectBasePoints;
			sp->FacingCasterFlags = 0;
		}
		sp = dbcSpell.LookupEntryForced( sp->eff[1].EffectTriggerSpell );
		//if( sp != NULL )
		{
			sp->MaxAffectedTargets = 3; //just making sure
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_IN_AREA_INSTANT;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		}
	//////////////////////////////////////////
	// WARLOCK								//
	//////////////////////////////////////////

	// Insert warlock spell fixes here

	// Improved Corruption
	sp = dbcSpell.LookupEntryForced( 17810 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[0].EffectMiscValueB = sp->eff[1].EffectMiscValue;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	sp = dbcSpell.LookupEntryForced( 17811 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[0].EffectMiscValueB = sp->eff[1].EffectMiscValue;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	sp = dbcSpell.LookupEntryForced( 17812 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[0].EffectMiscValueB = sp->eff[1].EffectMiscValue;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_DUMMY;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}

	// Consume Shadows
	sp = dbcSpell.LookupEntryForced( 17767 );
	//if( sp != NULL )
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
	sp = dbcSpell.LookupEntryForced( 54501 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
	}	
		
	// Mana Feed
	sp = dbcSpell.LookupEntryForced( 30326 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_MELEE_ATTACK;
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 32554; 
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->procChance = 100;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
	}
	sp = dbcSpell.LookupEntryForced( 85175 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_MELEE_ATTACK;
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 32554; 
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->procChance = 100;
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
	}
	sp = dbcSpell.LookupEntryForced( 32554 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;

	// Impending Doom
	sp = dbcSpell.LookupEntryForced( 85106 );
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectTriggerSpell = 85106; //self proc !
	}
	sp = dbcSpell.LookupEntryForced( 85107 );
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectTriggerSpell = 85106; //self proc !
	}
	sp = dbcSpell.LookupEntryForced( 85108 );
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectTriggerSpell = 85106; //self proc !
	}
	//Demonic Empowerment - Felguard
	sp = dbcSpell.LookupEntryForced( 54508 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	//Demonic Empowerment - VoidWalker
	sp = dbcSpell.LookupEntryForced( 54443 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_HEALTH_PERCENT;
	//Dark Arts
	sp = dbcSpell.LookupEntryForced( 18694 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 85283 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	sp = dbcSpell.LookupEntryForced( 85284 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
	}

	//Demon Leap
	sp = dbcSpell.LookupEntryForced( 54785 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_JUMP_BEHIND_TARGET;
		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 43;	//16 yards
		SpellEntryEffectCopy(sp,sp,0,2);
		sp->eff[2].Effect = SPELL_EFFECT_LEAP;
		sp->eff[2].EffectBasePoints = -75;	//vertical speed
		sp->eff[2].EffectMiscValue = 170;	//radius
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY; //this should be delay casted when jump animation ends
	}
	sp = dbcSpell.LookupEntryForced( 54786 );
	//if( sp != NULL )
	{
		sp->rangeIndex = 3;//20 yards because 16 yards is missing :(
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_TARGETABLE_AROUND_LOCATION_IN_RADIUS;
	}
	//Demon Soul: Succubus
	sp = dbcSpell.LookupEntryForced( 79463 );
	sp2 = dbcSpell.LookupEntryForced( 686 );	//shadow bolt
	//if( sp != NULL )
	{
/*		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2]; */
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	//Demon Soul: Voidwalker
	sp = dbcSpell.LookupEntryForced( 79464 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_THREAT;
		sp->eff[1].EffectBasePoints = -100;
		sp->eff[1].EffectMiscValue = 127; //all schools
	}
	//Demonic Circle: Teleport
	sp = dbcSpell.LookupEntryForced( 1122 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 0;	//1 infernal pls
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp = dbcSpell.LookupEntryForced( 22703 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_NONE;	//was self cast = bad. Might change on next patch
		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 13;	//10 yards ?
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_NONE;
		sp->eff[1].EffectRadiusIndex = sp->eff[1].EffectRadiusMaxIndex = 13;	//10 yards ?
	}

	//Demonic Circle: Teleport
	sp = dbcSpell.LookupEntryForced( 48020 );
	//if( sp != NULL )
		sp->SpellAuraRestrictionsId = 0;

		//Soulburn
		sp = dbcSpell.LookupEntryForced( 74434 );
		//if( sp != NULL )
		{
			sp->procCharges = 1;
			sp->eff[1].EffectMiscValue = 689;	//replace drain life
			sp->procFlags = PROC_ON_PRE_CAST_SPELL; //change the next cast spell
			SpellEntryEffectCopy(sp,sp,1,2);
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 74434; //self proc
			sp->procChance = 100;
		}
		//Fel Synergy
		sp = dbcSpell.LookupEntryForced( 47230 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 54181;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		}
		sp = dbcSpell.LookupEntryForced( 47231 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 54181;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		}
		sp = dbcSpell.LookupEntryForced( 54181 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->spell_id_client = sp->Id;
			SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
			sp->Spell_value_is_scripted = true;
		}

		//conflagrate
		sp = dbcSpell.LookupEntryForced( 17962 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints;
			sp->eff[1].EffectBasePoints = sp->eff[2].EffectBasePoints;
		}
		//Backdraft
		sp = dbcSpell.LookupEntryForced( 47258 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CONFLAGRATE;
		}
		sp = dbcSpell.LookupEntryForced( 47259 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CONFLAGRATE;
		}
		sp = dbcSpell.LookupEntryForced( 47260 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CONFLAGRATE;
		}
		sp = dbcSpell.LookupEntryForced( 54277 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 3;
		}

		//Molten Core
		sp = dbcSpell.LookupEntryForced( 47245 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;	//cast spell falg is to be able to test removal condition :(
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_IMMOLATE;
		}
		sp = dbcSpell.LookupEntryForced( 47246 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;	//cast spell falg is to be able to test removal condition :(
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_IMMOLATE;
		}
		sp = dbcSpell.LookupEntryForced( 47247 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;	//cast spell falg is to be able to test removal condition :(
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_IMMOLATE;
		}
		sp = dbcSpell.LookupEntryForced( 47383 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL ;	
		sp = dbcSpell.LookupEntryForced( 71162 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL ;	
		sp = dbcSpell.LookupEntryForced( 71165 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL ;	

		//Demonic Circle: summon
		sp = dbcSpell.LookupEntryForced( 48018 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY; //we just need this to be visible 
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
		}
		//Demonic Circle: Teleport
		sp = dbcSpell.LookupEntryForced( 48020 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_DUMMY;
			sp->sar.casterAuraSpell = 0;
		}
		
		//metamophosis side effects are "passive" to stack
		sp = dbcSpell.LookupEntryForced( 54817 );
		//if( sp != NULL )
			sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp = dbcSpell.LookupEntryForced( 54879 );
		//if( sp != NULL )
			sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp = dbcSpell.LookupEntryForced( 61610 );
		//if( sp != NULL )
			sp->Attributes |= ATTRIBUTES_PASSIVE;
		//Unstable Affliction
		sp = dbcSpell.LookupEntryForced( 30108 );
		//if( sp != NULL )
		{
			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 31117;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_PRE_DISPELL_AURA_VICTIM_CASTER;
			sp->procFlags2 |= PROC2_TARGET_SELF;
//			sp->ProcOnNameHash[0] = SPELL_HASH_UNSTABLE_AFFLICTION;
		}
		sp = dbcSpell.LookupEntryForced( 31117 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;

		/**********************************************************
		 *	Nether Protection
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 30299 );
		//if( sp != NULL )
		{
//			sp->proc_interval = 8000;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 54370;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 30301 );
		//if( sp != NULL )
		{
//			sp->proc_interval = 8000;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_SPELL_HIT_EVENT | PROC_ON_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 54370;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
/*		sp = dbcSpell.LookupEntryForced( 30302 );
		//if( sp != NULL )
		{
			sp->proc_interval = 8000;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 54370;
		} */
		// warlock - Master Conjuror
		sp = dbcSpell.LookupEntryForced( 18767 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;	//SMT_PCT_EFFECT_VALUE_2 - need to implement this
			sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;
		}
		sp = dbcSpell.LookupEntryForced( 18768 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
			sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;
		}
		/**********************************************************
		 *	Backlash
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 34935 );
		//if( sp != NULL )
		{
			sp->proc_interval = 8000;
			sp->procFlags |= PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34938 );
		//if( sp != NULL )
		{
			sp->proc_interval = 8000;
			sp->procFlags |= PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34939 );
		//if( sp != NULL )
		{
			sp->proc_interval = 8000;
			sp->procFlags |= PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 34936 );
		//if( sp != NULL )
		{
			sp->AuraInterruptFlags = AURA_INTERRUPT_ON_CAST_SPELL;
		}

		/**********************************************************
		 *	Demonic Knowledge
		 **********************************************************/
		sp = dbcSpell.LookupEntryForced( 35691 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectImplicitTargetA=EFF_TARGET_PET;
			sp->eff[0].EffectTriggerSpell = 35696;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		}
		sp = dbcSpell.LookupEntryForced( 35692 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL_WITH_VALUE;
			sp->eff[0].EffectImplicitTargetA=EFF_TARGET_PET;
			sp->eff[0].EffectTriggerSpell = 35696;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		}
		sp = dbcSpell.LookupEntryForced( 35693 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectImplicitTargetA=EFF_TARGET_PET;
			sp->eff[0].EffectTriggerSpell = 35696;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		}
		sp = dbcSpell.LookupEntryForced( 35696 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY; //no effect here
			sp->eff[0].EffectImplicitTargetA=EFF_TARGET_PET;
			sp->RequiredShapeShift = 0;
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
		}

		//warlock: Aftermath
		sp = dbcSpell.LookupEntryForced( 85113 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
			sp->ProcOnNameHash[0] = SPELL_HASH_CONFLAGRATE;
			sp->ProcOnNameHash[1] = SPELL_HASH_RAIN_OF_FIRE;
			sp->eff[2].EffectBasePoints = sp->procChance;
			sp->procChance = 100;	 //we need to script this
		}
		sp = dbcSpell.LookupEntryForced( 85114 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
			sp->ProcOnNameHash[0] = SPELL_HASH_CONFLAGRATE;
			sp->ProcOnNameHash[1] = SPELL_HASH_RAIN_OF_FIRE;
			sp->eff[2].EffectBasePoints = sp->procChance;
			sp->procChance = 100;	 //we need to script this
		}
		sp = dbcSpell.LookupEntryForced( 85387 ); //stun
		//if( sp != NULL )
			sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		//warlock: Eradication
		sp = dbcSpell.LookupEntryForced( 47195 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_DOT;
			sp->ProcOnNameHash[0] = SPELL_HASH_CORRUPTION;
		}
		sp = dbcSpell.LookupEntryForced( 47196 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_DOT;
			sp->ProcOnNameHash[0] = SPELL_HASH_CORRUPTION;
		}
		sp = dbcSpell.LookupEntryForced( 47197 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_HIT_DOT;
			sp->ProcOnNameHash[0] = SPELL_HASH_CORRUPTION;
		}
		//warlock -  Seed of Corruption
		sp = dbcSpell.LookupEntryForced( 27243 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 27285;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_TARGET_DIE;
			sp->procChance = 100;
		}

		//warlock -  soul link
		sp = dbcSpell.LookupEntryForced( 19028 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect= SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 25228;
		}
		sp = dbcSpell.LookupEntryForced( 25228 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_DMGSPLIT_CASTER_TARGET;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		//Glyph of Soul Link
		sp2 = dbcSpell.LookupEntryForced( 63312 );
		//if( sp != NULL )
		{
			sp2->eff[0].Effect = SPELL_EFFECT_DUMMY;
		}

		//warlock: Nightfall
		sp = dbcSpell.LookupEntryForced( 18094 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 17941;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance += 10;	//hacks, ppl QQ this does not work due to low proc rate :(
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CORRUPTION;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_DRAIN_LIFE;
		}
		sp = dbcSpell.LookupEntryForced( 18095 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 17941;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance += 10;	//hacks, ppl QQ this does not work due to low proc rate :(
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CORRUPTION;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_DRAIN_LIFE;
		}
		//Shadow Trance should be removed on the first SB, but not the one we are already casting
		sp = dbcSpell.LookupEntryForced( 17941 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
		}

		//warlock: Empowered Corruption
		sp = dbcSpell.LookupEntryForced( 32381 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectBasePoints *= 6;
		}
		sp = dbcSpell.LookupEntryForced( 32382 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectBasePoints *= 6;
		}
		sp = dbcSpell.LookupEntryForced( 32383 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectBasePoints *= 6;
		}

		//warlock - Demonic Sacrifice
		sp = dbcSpell.LookupEntryForced( 18789 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp = dbcSpell.LookupEntryForced( 18790 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp = dbcSpell.LookupEntryForced( 18791 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp = dbcSpell.LookupEntryForced( 18792 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
		sp = dbcSpell.LookupEntryForced( 35701 );
		//if( sp != NULL )
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;

		//warlock - Demonic Tactics
		sp = dbcSpell.LookupEntryForced( 30242 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 0; //disble this. This is just blizz crap. Pure proove that they suck :P
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_MOD_SPELL_CRIT_CHANCE; //lvl 1 has it fucked up :O
			sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}
		sp = dbcSpell.LookupEntryForced( 30245 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 0; //disble this. This is just blizz crap. Pure proove that they suck :P
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}
		sp = dbcSpell.LookupEntryForced( 30246 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 0; //disble this. This is just blizz crap. Pure proove that they suck :P
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}
		sp = dbcSpell.LookupEntryForced( 30247 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 0; //disble this. This is just blizz crap. Pure proove that they suck :P
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}
		sp = dbcSpell.LookupEntryForced( 30248 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 0; //disble this. This is just blizz crap. Pure proove that they suck :P
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->eff[2].EffectImplicitTargetB = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}

		//warlock - Demonic Resilience
		sp = dbcSpell.LookupEntryForced( 30319 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}
		sp = dbcSpell.LookupEntryForced( 30320 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}
		sp = dbcSpell.LookupEntryForced( 30321 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_TAKEN;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER ;
		}

		//warlock - Improved Health Funnel
		sp = dbcSpell.LookupEntryForced( 18703 );
		//if( sp != NULL )
		{
			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_HEALTH_FUNNEL;
			sp->eff[2].EffectTriggerSpell = 60955;
		}
		sp = dbcSpell.LookupEntryForced( 18704 );
		//if( sp != NULL )
		{
			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_HEALTH_FUNNEL;
			sp->eff[2].EffectTriggerSpell = 60956;
		}
		sp = dbcSpell.LookupEntryForced( 60955 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->DurationIndex = 35; //4sec
		}
		sp = dbcSpell.LookupEntryForced( 60956 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->DurationIndex = 35; //4sec
		}

		//warlock - Improved Imp
		sp = dbcSpell.LookupEntryForced( 18694 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18695 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18696 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}

		//warlock - Improved Voidwalker
		sp = dbcSpell.LookupEntryForced( 18705 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18706 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18707 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}

		//warlock - Improved Succubus
		sp = dbcSpell.LookupEntryForced( 18754 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18755 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18756 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		}

		//warlock - Fel Intellect
		sp = dbcSpell.LookupEntryForced( 18731 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_PERCENT_STAT;
			sp->eff[0].EffectMiscValue = 3;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18743 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_PERCENT_STAT;
			sp->eff[0].EffectMiscValue = 3;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}
		sp = dbcSpell.LookupEntryForced( 18744 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_PERCENT_STAT;
			sp->eff[0].EffectMiscValue = 3;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		}

		//warlock - Improved Demonic Tactics
		sp = dbcSpell.LookupEntryForced( 54347 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_SPELL_CRIT_CHANCE;
			sp->EffectHandler = &HandleImprovedDemonicTactics;
		}
		sp = dbcSpell.LookupEntryForced( 54348 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_SPELL_CRIT_CHANCE;
			sp->EffectHandler = &HandleImprovedDemonicTactics;
		}
		sp = dbcSpell.LookupEntryForced( 54349 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_SPELL_CRIT_CHANCE;
			sp->EffectHandler = &HandleImprovedDemonicTactics;
		}

		//warlock - Unholy Power
		sp = dbcSpell.LookupEntryForced( 18769 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			//now how the heck to mod imp fireball only ? i think that is he's only attack no ?
			sp->eff[0].EffectMiscValue = g_spellSchoolConversionTable[ SCHOOL_NORMAL ] | g_spellSchoolConversionTable[ SCHOOL_FIRE ] ;
		}
		sp = dbcSpell.LookupEntryForced( 18770 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			//now how the heck to mod imp fireball only ? i think that is he's only attack no ?
			sp->eff[0].EffectMiscValue = g_spellSchoolConversionTable[ SCHOOL_NORMAL ] | g_spellSchoolConversionTable[ SCHOOL_FIRE ] ;
		}
		sp = dbcSpell.LookupEntryForced( 18771 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			//now how the heck to mod imp fireball only ? i think that is he's only attack no ?
			sp->eff[0].EffectMiscValue = g_spellSchoolConversionTable[ SCHOOL_NORMAL ] | g_spellSchoolConversionTable[ SCHOOL_FIRE ] ;
		}
		sp = dbcSpell.LookupEntryForced( 18772 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			//now how the heck to mod imp fireball only ? i think that is he's only attack no ?
			sp->eff[0].EffectMiscValue = g_spellSchoolConversionTable[ SCHOOL_NORMAL ] | g_spellSchoolConversionTable[ SCHOOL_FIRE ] ;
		}
		sp = dbcSpell.LookupEntryForced( 18773 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET ;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
			//now how the heck to mod imp fireball only ? i think that is he's only attack no ?
			sp->eff[0].EffectMiscValue = g_spellSchoolConversionTable[ SCHOOL_NORMAL ] | g_spellSchoolConversionTable[ SCHOOL_FIRE ] ;
		}

		//warlock - Master Demonologist - 25 spells here
		sp = dbcSpell.LookupEntryForced( 23785 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 23784;
		}
		sp = dbcSpell.LookupEntryForced( 23822 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 23830;
		}
		sp = dbcSpell.LookupEntryForced( 23823 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 23831;
		}
		sp = dbcSpell.LookupEntryForced( 23824 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 23832;
		}
		sp = dbcSpell.LookupEntryForced( 23825 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET | SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 35708;
		}
		//and the rest
		sp = dbcSpell.LookupEntryForced( 23784 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp = dbcSpell.LookupEntryForced( 23830 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp = dbcSpell.LookupEntryForced( 23831 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp = dbcSpell.LookupEntryForced( 23832 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp = dbcSpell.LookupEntryForced( 35708 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp = dbcSpell.LookupEntryForced( 23759 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		sp = dbcSpell.LookupEntryForced( 23760 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		sp = dbcSpell.LookupEntryForced( 23761 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		sp = dbcSpell.LookupEntryForced( 23762 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		sp = dbcSpell.LookupEntryForced( 23826 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		sp = dbcSpell.LookupEntryForced( 23827 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		sp = dbcSpell.LookupEntryForced( 23828 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		sp = dbcSpell.LookupEntryForced( 23829 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		}
		for(uint32 i=23833;i<=23844;i++)
		{
			sp = dbcSpell.LookupEntryForced( i );
			//if( sp != NULL )
			{
				sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
				sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			}
		}
		sp = dbcSpell.LookupEntryForced( 35702 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].Effect = 0; //hacks, we are handling this in another way
		}
		sp = dbcSpell.LookupEntryForced( 35703 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].Effect = 0; //hacks, we are handling this in another way
		}
		sp = dbcSpell.LookupEntryForced( 35704 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].Effect = 0; //hacks, we are handling this in another way
		}
		sp = dbcSpell.LookupEntryForced( 35705 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].Effect = 0; //hacks, we are handling this in another way
		}
		sp = dbcSpell.LookupEntryForced( 35706 );
		//if( sp != NULL )
		{
			sp->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[1].Effect = 0; //hacks, we are handling this in another way
		}

		//warlock - Drain Soul
		sp = dbcSpell.LookupEntryForced( 1120 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_DIE_VICTIM;
			sp->procChance = 100;
			SpellEntryEffectCopy(sp,sp,0,2);
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 79264;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
//			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DRAIN_SOUL;
		}

		//warlock - Improved Drain Soul
/*		sp = dbcSpell.LookupEntryForced( 18213 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_TARGET_DIE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 18371;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[2].Effect = 0 ; //remove this effect
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DRAIN_SOUL;
		}
		sp = dbcSpell.LookupEntryForced( 18372 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_TARGET_DIE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 18371;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->eff[2].Effect = 0 ; //remove this effect
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DRAIN_SOUL;
		} 
		sp = dbcSpell.LookupEntryForced( 18372 );
		//if( sp != NULL )
			sp->spell_id_client = sp->Id;
			*/
		//warlock - Shadow Embrace
		sp = dbcSpell.LookupEntryForced( 32385 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HAUNT;
		}
		sp = dbcSpell.LookupEntryForced( 32387 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HAUNT;
		}
		sp = dbcSpell.LookupEntryForced( 32392 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHADOW_BOLT;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_HAUNT;
		}

		//warlock - soul leech
		sp = dbcSpell.LookupEntryForced( 30293 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 30294;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 1;
		}
		sp = dbcSpell.LookupEntryForced( 30295 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 30294;
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 1;
		}
		sp = dbcSpell.LookupEntryForced( 30294 );
		//if( sp != NULL )
		{
			sp->spell_id_client = sp->Id;	//do not let proc overrite us
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
			SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
			sp->Spell_value_is_scripted = true;
		}

		//warlock - Siphon Life
		sp = dbcSpell.LookupEntryForced( 63108 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 63106;
			sp->procFlags = PROC_ON_SPELL_HIT_DOT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CORRUPTION;
		}
		sp = dbcSpell.LookupEntryForced( 86667 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 63106;
			sp->procFlags = PROC_ON_SPELL_HIT_DOT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CORRUPTION;
		}
		sp = dbcSpell.LookupEntryForced( 63106 );
		//if( sp != NULL )
			sp->spell_id_client = sp->Id;	//do not let proc overrite us

/*		//warlock - Pyroclasm
		sp = dbcSpell.LookupEntryForced( 18073 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SEARING_PAIN;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CONFLAGRATE;
		}
		sp = dbcSpell.LookupEntryForced( 18096 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SEARING_PAIN;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CONFLAGRATE;
		}
		sp = dbcSpell.LookupEntryForced( 63245 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SEARING_PAIN;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_CONFLAGRATE;
		}*/

	//////////////////////////////////////////
	// DRUID								//
	//////////////////////////////////////////
		
	//Dash
	sp = dbcSpell.LookupEntryForced( 1850 );
	//if( sp != NULL )
		sp->RequiredShapeShift = (1 << (FORM_CAT-1));

	//Swipe
	sp = dbcSpell.LookupEntryForced( 62078 );
	//if( sp != NULL )
	{
		if( sp->eff[0].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE )
			sp->eff[0].EffectRealPointsPerLevel = 0; //do not scale it with caster level
		if( sp->eff[1].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE )
			sp->eff[1].EffectRealPointsPerLevel = 0; //do not scale it with caster level
	}
		
	//Nature's Bounty
	sp = dbcSpell.LookupEntryForced( 17074 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE_EVENT;
		sp->procChance = 100;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 96206;	
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_REJUVENATION;
		sp->proc_interval = 0;
	}
	sp = dbcSpell.LookupEntryForced( 17075 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE_EVENT;
		sp->procChance = 100;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 96206;	
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_REJUVENATION;
		sp->proc_interval = 0;
	}
	sp = dbcSpell.LookupEntryForced( 17076 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE_EVENT;
		sp->procChance = 100;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 96206;	
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_REJUVENATION;
		sp->proc_interval = 0;
	}
	sp = dbcSpell.LookupEntryForced( 96206 );
	//if( sp != NULL )
		sp->DurationIndex = dbcSpell.LookupEntryForced( 774 )->DurationIndex; //Rejuvenation

	//Nature's Cure
	sp = dbcSpell.LookupEntryForced( 88423 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	//Insect Swarm
	sp = dbcSpell.LookupEntryForced( 5570 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//cyclone 
	sp = dbcSpell.LookupEntryForced( 33786 );
	//if( sp != NULL )
	{
		sp->FacingCasterFlags = 0;
		sp->eff[2].EffectBasePoints = -500;	//make sure the healing gets negative and ignored
		sp->c_is_flags3 |= SPELL_FLAG3_IS_SCHOOL_IMMUNE_ALL;
	}
	//Entangling roots
	sp = dbcSpell.LookupEntryForced( 339 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;

	//Glyph of Healing Touch
	sp = dbcSpell.LookupEntryForced( 54825 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 54825;	//self proc
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HEALING_TOUCH;
	}

	//Glyph of Bloodletting
	sp = dbcSpell.LookupEntryForced( 54815 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 54815;	//self proc
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_SHRED;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_MANGLE;
	}
		
	//Glyph of Ferocious Bite
	sp = dbcSpell.LookupEntryForced( 67598 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 67598;	//self proc
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FEROCIOUS_BITE;
	}

	//Nurturing Instinct
	sp = dbcSpell.LookupEntryForced( 33872 );
	//if( sp != NULL )
	{
		sp->RequiredShapeShift = (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1)) | (1 << (FORM_MOONKIN-1));
		SpellEntryEffectCopy( sp, sp, 0, 1 );
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_PCT;
		sp->eff[1].EffectBasePoints = dbcSpell.LookupEntryForced( 47179 )->eff[0].EffectBasePoints;
		sp->RemoveOnShapeShift = true;
	}
	sp = dbcSpell.LookupEntryForced( 33873 );
	//if( sp != NULL )
	{
		sp->RequiredShapeShift = (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1)) | (1 << (FORM_MOONKIN-1));
		SpellEntryEffectCopy( sp, sp, 0, 1 );
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_PCT;
		sp->eff[1].EffectBasePoints = dbcSpell.LookupEntryForced( 47179 )->eff[0].EffectBasePoints;
		sp->RemoveOnShapeShift = true;
	}

	//Fungal Growth Visual
	sp2 = dbcSpell.LookupEntryForced( 81281 );
	sp = dbcSpell.LookupEntryForced( 94339 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectRadiusIndex = sp2->eff[0].EffectRadiusIndex;
		sp->eff[1].EffectRadiusMaxIndex = sp2->eff[0].EffectRadiusMaxIndex;
		sp->eff[1].EffectAmplitude = 900;	//aura duration is 1 sec, this will get moded by haste of the caster
		sp->c_is_flags2 |= SPELL_FLAG2_IS_AA_CALLING_SCRIPT;
	}
	sp = dbcSpell.LookupEntryForced( 81288 );	//weak slow
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	sp = dbcSpell.LookupEntryForced( 81281 );	//strong slow
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	//Gift of Nature
	sp = dbcSpell.LookupEntryForced( 87305 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_DONE_PERCENT;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}

	//Malfurion's Gift
	sp = dbcSpell.LookupEntryForced( 92363 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LIFEBLOOM;
	}
	sp = dbcSpell.LookupEntryForced( 92364 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LIFEBLOOM;
	}

	//Fury Swipes
	sp = dbcSpell.LookupEntryForced( 48532 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->RequiredShapeShift = (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->proc_interval = 3000;
	}
	sp = dbcSpell.LookupEntryForced( 80552 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->RequiredShapeShift = (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->proc_interval = 3000;
	}
	sp = dbcSpell.LookupEntryForced( 80553 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->RequiredShapeShift = (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->proc_interval = 3000;
	}

	//Blood in the Water
	sp = dbcSpell.LookupEntryForced( 80318 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 50;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FEROCIOUS_BITE;
	}
	sp = dbcSpell.LookupEntryForced( 80319 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FEROCIOUS_BITE;
	}

	//Feral Aggression
	sp = dbcSpell.LookupEntryForced( 16858 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 16858;	//self proc !
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FAERIE_FIRE__FERAL_;
	}
	sp = dbcSpell.LookupEntryForced( 16859 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 16858;	//self proc !
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FAERIE_FIRE__FERAL_;
	}

	//Survival Instincts
	sp = dbcSpell.LookupEntryForced( 61336 );
	//if( sp != NULL )
	{
		sp->RequiredShapeShift = (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));
	}

	//Razor Claws - CAT FORM ONLY ! - Increases the damage done by your bleed abilities by 25.04%.  Each point of Mastery increases bleed damage by an additional 3.1%
	sp = dbcSpell.LookupEntryForced( 77493 );
	//if( sp != NULL )
	{
		sp->RequiredShapeShift = (1 << (FORM_CAT-1));
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 25;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Savage Defender - BEAR FORM ONLY ! - Increases the damage absorbed by your Savage Defense ability by 32%.    Each point of Mastery increases the absorb by an additional 4%.
	sp = dbcSpell.LookupEntryForced( 77494 );
	//if( sp != NULL )
	{
		sp->RequiredShapeShift = (1 << (FORM_BEAR-1));
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 32;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Symbiosis - Increases the potency of your healing spells by 10% on targets already affected by one of your heal over time spells.  Each point of Mastery increases heal potency by an additional 1.25%
	//Harmony - Your direct healing is increased by an additional 0% and casting your direct healing spells grants you an additional 0% bonus to periodic healing for 10 sec. Each point of Mastery increases each bonus by an additional 1.25%.
	sp = dbcSpell.LookupEntryForced( 77495 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 10;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//Total Eclipse - Increases the bonus damage from Eclipse by 12%.  Each point of Mastery increases the bonus by an additional 1.5%.
	sp = dbcSpell.LookupEntryForced( 77492 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 12;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}
	//lunar eclipse bar arrow should be not saved to db
	sp = dbcSpell.LookupEntryForced( 67483 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	//solar eclipse bar arrow should be not saved to db
	sp = dbcSpell.LookupEntryForced( 67484 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	//Maul
//	sp = dbcSpell.LookupEntryForced(6807);
	//if(sp != NULL)
//		sp->MechanicsType = MECHANIC_BLEEDING;
	//Mark of the Wild
	sp = dbcSpell.LookupEntryForced(1126);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 79060;	//this is used as damage
		sp->eff[0].EffectImplicitTargetB  = EFF_TARGET_ALL_RAID;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->FacingCasterFlags = 0;
//		sp->rangeIndex = 9; //30 yards
	}
	//Empowered Touch
	sp = dbcSpell.LookupEntryForced( 33879 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectTriggerSpell = 88433;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HEALING_TOUCH;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_NOURISH;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_REGROWTH;
	}
	sp = dbcSpell.LookupEntryForced( 33880 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[1].EffectTriggerSpell = 88433;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HEALING_TOUCH;
		sp->ProcOnNameHash[ 1 ] = SPELL_HASH_NOURISH;
		sp->ProcOnNameHash[ 2 ] = SPELL_HASH_REGROWTH;
	}

	//Stampeding Roar 
	sp = dbcSpell.LookupEntryForced( 77764 ); //cat
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_NONE;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 13;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[1].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 13;
		sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH; 
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}
	sp = dbcSpell.LookupEntryForced( 97985 );
	//if( sp != NULL )
	{
		sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH; 
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 77761 ); // bear
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_NONE;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
		sp->eff[0].EffectRadiusIndex = sp->eff[0].EffectRadiusMaxIndex = 13;
		SpellEntryEffectCopy(dbcSpell.LookupEntryForced( 77764 ),sp,1,1);
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}

	//Furor
	sp = dbcSpell.LookupEntryForced( 17056 );
	//if( sp != NULL )
		sp->RequiredShapeShift = (1 << (FORM_TREE-1)) | (1 << (FORM_MOONKIN-1)) | (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));
	sp = dbcSpell.LookupEntryForced( 17058 );
	//if( sp != NULL )
		sp->RequiredShapeShift = (1 << (FORM_TREE-1)) | (1 << (FORM_MOONKIN-1)) | (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));
	sp = dbcSpell.LookupEntryForced( 17059 );
	//if( sp != NULL )
		sp->RequiredShapeShift = (1 << (FORM_TREE-1)) | (1 << (FORM_MOONKIN-1)) | (1 << (FORM_CUSTOM_NORMAL-1)) | (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));
/*	//Druid: improved barkskin
	sp = dbcSpell.LookupEntryForced( 63410 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	sp = dbcSpell.LookupEntryForced( 63411 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
		*/
	//Revitalize
	sp = dbcSpell.LookupEntryForced( 48539 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectMiscValue = sp->procChance;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_CAST_SPELL_EVENT;
//		sp->proc_interval = sp->eff[1].EffectBasePoints * 1000;	//every 12 seconds
//		sp->procChance = 20;
		sp->eff[0].EffectTriggerSpell = 37243;	//insta regen mana
	}
	sp = dbcSpell.LookupEntryForced( 48544 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectMiscValue = sp->procChance;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_CAST_SPELL_EVENT;
		sp->eff[1].EffectBasePoints = dbcSpell.LookupEntryForced( 48539 )->eff[1].EffectBasePoints;
//		sp->proc_interval = sp->eff[1].EffectBasePoints * 1000;	//every 12 seconds
//		sp->procChance = 20;
		sp->eff[0].EffectTriggerSpell = 37243;	//insta regen mana
	}

	//Druid: Leader of the pack should not be removed by proc due to same namehash
	sp = dbcSpell.LookupEntryForced( 17007 );
	//if( sp != NULL )
	{
		sp->NameHash = SPELL_HASH_LEADER_OF_THE_PACK_17007;
		sp->RequiredShapeShift = (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1));	//available only in these forms as passive spell
		sp->Attributes |= ATTRIBUTES_PASSIVE;	//just in case
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK;
		sp->proc_interval = 6000;	//every 6 seconds
		sp->eff[0].EffectTriggerSpell = 34299;
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].EffectTriggerSpell = 24932;	//area aura to mod the crit chance
	}
	sp = dbcSpell.LookupEntryForced( 24932 );
	//if( sp != NULL )
		sp->RequiredShapeShift = (1<<(FORM_BEAR-1))|(1<<(FORM_CAT-1));
	sp = dbcSpell.LookupEntryForced( 34299 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_HEAL_MAXHEALTH_PCT;
		sp->eff[0].EffectBasePoints = 4;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT;
		sp->eff[1].EffectBasePoints = 4;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->chained_cast = dbcSpell.LookupEntryForced( 68285 );	//4% from max mana -> proper chained cast
	}
	// Insert druid spell fixes here
		//Infected Wounds
		sp = dbcSpell.LookupEntryForced(48483);
		//if(sp != NULL)
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
		sp = dbcSpell.LookupEntryForced(48484);
		//if(sp != NULL)
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;

		//King of the Jungle
		sp = dbcSpell.LookupEntryForced(48492);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ENRAGE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_TIGER_S_FURY;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51185;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we script proc 1 to do proc 2
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//			sp->eff[1].EffectTriggerSpell = 51178;
			sp->procChance = 100;
			sp->RequiredShapeShift = (1<<(FORM_BEAR-1));
		}
		sp = dbcSpell.LookupEntryForced(48494);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ENRAGE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_TIGER_S_FURY;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51185;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we script proc 1 to do proc 2
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//			sp->eff[1].EffectTriggerSpell = 51178;
			sp->procChance = 100;
			sp->RequiredShapeShift = (1<<(FORM_BEAR-1)) | (1<<(FORM_CAT-1));
		}
		sp = dbcSpell.LookupEntryForced(48495);
		//if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_ENRAGE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_TIGER_S_FURY;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 51185;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we script proc 1 to do proc 2
//			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//			sp->eff[1].EffectTriggerSpell = 51178;
			sp->procChance = 100;
			sp->RequiredShapeShift = (1<<(FORM_BEAR-1)) | (1<<(FORM_CAT-1));
		}

		sp = dbcSpell.LookupEntryForced(51185); //enrage proc
		sp2 = dbcSpell.LookupEntryForced(5229); //enrage
		//if(sp != NULL)
			sp->DurationIndex = sp2->DurationIndex;

		//Starfall
		sp2 = dbcSpell.LookupEntryForced( 50286 );
		sp = dbcSpell.LookupEntryForced( 48505 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectTriggerSpell = 50288;
//			sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOVEMENT;
//			sp->RequiredShapeShift = (1 << (FORM_CUSTOM_NORMAL-1));
			sp->RemoveOnShapeShift = true;
		}
		sp = dbcSpell.LookupEntryForced( 50288 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMIES_AROUND_CASTER;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_ALL_ENEMY_IN_AREA;
			sp->eff[0].EffectRadiusIndex = sp2->eff[0].EffectRadiusIndex;
			sp->MaxAffectedTargets = 2;
//			sp->spell_can_crit = false;		//wowhead says it does crit
//			sp->spell_DOT_can_crit = false;
		}
		//Earth and Moon
		sp = dbcSpell.LookupEntryForced( 48506 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_WRATH;
			sp->ProcOnNameHash[1] = SPELL_HASH_STARFIRE;
		}

		//Savage Defense
		sp = dbcSpell.LookupEntryForced( 62600 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 11000;	//needs to let the aura expire or else the aura gets refreshes stronger and stronger
		}
		sp = dbcSpell.LookupEntryForced( 62606 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procCharges = 1;
		}

		sp = dbcSpell.LookupEntryForced( 24866 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 24864;
		}

		//Druid: Feral Swiftness
 		sp = dbcSpell.LookupEntryForced( 17002 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 24867;
			sp->RequiredShapeShift = (1 << (FORM_CAT-1));	//available only in these forms as passive spell
			sp->Attributes |= ATTRIBUTES_PASSIVE;	//just in case
			SpellEntryEffectCopy(sp,sp,0,2);
			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 97985;	
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->ProcOnNameHash[0] = SPELL_HASH_DASH;
			sp->ProcOnNameHash[1] = SPELL_HASH_STAMPEDING_ROAR;
		}
		sp = dbcSpell.LookupEntryForced( 24866 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 24864;
			sp->RequiredShapeShift = (1 << (FORM_CAT-1));	//available only in these forms as passive spell
			sp->Attributes |= ATTRIBUTES_PASSIVE;	//just in case
			SpellEntryEffectCopy(sp,sp,0,2);
			sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 97985;	
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->ProcOnNameHash[0] = SPELL_HASH_DASH;
			sp->ProcOnNameHash[1] = SPELL_HASH_STAMPEDING_ROAR;
		}
		sp = dbcSpell.LookupEntryForced( 24864 );
		//if( sp != NULL )
			sp->RequiredShapeShift = (1<<(FORM_CAT-1)) | (1<<(FORM_BEAR-1));
		sp = dbcSpell.LookupEntryForced( 24867 );
		//if( sp != NULL )
			sp->RequiredShapeShift = (1<<(FORM_CAT-1)) | (1<<(FORM_BEAR-1));

		//Owlkin Frenzy
		sp = dbcSpell.LookupEntryForced( 48389 );
		//if( sp != NULL )
		{
//			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 48392 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 48393 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}

		//Eclipse
		sp = dbcSpell.LookupEntryForced( 48516 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_WRATH;
			sp->ProcOnNameHash[1] = SPELL_HASH_STARFIRE;
			sp->eff[0].EffectTriggerSpell   =   48517;//Damage Done by Wrath 20% more
			sp->eff[1].EffectTriggerSpell   =   48518;//Crit Chance of Starfire 30% more
			sp->procChance  =   33;
			sp->proc_interval   =   30000;
		}
		sp = dbcSpell.LookupEntryForced( 48521 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_WRATH;
			sp->ProcOnNameHash[1] = SPELL_HASH_STARFIRE;
			sp->eff[0].EffectTriggerSpell   =   48517;//Damage Done by Wrath 20% more
			sp->eff[1].EffectTriggerSpell   =   48518;//Crit Chance of Starfire 30% more
			sp->procChance  =   66;
			sp->proc_interval   =   30000;
		}
		sp = dbcSpell.LookupEntryForced( 48525 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_WRATH;
			sp->ProcOnNameHash[1] = SPELL_HASH_STARFIRE;
			sp->eff[0].EffectTriggerSpell   =   48517;//Damage Done by Wrath 20% more
			sp->eff[1].EffectTriggerSpell   =   48518;//Crit Chance of Starfire 30% more
			sp->procChance  =   100;
			sp->proc_interval   =   30000;
		}

		//Druid: Natural Perfection
		//Nature's Ward
		sp = dbcSpell.LookupEntryForced( 33881 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell   =   33881;
			sp->procChance  =   50;
			sp->proc_interval = 12000;	//duration of Rejuvenation
		}
		sp = dbcSpell.LookupEntryForced( 33882 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell   =   33881;
			sp->procChance  =   100;
			sp->proc_interval = 12000;	//duration of Rejuvenation
		}
//		sp = dbcSpell.LookupEntryForced( 33883 );
		//if( sp != NULL )
//			sp->procFlags = PROC_ON_CRIT_HIT_VICTIM;

		//Glyph of Frenzied Regeneration - this is made with SMT quite ok, but we need to remove our heal script...
		sp = dbcSpell.LookupEntryForced( 54810 );
		//if( sp != NULL )
		{
			//redirect eff 0 from 
			//mod eff 2 to give healing
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
			sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
		}
		//Druid: Frenzied Regeneration
		sp = dbcSpell.LookupEntryForced( 22842 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 22845;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_INCREASE_HEALTH;
			sp->RequiredShapeShift = (1<<(FORM_BEAR-1));
			sp->c_is_flags3 |= SPELL_FLAG3_IS_REMOVED_ON_SHAPESHIFT;
		}

		//Typhoon - targettting should be around caster
/*		sp = dbcSpell.LookupEntryForced( 61391 ); 
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
		}*/

		//druid - Primal Fury (talent)
		sp = dbcSpell.LookupEntryForced( 37116 );
		//if( sp != NULL )
			sp->RequiredShapeShift = 0;
		sp = dbcSpell.LookupEntryForced( 37117 );
		//if( sp != NULL )
			sp->RequiredShapeShift = 0;

		//druid - Primal Fury - Blood Frenzy (proc)
		sp = dbcSpell.LookupEntryForced( 16954 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp = dbcSpell.LookupEntryForced( 16952 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CRIT_ATTACK;

		//druid - Primal Fury - Primal Fury (proc)
		sp = dbcSpell.LookupEntryForced( 16961 );
		//if( sp != NULL ) 
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;
		sp = dbcSpell.LookupEntryForced( 16958 );
		//if( sp != NULL ) 
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_SPELL_CRIT_HIT;

		//Bash - Interrupt effect
		sp = dbcSpell.LookupEntryForced( 5211 );
		//if( sp != NULL )
		{
			sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 32747;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		}

		//druid - Intensity
		sp = dbcSpell.LookupEntryForced( 17106 );
		//if( sp != NULL )
		{
		   sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		   sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 17107 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			 sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 17108 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		//Nature's Grasp
		sp = dbcSpell.LookupEntryForced( 16689 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 6; 
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 339; 
			sp->eff[1].Effect = 0; 
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM ;
			sp->procFlags2 |= PROC2_REMOVEONUSE;
			sp->AuraInterruptFlags = 0; //we remove it on proc or timeout
//			sp->DurationIndex = 22;	//45 seconds
			sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;
		}
		//rake
		sp = dbcSpell.LookupEntryForced( 1822 );
		//if( sp != NULL )
		{
			sp->MechanicsType = MECHANIC_BLEEDING;
			sp->eff[0].EffectMechanic = MECHANIC_BLEEDING;
			sp->eff[1].EffectMechanic = MECHANIC_BLEEDING;
			sp->eff[2].EffectMechanic = MECHANIC_BLEEDING;
		}
		//pounce
		sp = dbcSpell.LookupEntryForced( 9007 );
		//if( sp != NULL )
		{
			sp->MechanicsType = MECHANIC_BLEEDING;
			sp->eff[0].EffectMechanic = MECHANIC_BLEEDING;
			sp->eff[1].EffectMechanic = MECHANIC_BLEEDING;
			sp->eff[2].EffectMechanic = MECHANIC_BLEEDING;
		}
		//rip
		sp = dbcSpell.LookupEntryForced( 1079 );
		//if( sp != NULL )
		{
			sp->MechanicsType = MECHANIC_BLEEDING;
			sp->eff[0].EffectMechanic = MECHANIC_BLEEDING;
			sp->eff[1].EffectMechanic = MECHANIC_BLEEDING;
			sp->eff[2].EffectMechanic = MECHANIC_BLEEDING;
		}
		//lacerate
//		sp = dbcSpell.LookupEntryForced( 33745 );
		//if( sp != NULL )
//			sp->MechanicsType = MECHANIC_BLEEDING; 

		//Pounce 
		sp = dbcSpell.LookupEntryForced( 9005 );
		//if( sp != NULL )
		{
			sp->AttributesExB &= ~FLAGS3_REQ_BEHIND_TARGET; //not valid in 3.3.3 ?
			sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;
		}

		//Pounce Bleed
		sp = dbcSpell.LookupEntryForced( 9007 );
		//if( sp != NULL )
			sp->DurationIndex = 85;

		//Druid: Master Shapeshifter
		sp = dbcSpell.LookupEntryForced( 48411 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = (1<<(FORM_TREE-1)) | (1<<(FORM_BEAR-1)) | (1<<(FORM_CAT-1)) | (1<<(FORM_MOONKIN-1)) | ( 1<<(FORM_CUSTOM_NORMAL-1) );
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		}
		sp = dbcSpell.LookupEntryForced( 48418 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = (1<<(FORM_BEAR-1));
//			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
			sp->eff[0].EffectBasePoints = 4; 
			sp->maxstack = 1;
		}
		sp = dbcSpell.LookupEntryForced( 48420 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = (1<<(FORM_CAT-1));
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_CRIT_CHANCE_ALL;
//			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
			sp->eff[0].EffectBasePoints = 4; 
			sp->maxstack = 1;
		}
		sp = dbcSpell.LookupEntryForced( 48421 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = (1<<(FORM_MOONKIN-1));
//			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
			sp->eff[0].EffectBasePoints = 4; 
			sp->maxstack = 1;
		}

		//Druid: Improved Tree of Life
/*		sp = dbcSpell.LookupEntryForced( 48535 );
		//if( sp != NULL )
			sp->RequiredShapeShift = (1<<(FORM_TREE-1));
		sp = dbcSpell.LookupEntryForced( 48536 );
		//if( sp != NULL )
			sp->RequiredShapeShift = (1<<(FORM_TREE-1));
		sp = dbcSpell.LookupEntryForced( 48537 );
		//if( sp != NULL )
			sp->RequiredShapeShift = (1<<(FORM_TREE-1));
			*/

		//Druid: Brambles
/*		sp = dbcSpell.LookupEntryForced( 16836 );
		//if( sp != NULL )
		{
			//mod Thorns and Entangling Roots
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_DAMAGE_DONE;	//hmm, only lvl 2 is messed up by blizz
			sp->eff[0].EffectSpellGroupRelation[0] = sp->eff[0].EffectSpellGroupRelation[0] | sp->eff[1].EffectSpellGroupRelation[0];
			sp->eff[0].EffectSpellGroupRelation[1] = sp->eff[0].EffectSpellGroupRelation[1] | sp->eff[1].EffectSpellGroupRelation[1];
			sp->eff[0].EffectSpellGroupRelation[2] = sp->eff[0].EffectSpellGroupRelation[2] | sp->eff[1].EffectSpellGroupRelation[2];
			//mod force of nature
			sp->eff[1].EffectMiscValue = SMT_DAMAGE_DONE;	//hmm, only lvl 2 is messed up by blizz
			sp->eff[1].EffectBasePoints = sp->eff[2].EffectBasePoints;
			sp->eff[1].EffectSpellGroupRelation[0] = 0;
			sp->eff[1].EffectSpellGroupRelation[1] = 512;
			//register prof for force of nature
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK_VICTIM;
			sp->eff[2].EffectTriggerSpell = 50411;
			sp->proc_interval = 1;
		}
		sp = dbcSpell.LookupEntryForced( 16839 );
		//if( sp != NULL )
		{
			//mod Thorns and Entangling Roots
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_DAMAGE_DONE;	//hmm, only lvl 2 is messed up by blizz
			sp->eff[0].EffectSpellGroupRelation[0] = sp->eff[0].EffectSpellGroupRelation[0] | sp->eff[1].EffectSpellGroupRelation[0];
			sp->eff[0].EffectSpellGroupRelation[1] = sp->eff[0].EffectSpellGroupRelation[1] | sp->eff[1].EffectSpellGroupRelation[1];
			sp->eff[0].EffectSpellGroupRelation[2] = sp->eff[0].EffectSpellGroupRelation[2] | sp->eff[1].EffectSpellGroupRelation[2];
			//mod force of nature
			sp->eff[1].EffectMiscValue = SMT_DAMAGE_DONE;	//hmm, only lvl 2 is messed up by blizz
			sp->eff[1].EffectBasePoints = sp->eff[2].EffectBasePoints;
			sp->eff[1].EffectSpellGroupRelation[0] = 0;
			sp->eff[1].EffectSpellGroupRelation[1] = 512;
			//register prof for force of nature
			//attacks done to you while you have Barkskin active have a $s3% chance to daze the target for 3 sec.
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK_VICTIM;
			sp->eff[2].EffectTriggerSpell = 50411;
			sp->proc_interval = 1;
		}
		sp = dbcSpell.LookupEntryForced( 16840 );
		//if( sp != NULL )
		{
			//mod Thorns and Entangling Roots
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
			sp->eff[0].EffectMiscValue = SMT_DAMAGE_DONE;	//hmm, only lvl 2 is messed up by blizz
			sp->eff[0].EffectSpellGroupRelation[0] = sp->eff[0].EffectSpellGroupRelation[0] | sp->eff[1].EffectSpellGroupRelation[0];
			sp->eff[0].EffectSpellGroupRelation[1] = sp->eff[0].EffectSpellGroupRelation[1] | sp->eff[1].EffectSpellGroupRelation[1];
			sp->eff[0].EffectSpellGroupRelation[2] = sp->eff[0].EffectSpellGroupRelation[2] | sp->eff[1].EffectSpellGroupRelation[2];
			//mod force of nature
			sp->eff[1].EffectMiscValue = SMT_DAMAGE_DONE;	//hmm, only lvl 2 is messed up by blizz
			sp->eff[1].EffectBasePoints = sp->eff[2].EffectBasePoints;
			sp->eff[1].EffectSpellGroupRelation[0] = 0;
			sp->eff[1].EffectSpellGroupRelation[1] = 512;
			//register prof for force of nature
			//attacks done to you while you have Barkskin active have a $s3% chance to daze the target for 3 sec.
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK_VICTIM;
			sp->eff[2].EffectTriggerSpell = 50411;
			sp->proc_interval = 1;
		}
		//the treant proc spell
		sp = dbcSpell.LookupEntryForced( 50419 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			*/

		//Druid: Natural Shapeshifter
		sp = dbcSpell.LookupEntryForced( 16833 );
		//if( sp != NULL )
			sp->DurationIndex = 21;
		sp = dbcSpell.LookupEntryForced( 16834 );
		//if( sp != NULL )
			sp->DurationIndex = 21;
//		sp = dbcSpell.LookupEntryForced( 16835 );
		//if( sp != NULL )
//			sp->DurationIndex = 21;

		// druid - Naturalist
		sp = dbcSpell.LookupEntryForced( 17069 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
			sp->eff[1].EffectMiscValue = 1;  
		}
		sp = dbcSpell.LookupEntryForced( 17070 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
			sp->eff[1].EffectMiscValue = 1; 
		}

		// druid - Nature's Grace
		sp = dbcSpell.LookupEntryForced( 16880 );
		//if( sp != NULL )
		{
            sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[1] = SPELL_HASH_REGROWTH;
			sp->ProcOnNameHash[2] = SPELL_HASH_INSECT_SWARM;
			sp->proc_interval = 60000;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 61345 );
		//if( sp != NULL )
		{
            sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[1] = SPELL_HASH_REGROWTH;
			sp->ProcOnNameHash[2] = SPELL_HASH_INSECT_SWARM;
			sp->proc_interval = 60000;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 61346 );
		//if( sp != NULL )
		{
            sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
			sp->ProcOnNameHash[1] = SPELL_HASH_REGROWTH;
			sp->ProcOnNameHash[2] = SPELL_HASH_INSECT_SWARM;
			sp->proc_interval = 60000;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}

		// Druid: Omen of Clarity
		sp = dbcSpell.LookupEntryForced( 16864 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK | PROC_ON_CAST_SPELL;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->proc_interval = 20000;	//3ppm
		}
		sp = dbcSpell.LookupEntryForced( 16870 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procCharges = 1;
			sp->procChance = 20;
			SetPPMForChance( sp, 4, 1000, 60000 );
			sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
		}

		// Druid: Living Seed
		sp = dbcSpell.LookupEntryForced( 48496 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_HEAL_CRIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 48504;
			sp->RequiredShapeShift = 0;
		}
		sp = dbcSpell.LookupEntryForced( 48499 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_HEAL_CRIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 48504;
			sp->RequiredShapeShift = 0;
		}
		sp = dbcSpell.LookupEntryForced( 48500 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_HEAL_CRIT;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 48504;
			sp->RequiredShapeShift = 0;
		}
		//this is applied on target !
		sp = dbcSpell.LookupEntryForced( 48504 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 48503;
		}
		//this is a proccharge spell that needs removal on trigger
		sp = dbcSpell.LookupEntryForced( 48503 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}

		uint32 mm = (1<<(FORM_BEAR-1))|(1<<(FORM_DIREBEAR-1))|(1<<(FORM_MOONKIN-1))|(1<<(FORM_CAT-1));

		//Predatory Strikes
		//Increases the critical strike chance of your Ravage by $s1% on targets at or above $s2% health.
		//Your finishing moves have a $b3% chance per combo point to make your next non-instant Nature spell with a base casting time of less than 10 sec. become an instant cast spell and cost no mana.
		sp = dbcSpell.LookupEntryForced( 16972 );
		//if( sp != NULL )s
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 69369;
			sp->procChance = 100;	//we will script this
			sp->procFlags = PROC_ON_CAST_SPELL;	//we will test the casting spell manually
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 16974 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 69369;
			sp->procChance = 100;	//we will script this
			sp->procFlags = PROC_ON_CAST_SPELL;	//we will test the casting spell manually
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 69369 );
		//if( sp != NULL )
		{
			sp->procCharges = 1;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		mm = (1<<(FORM_MOONKIN-1));
		//Moonkin Form (Passive)
		sp = dbcSpell.LookupEntryForced( 24905 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = mm;
			sp->chained_cast = dbcSpell.LookupEntryForced( 24907 );
		}
		sp = dbcSpell.LookupEntryForced( 24907 );
		//if( sp != NULL )
			sp->RequiredShapeShift = mm;

		//Improved Moonkin Form
/*		sp = dbcSpell.LookupEntryForced( 50170 );
		//if( sp != NULL )
			sp->RequiredShapeShift = mm;
		sp = dbcSpell.LookupEntryForced( 50171 );
		//if( sp != NULL )
			sp->RequiredShapeShift = mm;
		sp = dbcSpell.LookupEntryForced( 50172 );
		//if( sp != NULL )
			sp->RequiredShapeShift = mm;*/

		//Faerie Fire (Feral)
		sp = dbcSpell.LookupEntryForced( 16857 );
		//if( sp != NULL )
		{
			sp->eff[2].Effect = SPELL_EFFECT_SCHOOL_DAMAGE;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->eff[2].EffectSpellPowerCoef = 0.0f;	//not sure if this should scale with SP
//			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;  //yes it does
			sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH; // yes, it does break stealth !
			sp->FacingCasterFlags = 0;
		}
	//////////////////////////////////////////
	// ITEMS								//
	//////////////////////////////////////////
	// Insert items spell fixes here

	//sunfire / moonfire 
	{
		uint32 SpellIds[] = { 93402, 8921, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
//			DynamicCreateAssignSpellStackGroup( sp, 0, "SunFireMoonFire" );
			sp->BGR_one_buff_on_target |= SPELL_TYPE_SUNFIRE_MOONFIRE;
			sp->BGR_one_buff_on_target_skip_caster_check = false;
		}
	}
	//Graccu's Mince Meat Fruitcake, Highland Spring Water
	{
		uint32 SpellIds[] = { 25990, 80169, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
			DynamicCreateAssignSpellStackGroup( sp, 0, "Food" );
		}
	}
	{
		uint32 SpellIds[] = { 25990, 80167, 87959, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
			DynamicCreateAssignSpellStackGroup( sp, 0, "drink" );
		}
	}
	//Call of Dominance, Synapse Springs
	{
		uint32 SpellIds[] = { 84968, 92225, 99712, 99741, 102437, 105134, 96230, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
			DynamicCreateAssignSpellStackGroup( sp, 0, "PVP int trinkets" );
		}
	}
	//Titanic Strength,Call of Victory, Synapse Springs
	{
		uint32 SpellIds[] = { 107949, 109746, 109747, 84966, 92224, 99713, 99740, 102434, 105133, 96229, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
			DynamicCreateAssignSpellStackGroup( sp, 0, "PVP str trinkets" );
		}
	}
	//Unleashed Rage,Trueshot Aura, Blessing of Might, Abomination's Might
	{
		uint32 SpellIds[] = { 30802, 30808, 19506, 19740, 53137, 53138, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
			DynamicCreateAssignSpellStackGroup( sp, 0, "PVP AP trinkets" );
		}
	}
	//badges and Ricket's Magnetic Fireball, Synapse String, Kiroptyric Sigil, Hyperspeed Acceleration
	{
		uint32 SpellIds[] = { 91836, 107948,109791,109792, 96230, 96229, 96228, 100403, 101515, 54758, 107947, 82174, 24574,26480,40729,40744,40811,40815,61306,61308,61311,61312,63832,63833,63834,63835,63836,63837,63838,63839,63840,63841,69757,91290, 32362,62088,58783,84969,84966,84968,92226,92225,92224,99739,99740,99741,99711,99712,99713,102437,102434,102441,105133,105134,105132, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
			DynamicCreateAssignSpellStackGroup( sp, 0, " badge type " );
		}
	}
	//wowhead says these share cooldown. Blame wowhead ?
	{
		uint32 SpellIds[] = { 9515,9174,70537,14537,10578,11826,12766,13237,13278,13183,15712,17283,17330,6251,17668,18787,23271,23721,23720,23723,23726,23733,23734,24661,24658,24571,24498,24531,24532,24499,24543,24544,24354,24352,50708,24389,24427,24865,24998,25891,26166,26599,27675,28200,29602,31040,39201,39200,33662,33667,34106,34000,37208,35337,35733,36347,36432,40724,40729,45042,46783,47217,47806,47816,60471,60305,48847,48848,48868,60299,60521,60215,60480,51985,51978,61778,61427,60439,54092,60319,54418,54329,55039,56184,59197,61620,61617,59657,59658,59757,64712,64800,65008,65011,64707,64524,64525,64527,64981,67738,67736,67726,67695,67744,67740,67747,67683,67684,71563,71579,73549,73522,73550,73551,73552,93225,75490,75495,91341,91135,91351,92199,92098,91376,91340,91136,91352,92099,91374,91336,90842,91019,91155,92213,92162,91344,92045,82207,90889,91345,92123,91828,92222,92188,92071,90900,92357,93740,95870,95874,95872,95875,95877,97007,97008,97009,97010,100612,101492,101293,107947,107948,107949,26576,26614,28777,28779,28780,32355,32362,32367,33400,33807,35163,35165,35166,37877,40396,43710,43712,43716,47215,48846,48855,48865,33662,47816,50261,51955,51954,51953,48875,61428,62088,71568,91836,91041,91173,84969,84966,84968,92601,92226,92225,92224,92328,96934,97127,101515,99739,99740,99741,99711,99712,99713,102441,102437,102434,105133,105134,105132, 0 };
		for( uint32 i=0;i<50 && SpellIds[i]!=0; i++)
		{
			sp = dbcSpell.LookupEntryForced( SpellIds[i] ); 
			DynamicCreateAssignSpellStackGroup( sp, 0, " badge type " );
		}
	}

#ifdef SPECIFIC_14333_CLIENT_FIXES
	// Shroud of Death - making it custom so it decreases your health without triggering any procs and not killing you
	sp = dbcSpell.LookupEntryForced( 10848 );
	//if( sp != NULL )
	{
		sp->DurationIndex = 21;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectAmplitude = 10000;
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}
#endif


	//Potion of Illusion
	sp = dbcSpell.LookupEntryForced( 80265 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 80396;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}

	//Sandstone Drake - vial of sands should convert you into a ridable vehicle
	sp = dbcSpell.LookupEntryForced( 93326 );
	//if( sp != NULL )
	if( sp->eff[1].Effect == SPELL_EFFECT_NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_TRANSFORM;
	}

	//Pygmy Oil
	sp = dbcSpell.LookupEntryForced( 53808 );
	//if( sp != NULL )
		sp->chained_cast = dbcSpell.LookupEntryForced( 53806 );

	//Opening Chest - used for example by battleground flags
	sp = dbcSpell.LookupEntryForced( 11437 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;
	sp = dbcSpell.LookupEntryForced( 21651 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_BREAKING_STEALTH;

	//Summon Moonwell
	sp = dbcSpell.LookupEntryForced( 100403 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;
		sp->eff[2].EffectImplicitTargetB = EFF_TARGET_NONE;
	}

	//Item - Proc Mastery Rating - Porcelain Crab
	sp = dbcSpell.LookupEntryForced( 92164 );
	//if( sp != NULL )
		sp->proc_interval = 120000;
	sp = dbcSpell.LookupEntryForced( 92175 );
	//if( sp != NULL )
		sp->proc_interval = 120000;

	//Item - Proc Agility - Key to the Endless Chamber
	sp = dbcSpell.LookupEntryForced( 92093 );
	//if( sp != NULL )
		sp->proc_interval = 50000;
	sp = dbcSpell.LookupEntryForced( 92070 );
	//if( sp != NULL )
		sp->proc_interval = 50000;

	//Torment of the Worgen
	sp = dbcSpell.LookupEntryForced( 30567 );
	//if( sp != NULL )
		sp->proc_interval = 30000;
	sp = dbcSpell.LookupEntryForced( 30564 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	//Legacy of the Mountain King
	sp = dbcSpell.LookupEntryForced( 30562 );
	//if( sp != NULL )
	{
		sp->proc_interval = 30000;
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
	}
	//Redemption of the Fallen
	sp = dbcSpell.LookupEntryForced( 30550 );
	//if( sp != NULL )
	{
		sp->proc_interval = 30000;
		sp->procFlags = PROC_ON_HEAL;
	}
	//Shapeshift Movement Speed
	sp = dbcSpell.LookupEntryForced( 23218 );
	//if( sp != NULL )
	{
		sp->apply_on_shapeshift_change = true;
		sp->RequiredShapeShift = (1 << (FORM_CAT-1)) | (1 << (FORM_BEAR-1)) | (1 << (FORM_TRAVEL-1));
	}
	//Lightning Strike - Vial of Shadows
	sp = dbcSpell.LookupEntryForced( 107995 );
	//if( sp != NULL )
		sp->proc_interval = 30000;	//increased it from 9
	sp = dbcSpell.LookupEntryForced( 107994 );
	//if( sp != NULL )
		sp->AttackPowerToSpellDamageCoeff = sp->AttackPowerToSpellDamageCoeff * 0.3f; //not blizzlike but people QQ it's too imba
	sp = dbcSpell.LookupEntryForced( 109722 );
	//if( sp != NULL )
		sp->proc_interval = 30000; //increased it from 9
	sp = dbcSpell.LookupEntryForced( 109721 );
	//if( sp != NULL )
		sp->AttackPowerToSpellDamageCoeff = sp->AttackPowerToSpellDamageCoeff * 0.3f; //not blizzlike but people QQ it's too imba
	sp = dbcSpell.LookupEntryForced( 109725 );
	//if( sp != NULL )
		sp->proc_interval = 30000; //increased it from 9
	sp = dbcSpell.LookupEntryForced( 109724 );
	//if( sp != NULL )
		sp->AttackPowerToSpellDamageCoeff = sp->AttackPowerToSpellDamageCoeff * 0.3f; //not blizzlike but people QQ it's too imba

	// Duel
	sp = dbcSpell.LookupEntryForced( 7266 );
		sp->FacingCasterFlags = 0;
	//beast fury
	sp = dbcSpell.LookupEntryForced( 108016 );
	//if( sp != NULL )
		sp->DurationIndex = dbcSpell.LookupEntryForced( 108011 )->DurationIndex; // Fury of the Beast
	sp = dbcSpell.LookupEntryForced( 109860 );
	//if( sp != NULL )
		sp->DurationIndex = dbcSpell.LookupEntryForced( 109861 )->DurationIndex; // Fury of the Beast
	sp = dbcSpell.LookupEntryForced( 109863 );
	//if( sp != NULL )
		sp->DurationIndex = dbcSpell.LookupEntryForced( 109864 )->DurationIndex; // Fury of the Beast
	//Cleansing Flames
	sp = dbcSpell.LookupEntryForced( 107835 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_IN_FRONT_OF_CASTER_FRIENDLY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	sp = dbcSpell.LookupEntryForced( 109847 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_IN_FRONT_OF_CASTER_FRIENDLY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	sp = dbcSpell.LookupEntryForced( 109849 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_IN_FRONT_OF_CASTER_FRIENDLY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	//Item - Dragon Soul - Proc - Str Melee 2H Sword LFR
	sp = dbcSpell.LookupEntryForced( 107810 );
	//if( sp != NULL )
	{
		sp->procChance = 10;	//old one was 2, but that never procs :(
		sp->proc_interval = 60000 / 2; //intervall will force it to proc with 2% hitchance
		sp->eff[0].EffectBasePoints = 0;	//summon only 1 tentacle
	}
	sp = dbcSpell.LookupEntryForced( 107818 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 0;	//summon only 1 tentacle
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->DurationIndex = 29;	//12 seconds
		sp->DurationIndex = 305;	//14 seconds until AIinterface kicks in ...
	}
	//Item - Dragon Soul - Proc - Str Melee 2H Sword LFR
	sp = dbcSpell.LookupEntryForced( 109841 );
	//if( sp != NULL )
	{
		sp->procChance = 10;	//old one was 2, but that never procs :(
		sp->proc_interval = 60000 / 2; //intervall will force it to proc with 2% hitchance
		sp->eff[0].EffectBasePoints = 0;	//summon only 1 tentacle
	}
	sp = dbcSpell.LookupEntryForced( 109840 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 0;	//summon only 1 tentacle
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->DurationIndex = 29;	//12 seconds
		sp->DurationIndex = 305;	//14 seconds until AIinterface kicks in ...
	}
	//Item - Dragon Soul - Proc - Str Melee 2H Sword LFR
	sp = dbcSpell.LookupEntryForced( 109839 );
	//if( sp != NULL )
	{
		sp->procChance = 10;	//old one was 2, but that never procs :(
		sp->proc_interval = 60000 / 2; //intervall will force it to proc with 2% hitchance
		sp->eff[0].EffectBasePoints = 0;	//summon only 1 tentacle
	}
	sp = dbcSpell.LookupEntryForced( 109838 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 0;	//summon only 1 tentacle
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->DurationIndex = 29;	//12 seconds
		sp->DurationIndex = 305;	//14 seconds until AIinterface kicks in ...
	}
	//Item - Dragon Soul - Proc - Int Hit Dagger LFR
	sp = dbcSpell.LookupEntryForced( 109853 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Dragon Soul - Proc - Int Hit Dagger Heroic
	sp = dbcSpell.LookupEntryForced( 109855 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Dragon Soul - Proc - Agi Melee Polearm Heroic
	sp = dbcSpell.LookupEntryForced( 109865 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK|PROC_ON_RANGED_ATTACK;
		sp->procChance = 50;
		sp->proc_interval = 60000;//no idea :(
	}
	sp = dbcSpell.LookupEntryForced( 107824 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK|PROC_ON_RANGED_ATTACK;
		sp->procChance = 50;
		sp->proc_interval = 60000;//no idea :(
	}
	sp = dbcSpell.LookupEntryForced( 109862 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK|PROC_ON_RANGED_ATTACK;
		sp->procChance = 50;
		sp->proc_interval = 60000;//no idea :(
	}
	//Item - Dragon Soul - Proc - Agi Melee 1H Axe
	sp = dbcSpell.LookupEntryForced( 107786 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 7;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 107785;
//		sp->proc_interval = 20000;//no idea :(
		SetPPMForChance( sp, 2, 1000, 60000 );
	}
	//Item - Dragon Soul - Proc - Agi Melee 1H Axe LFR
	sp = dbcSpell.LookupEntryForced( 109866 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 7;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 109867;
//		sp->proc_interval = 20000;//no idea :(
		SetPPMForChance( sp, 2, 1000, 60000 );
	}
	//Item - Dragon Soul - Proc - Agi Melee 1H Axe Heroic
	sp = dbcSpell.LookupEntryForced( 109873 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 7;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 109868;
//		sp->proc_interval = 20000;//no idea :(
		SetPPMForChance( sp, 2, 1000, 60000 );
	}
	//Item - Dragon Soul Legendary Daggers - Shadows of the Destroyer
	sp = dbcSpell.LookupEntryForced( 109949 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
	//Item - Hunter T13 4P Bonus (Arcane Shot)
	sp = dbcSpell.LookupEntryForced( 105921 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_ARCANE_SHOT;
	}
	sp = dbcSpell.LookupEntryForced( 105919 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_PET;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	//Item - Warrior T13 Protection 4P Bonus (Shield Wall)
	sp = dbcSpell.LookupEntryForced( 105911 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105911;	//self proc !
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_WALL;
	}
	//Item - Warrior T13 Protection 2P Bonus (Revenge)
	sp = dbcSpell.LookupEntryForced( 105908 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105909;
		sp->ProcOnNameHash[0] = SPELL_HASH_REVENGE;
	}
	//Item - Warrior T13 Arms and Fury 4P Bonus (Colossus Smash)
	sp = dbcSpell.LookupEntryForced( 105907 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOODTHIRST;
		sp->ProcOnNameHash[1] = SPELL_HASH_MORTAL_STRIKE;
	}
	//Item - Shaman T13 Restoration 4P Bonus (Spiritwalker's Grace)
	sp = dbcSpell.LookupEntryForced( 105876 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->procChance = 100;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 105877;
		sp->ProcOnNameHash[0] = SPELL_HASH_SPIRITWALKER_S_GRACE;
	}
	//Item - Shaman T13 Enhancement 4P Bonus (Feral Spirits)
	//Maelstrom Weapon
	sp = dbcSpell.LookupEntryForced( 53817 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;
	//Item - Shaman T13 Enhancement 2P Bonus (Maelstrom Weapon)
	sp = dbcSpell.LookupEntryForced( 105866 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105869;
		sp->ProcOnNameHash[0] = SPELL_HASH_MAELSTROM_WEAPON;
	}
	sp = dbcSpell.LookupEntryForced( 53817 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
	//Item - Rogue T13 2P Bonus (Tricks of the Trade)
	sp = dbcSpell.LookupEntryForced( 105849 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105864;
		sp->ProcOnNameHash[0] = SPELL_HASH_TRICKS_OF_THE_TRADE;
	}
	//Item - Priest T13 Shadow 4P Bonus (Shadowfiend and Shadowy Apparition)
	//Shadow Orb
	sp = dbcSpell.LookupEntryForced( 77487 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET_MASTER;
	//Item - Priest T13 Healer 4P Bonus (Holy Word and Power Word: Shield)
	sp = dbcSpell.LookupEntryForced( 105832 );
	//if( sp != NULL )
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	//Item - Priest T13 Healer 2P Bonus (Power Infusion and Lightwell)
	sp = dbcSpell.LookupEntryForced( 105827 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_INFUSION;
		sp->ProcOnNameHash[1] = SPELL_HASH_DIVINE_HYMN;
	}
	//Item - Paladin T13 Retribution 4P Bonus (Zealotry)
	sp = dbcSpell.LookupEntryForced( 105820 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->ProcOnNameHash[0] = SPELL_HASH_ZEALOTRY;
	}
	//Item - Paladin T13 Protection 2P Bonus (Judgement)
	sp = dbcSpell.LookupEntryForced( 105800 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_MELEE_ATTACK_EVENT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105801;	
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
	}
	//Item - Warrior T13 Arms and Fury 2P Bonus (Inner Rage)
	sp = dbcSpell.LookupEntryForced( 105797 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_INNER_RAGE;
	}
	//Item - Mage T13 2P Bonus (Haste Rating)
	sp = dbcSpell.LookupEntryForced( 105788 );
	//if( sp != NULL ) 
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
	//Item - Warlock T13 4P Bonus (Soulburn)
	sp = dbcSpell.LookupEntryForced( 105787 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SOULBURN;
		sp->ProcOnNameHash[1] = SPELL_HASH_SOUL_FIRE;
	}
	//Item - Shaman T13 Elemental 2P Bonus (Elemental Mastery)
	sp = dbcSpell.LookupEntryForced( 105780 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_ELEMENTAL_MASTERY;
	}
	//Item - Druid T13 Restoration 4P Bonus (Rejuvenation)
	sp = dbcSpell.LookupEntryForced( 105770 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105770;	//self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
		sp->ProcOnNameHash[1] = SPELL_HASH_REGROWTH;
	}
	//Item - Paladin T13 Retribution 2P Bonus (Judgement)
	sp = dbcSpell.LookupEntryForced( 105765 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT;
	}
	//Item - Shaman T13 Restoration 2P Bonus (Mana Tide)
	sp = dbcSpell.LookupEntryForced( 105764 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MANA_TIDE_TOTEM;
	}
	//Item - Paladin T13 Holy 2P Bonus (Divine Favor)
	sp = dbcSpell.LookupEntryForced( 105743 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_FAVOR;
	}
	//Item - Druid T13 Feral 4P Bonus (Frenzied Regeneration and Stampede)
	sp = dbcSpell.LookupEntryForced( 105735 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81022;	//stampede proc in cat form
		sp->ProcOnNameHash[0] = SPELL_HASH_TIGER_S_FURY;
		sp->ProcOnNameHash[1] = SPELL_HASH_FRENZIED_REGENERATION;
	}
	sp = dbcSpell.LookupEntryForced( 81022 );
	//if( sp != NULL )
		sp->chained_cast = dbcSpell.LookupEntryForced( 109881 ); //stampede for 4.3 client requires this 
	//Item - Hunter T13 2P Bonus (Steady Shot and Cobra Shot)
	sp = dbcSpell.LookupEntryForced( 105732 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77443;
		sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
		sp->ProcOnNameHash[1] = SPELL_HASH_COBRA_SHOT;
	}
	//Item - Druid T13 Feral 2P Bonus (Savage Defense and Blood In The Water)
	sp = dbcSpell.LookupEntryForced( 105725 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_SPELL_HIT_EVENT;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105725;	//self proc !
		sp->ProcOnNameHash[0] = SPELL_HASH_MANGLE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FEROCIOUS_BITE;
	}
	//Item - Druid T13 Restoration 2P Bonus (Innervate)
	sp = dbcSpell.LookupEntryForced( 105715 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->ProcOnNameHash[0] = SPELL_HASH_INNERVATE;
	}
	//Item - Death Knight T13 DPS 4P Bonus
	sp = dbcSpell.LookupEntryForced( 105646 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105647;
		sp->ProcOnNameHash[0] = SPELL_HASH_RUNIC_EMPOWERMENT;
		sp->ProcOnNameHash[1] = SPELL_HASH_RUNIC_CORRUPTION;
		sp->procChance=100;
	}
	//Item - Death Knight T13 Blood 4P Bonus
	sp = dbcSpell.LookupEntryForced( 105587 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 105587;	//self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_VAMPIRIC_BLOOD;
		sp->procChance=100;
	}
	//Item - Death Knight T13 Blood 2P Bonus
	sp = dbcSpell.LookupEntryForced( 105552 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
		sp->proc_interval = sp->eff[1].EffectBasePoints*1000;
	}
	//Item - Warrior T12 Protection 4P Bonus
	sp = dbcSpell.LookupEntryForced( 99242 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99243;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_BLOCK;
	}
	// Insert items spell fixes here
	//Item - Warrior T12 Protection 2P Bonus
	sp = dbcSpell.LookupEntryForced( 99239 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99240;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_SLAM;
	}
	//Item - Shaman T12 Enhancement 4P Bonus
	sp = dbcSpell.LookupEntryForced( 99213 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99212;
		sp->ProcOnNameHash[0] = SPELL_HASH_STORMSTRIKE;
	}
	//Item - Shaman T12 Elemental 4P Bonus
	sp = dbcSpell.LookupEntryForced( 99206 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99207;
		sp->ProcOnNameHash[0] = SPELL_HASH_LAVA_SURGE_;
	}
	sp = dbcSpell.LookupEntryForced( 77762 );	//SPELL_HASH_LAVA_SURGE_
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;	
	//Item - Shaman T12 Elemental 2P Bonus
	sp = dbcSpell.LookupEntryForced( 99204 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99204;	//self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
	}
	//Item - Shaman T12 Restoration 2P Bonus
	sp = dbcSpell.LookupEntryForced( 99190 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RIPTIDE;
	}
	//Item - Rogue T12 4P Bonus
	sp = dbcSpell.LookupEntryForced( 99175 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99187;
		sp->ProcOnNameHash[0] = SPELL_HASH_TRICKS_OF_THE_TRADE;
	}
	//Item - Rogue T12 2P Bonus
	sp = dbcSpell.LookupEntryForced( 99174 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99173;
	}
	//Item - Priest T12 Shadow 4P Bonus
	sp = dbcSpell.LookupEntryForced( 99157 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99158;
	}
	//Item - Priest T12 Healer 2P Bonus
	sp = dbcSpell.LookupEntryForced( 99134 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	//Item - Paladin T12 Protection 4P Bonus 
	sp = dbcSpell.LookupEntryForced( 99091 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->procChance = 100;
		sp->eff[0].EffectTriggerSpell = 99090;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PROTECTION;
	}
	//Item - Paladin T12 Protection 2P Bonus
	sp = dbcSpell.LookupEntryForced( 99074 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99074;	//self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_OF_THE_RIGHTEOUS;
	}
	//Item - Paladin T12 Holy 4P Bonus
	sp = dbcSpell.LookupEntryForced( 99070 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99070;	//self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_LIGHT;
		sp->ProcOnNameHash[1] = SPELL_HASH_FLASH_OF_LIGHT;
		sp->ProcOnNameHash[2] = SPELL_HASH_HOLY_LIGHT;
	}
	//Item - Druid T12 Restoration 4P Bonus 
	sp = dbcSpell.LookupEntryForced( 99015 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99015;	//self proc
		sp->eff[0].EffectBasePoints = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_SWIFTMEND;
	}
	//Item - Druid T12 Feral 4P Bonus 
	sp = dbcSpell.LookupEntryForced( 99009 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99011;
	}
	//Item - Druid T12 Feral 2P Bonus 
	sp = dbcSpell.LookupEntryForced( 99001 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99002;	
		sp->ProcOnNameHash[0] = SPELL_HASH_MANGLE;
		sp->ProcOnNameHash[1] = SPELL_HASH_MAUL;
		sp->ProcOnNameHash[2] = SPELL_HASH_SHRED;
	}
	//Item - Death Knight T12 DPS 2P Bonus
	sp = dbcSpell.LookupEntryForced( 98996 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 98996;	//!self proc
		sp->ProcOnNameHash[0] = SPELL_HASH_OBLITERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SCOURGE_STRIKE;
	}
	//Item - Death Knight T12 Blood 4P Bonus 
	sp = dbcSpell.LookupEntryForced( 98966 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 101162;
		sp->ProcOnNameHash[0] = SPELL_HASH_DANCING_RUNE_WEAPON;
	}
	//Dropping Heavy Bomb
	sp = dbcSpell.LookupEntryForced( 33836 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TAXI_CASTABLE_ONLY;
	//Arcane Charges
	sp = dbcSpell.LookupEntryForced( 45072 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TAXI_CASTABLE_ONLY;
	//Quest - Sunwell Daily - Ship Bombing Run Bomb
	sp = dbcSpell.LookupEntryForced( 45115 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TAXI_CASTABLE_ONLY;
	//Fire Bomb Trigger
	sp = dbcSpell.LookupEntryForced( 31958 );
	//if( sp != NULL )
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TAXI_CASTABLE_ONLY;

	//Drums of Forgotten Kings - 69378 - Blessing of Forgotten Kings 
	sp = dbcSpell.LookupEntryForced( 69378 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 72586;
		sp->eff[0].EffectImplicitTargetB  = EFF_TARGET_ALL_RAID;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
	}

	//Runescroll of Fortitude 
	sp = dbcSpell.LookupEntryForced( 69377 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 72590;
	}
	sp2 = dbcSpell.LookupEntryForced( 72590 );
	//if( sp != NULL )
	{
		sp2->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;
	}
	//Runescroll of Fortitude II 
	sp = dbcSpell.LookupEntryForced( 86507 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 96175;
	}
	sp2 = dbcSpell.LookupEntryForced( 96175 );
	//if( sp != NULL )
	{
		sp2->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;
	}

	//Item - Refurbished Ogre Suit
	sp = dbcSpell.LookupEntryForced( 72984 );
	//if( sp != NULL )
		sp->RequiredAreaId = 983;	//DunemaulCompound

	//Gnomish X-Ray Scope
	sp = dbcSpell.LookupEntryForced( 95713 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_RANGED_ATTACK;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Left Eye of Rajh - Item - Proc Agility On Crit
	sp = dbcSpell.LookupEntryForced( 92097 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_CRIT_ATTACK;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 92095 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_CRIT_ATTACK;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Item - Proc Dodge Below 35%
	sp = dbcSpell.LookupEntryForced( 92234 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Mastery Below 35%
	sp = dbcSpell.LookupEntryForced( 92236 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Mastery Below 35%
	sp = dbcSpell.LookupEntryForced( 92356 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Item - Proc Spell Power On Crit
	sp = dbcSpell.LookupEntryForced( 91011 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Spell Power On Crit
	sp = dbcSpell.LookupEntryForced( 92319 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}

	//Item - Proc Mastery
	sp = dbcSpell.LookupEntryForced( 91025 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	//Item - Proc Spell Power
	sp = dbcSpell.LookupEntryForced( 91048 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Mastery
	sp = dbcSpell.LookupEntryForced( 92322 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}

	//Item - Proc Spell Power
	sp = dbcSpell.LookupEntryForced( 90993 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Volcano
	sp = dbcSpell.LookupEntryForced( 89088 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 45000;
	}

	//Item - Proc Stacking Spell Power
	sp = dbcSpell.LookupEntryForced( 91031 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 2000;
	}
	//Item - Proc Stacking Spell Power
	sp = dbcSpell.LookupEntryForced( 92326 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 2000;
	}

	//Item - Proc Stacking Strength
	sp = dbcSpell.LookupEntryForced( 91811 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Strength
	sp = dbcSpell.LookupEntryForced( 91817 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	//Item - Proc Haste Rating
	sp = dbcSpell.LookupEntryForced( 91822 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Stacking Activator (5)
	sp = dbcSpell.LookupEntryForced( 91833 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Increased Autoattack Damage
	sp = dbcSpell.LookupEntryForced( 92114 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Haste Rating
	sp = dbcSpell.LookupEntryForced( 92343 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Strength
	sp = dbcSpell.LookupEntryForced( 92346 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}

	//Hurricane
	sp = dbcSpell.LookupEntryForced( 89086 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK | PROC_ON_HEAL_SPELL | PROC_ON_SPELL_HIT_DOT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Stacking Agility
	sp = dbcSpell.LookupEntryForced( 92105 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 10000;
	}
	sp = dbcSpell.LookupEntryForced( 92086 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 10000;
	}
	sp = dbcSpell.LookupEntryForced( 92090 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 10000;
	}
	//Item - Proc Haste Rating
	sp = dbcSpell.LookupEntryForced( 92125 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Crit Rating
	sp = dbcSpell.LookupEntryForced( 92127 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 50000;
	}
	//Item - Proc Haste Rating
	sp = dbcSpell.LookupEntryForced( 92350 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Crit Rating
	sp = dbcSpell.LookupEntryForced( 92353 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 50000;
	}

	//Tsunami
	sp = dbcSpell.LookupEntryForced( 89183 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 999;	//they say this should proc all the time
	}
	//Item - Proc Spirit
	sp = dbcSpell.LookupEntryForced( 91150 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 15000;
	}
	//Item - Proc Spirit
	sp = dbcSpell.LookupEntryForced( 91186 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 30000;
	}
	//Item - Proc Mastery Rating
	sp = dbcSpell.LookupEntryForced( 91193 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Stacking Spirit
	sp = dbcSpell.LookupEntryForced( 92330 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 5000;
	}
	//Item - Proc Spirit
	sp = dbcSpell.LookupEntryForced( 92333 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 30000;
	}

	//Surge of Conquest
	sp = dbcSpell.LookupEntryForced( 92221 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Surge of Dominance
	sp = dbcSpell.LookupEntryForced( 92219 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Surge of Victory
	sp = dbcSpell.LookupEntryForced( 92217 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 92216 );
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue =  STAT_STRENGTH;	//strangely this mods agility by default
	//Surge of Victory
	sp = dbcSpell.LookupEntryForced( 85034 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Surge of Dominance
	sp = dbcSpell.LookupEntryForced( 85024 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Surge of Conquest
	sp = dbcSpell.LookupEntryForced( 85011 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Spell Power
	sp = dbcSpell.LookupEntryForced( 90899 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Haste Rating
	sp = dbcSpell.LookupEntryForced( 91142 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Item - Proc Stacking Spirit
	sp = dbcSpell.LookupEntryForced( 91321 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_HEAL_EVENT ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 5000;
	}
	sp = dbcSpell.LookupEntryForced( 91322 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
	//Living Ruby Pendant
	sp = dbcSpell.LookupEntryForced( 31024 );
	//if( sp != NULL )
		sp->Spell_value_is_scripted = true;
	//Citrine Pendant of Golden Healing
	sp = dbcSpell.LookupEntryForced( 25608 );
	//if( sp != NULL )
		sp->Spell_value_is_scripted = true;

		//Vigilance of the Colossus
		sp = dbcSpell.LookupEntryForced( 33089 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_BLOCK_VICTIM ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		//throw ice - some quest item
		sp = dbcSpell.LookupEntryForced( 56099 );
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;	//maybe location of this GO ? 192124
		//Item - stonestatue - stone healing
		sp = dbcSpell.LookupEntryForced( 32790 );
		//if( sp != NULL )
			sp->DurationIndex = 5;	//5 minutes
		sp = dbcSpell.LookupEntryForced( 32788 );
		//if( sp != NULL )
			sp->DurationIndex = 5;	//5 minutes
		sp = dbcSpell.LookupEntryForced( 32787 );
		//if( sp != NULL )
			sp->DurationIndex = 5;	//5 minutes
		sp = dbcSpell.LookupEntryForced( 32253 );
		//if( sp != NULL )
			sp->DurationIndex = 5;	//5 minutes
		sp = dbcSpell.LookupEntryForced( 32792 );
		//if( sp != NULL )
			sp->DurationIndex = 5;	//5 minutes

		//Item - Shadowmourne Legendary
		sp = dbcSpell.LookupEntryForced( 71903 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 71905;
			sp->proc_interval = 10000; // 6ppm;
		}
		sp = dbcSpell.LookupEntryForced( 71904 );//chaos bane
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_LOCATION_TO_SUMMON;	//land under caster

		//Compact Harvest Reaper
		sp = dbcSpell.LookupEntryForced( 4078 );
		//if( sp != NULL )
		{
			sp->DurationIndex = 6;
		}

		//Graccu's Mince Meat Fruitcake
		sp = dbcSpell.LookupEntryForced(25990);
		//if( sp != NULL )
		{
			sp->eff[1].EffectAmplitude = 1000;
		}

		//Extract Gas 
		sp = dbcSpell.LookupEntryForced( 30427 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
		}

		//Relic - Idol of the Unseen Moon
		sp = dbcSpell.LookupEntryForced( 43739 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 43740;
		}

		//Lunar Grace - Idol of the Unseen Moon proc
		sp = dbcSpell.LookupEntryForced( 43740 );
		//if( sp != NULL )
		{
			sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
		}

		//Relic - Idol of Terror
		sp = dbcSpell.LookupEntryForced( 43737 );
		//if( sp != NULL )
		{    
			sp->proc_interval = 10001; //block proc when is already active.. (Primal Instinct duration = 10 sec)
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 43738;
			sp->procChance=85;
		}

/*		//Primal Instinct - Idol of Terror proc
		sp = dbcSpell.LookupEntryForced( 43738 );
		//if( sp != NULL )
		{    
			sp->self_cast_only = true;
			sp->ProcOnNameHash[0] = SPELL_HASH_MANGLE__CAT_;
			sp->ProcOnNameHash[1] = SPELL_HASH_MANGLE__BEAR_;
		}*/

		//Tome of Fiery Redemption
		sp = dbcSpell.LookupEntryForced( 37197 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 37198;
			sp->procChance = 15;
		}

		//Thunderfury
		sp = dbcSpell.LookupEntryForced( 21992 );
		//if( sp != NULL )
		{
			sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[2].EffectTriggerSpell = 27648;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		}

		//Energized 
		sp = dbcSpell.LookupEntryForced( 43750 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LIGHTNING_BOLT;
		}

		//Spell Haste Trinket
		sp = dbcSpell.LookupEntryForced( 33297 ); 
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}

		//Spell Focus Trigger (Mystical Skyfire Diamond)
		sp = dbcSpell.LookupEntryForced( 32837 );
		//if( sp != NULL )
			sp->procChance = 15;

		// Band of the Eternal Sage
		sp = dbcSpell.LookupEntryForced( 35083 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;

		// Band of the Eternal Restorer 
		sp = dbcSpell.LookupEntryForced( 35086 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;

		// Ashtongue Talisman of Shadows 
		sp = dbcSpell.LookupEntryForced( 40478 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CORRUPTION;
		}

		// Ashtongue Talisman of Swiftness
		sp = dbcSpell.LookupEntryForced( 40485 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_STEADY_SHOT;
		}

		// Ashtongue Talisman of Valor
		sp = dbcSpell.LookupEntryForced( 40458 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MORTAL_STRIKE;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_BLOODTHIRST;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_SHIELD_SLAM;
		}

		// Memento of Tyrande
		sp = dbcSpell.LookupEntryForced( 37655 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;

		// Ashtongue Talisman of Insight
		sp = dbcSpell.LookupEntryForced( 40482 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;

		//Ashtongue Talisman of Equilibrium
/*		sp = dbcSpell.LookupEntryForced( 40442 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 6;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 40;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[0].EffectTriggerSpell = 40452;
			sp->maxstack = 1;
			sp->eff[1].Effect = 6;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 25;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[1].EffectTriggerSpell = 40445;
			sp->maxstack = 1;
			sp->eff[2].Effect = 6;
			sp->eff[2].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 25;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[2].EffectTriggerSpell = 40446;
			sp->maxstack = 1;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_MANGLE__BEAR_;
			sp->ProcOnNameHash[ 1 ] = SPELL_HASH_MANGLE__CAT_;
			sp->ProcOnNameHash[ 2 ] = SPELL_HASH_STARFIRE;
		}*/

		//Ashtongue Talisman of Acumen
		sp = dbcSpell.LookupEntryForced( 40438 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 6;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 10;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[0].EffectTriggerSpell = 40441;
			sp->maxstack = 1;
			sp->eff[1].Effect = 6;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 10;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[1].EffectTriggerSpell = 40440;
			sp->maxstack = 1;
		}
		// Drums of war targets sorounding party members instead of us
		sp = dbcSpell.LookupEntryForced( 35475 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}

		// Drums of Battle targets sorounding party members instead of us
		sp = dbcSpell.LookupEntryForced( 35476 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}

		// Drums of Panic targets sorounding creatures instead of us
		sp = dbcSpell.LookupEntryForced( 35474 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMIES_AROUND_CASTER;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMIES_AROUND_CASTER;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}

		// Drums of Restoration targets sorounding party members instead of us
		sp = dbcSpell.LookupEntryForced( 35478 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}
		// Drums of Speed targets sorounding party members instead of us
		sp = dbcSpell.LookupEntryForced( 35477 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}

		// Dragonspine Trophy - Magtheridon Melee Trinket
 		sp = dbcSpell.LookupEntryForced( 34774 );
		//if( sp != NULL )
		{
			sp->procChance = 6;
			sp->procFlags  = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
			sp->proc_interval = uint32(60000 / 1.5f);
		}
		// Romulo's Poison
 		sp = dbcSpell.LookupEntryForced( 34586 );
		//if( sp != NULL )
		{
			sp->procChance = 6;
			sp->procFlags  = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
			sp->proc_interval = uint32(60000 / 1.5f);
		}
		//Ashtongue Talisman of Lethality
		sp = dbcSpell.LookupEntryForced( 40460 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 6;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 100;	//well it is combo point based
			sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
			sp->eff[0].EffectTriggerSpell = 40461;
//			sp->maxstack = 1;
		}

		//Serpent-Coil Braid
		sp = dbcSpell.LookupEntryForced( 37447 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 6;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->eff[0].EffectTriggerSpell = 37445;
			sp->maxstack = 1;
		}

		// Band of the Eternal Champion
		sp = dbcSpell.LookupEntryForced( 35080 );
		//if( sp != NULL )
		{
			sp->procFlags  = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
			sp->proc_interval = 60000;
		}
		// Band of the Eternal Sage
		sp = dbcSpell.LookupEntryForced( 35083 );
		//if( sp != NULL )
		{
			sp->procFlags  = PROC_ON_CAST_SPELL;
			sp->proc_interval = 60000;
		}
		// Band of the Eternal Restorer
		sp = dbcSpell.LookupEntryForced( 35086 );
		//if( sp != NULL )
		{
			sp->procFlags  = PROC_ON_CAST_SPELL;
			sp->proc_interval = 60000;
		}
		// Band of the Eternal Defender
		sp = dbcSpell.LookupEntryForced( 35077 );
		//if( sp != NULL )
		{
			sp->procFlags  = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_ANY_SPELL_DAMAGE_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
			sp->proc_interval = 60000;
		}	

		//Item Set: Malorne Harness
		sp = dbcSpell.LookupEntryForced( 37306 );
		//if( sp != NULL )
		{
			sp->procChance = 4;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		}
		sp = dbcSpell.LookupEntryForced( 37311 );
		//if( sp != NULL )
		{
			sp->procChance = 4;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		}

		//Item Set: Deathmantle
		sp = dbcSpell.LookupEntryForced( 37170 );
		//if( sp != NULL )
		{
			sp->procChance = 4;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		}

		//Item Set: Netherblade
		sp = dbcSpell.LookupEntryForced( 37168 );
		//if( sp != NULL )
		{
			sp->procChance = 15;
			//sp->procFlags = PROC_ON_CAST_SPELL; Need new flag - PROC_ON_FINISH_MOVE;
		}

		//Item Set: Tirisfal Regalia
		sp = dbcSpell.LookupEntryForced( 37443 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		}

		//Item Set: Avatar Regalia
		sp = dbcSpell.LookupEntryForced( 37600 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 6;
		}

		//Item Set: Incarnate Raiment
		sp = dbcSpell.LookupEntryForced( 37568 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FLASH_HEAL;
		}

		//Item Set: Voidheart Raiment
		sp = dbcSpell.LookupEntryForced( 37377 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = 6;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 5;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->proc_interval = 20;
			sp->eff[0].EffectTriggerSpell = 37379;
		}
		sp = dbcSpell.LookupEntryForced( 39437 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->procChance = 20;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->proc_interval = 2000;
			sp->eff[0].EffectTriggerSpell = 37378;
		}

		//Item Set: Cataclysm Raiment
		sp = dbcSpell.LookupEntryForced( 37227 );
		//if( sp != NULL )
		{
			sp->proc_interval = 60000;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		}

		//Item Set: Cataclysm Regalia
		sp = dbcSpell.LookupEntryForced( 37228 );
		//if( sp != NULL )
		{
			sp->procChance = 7;
			sp->procFlags = PROC_ON_CAST_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 37237 );
		//if( sp != NULL )
		{
			sp->procChance = 25;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_LIGHTNING_BOLT;
		}

		//Item Set: Cataclysm Harness
		sp = dbcSpell.LookupEntryForced( 37239 );
		//if( sp != NULL )
		{
			sp->procChance = 2;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		}

		//Item Set: Cyclone Regalia
		sp = dbcSpell.LookupEntryForced( 37213 );
		//if( sp != NULL )
		{
			sp->procChance = 11;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		}

		//Item Set: Crystalforge Armor
		sp = dbcSpell.LookupEntryForced( 37191 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HOLY_SHIELD;
		}

		//Item Set: Crystalforge Battlegear
		sp = dbcSpell.LookupEntryForced( 37195 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 6;
		}

		//Item Set: Crystalforge Raiment
		sp = dbcSpell.LookupEntryForced( 37189 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->proc_interval = 60000;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_FLASH_OF_LIGHT;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_HOLY_LIGHT;
		}
		sp = dbcSpell.LookupEntryForced( 37188 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		//Item Set: Destroyer Armor
		sp = dbcSpell.LookupEntryForced( 37525 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procChance = 7;
		}

		//Item Set: Destroyer Battlegear
		sp = dbcSpell.LookupEntryForced( 37528 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_OVERPOWER;
		}

		//Item Set: Warbringer Armor
		sp = dbcSpell.LookupEntryForced( 37516 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 100;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_REVENGE;
		}

		//all Drums 
		sp = dbcSpell.LookupEntryForced( 35474 );// not this one ! Drums of Panic
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = 0;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_IN_AREA;
			sp->eff[0].EffectImplicitTargetB = 0;
		}
		sp = dbcSpell.LookupEntryForced( 35475 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = 0;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}
		sp = dbcSpell.LookupEntryForced( 35476 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = 0;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}
		sp = dbcSpell.LookupEntryForced( 35477 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = 0;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}
		sp = dbcSpell.LookupEntryForced( 35478 );
		//if( sp != NULL )
		{
			sp->RequiredShapeShift = 0;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_PARTY;
			sp->eff[2].EffectImplicitTargetA = 0;
			sp->eff[0].EffectImplicitTargetB = 0;
			sp->eff[1].EffectImplicitTargetB = 0;
			sp->eff[2].EffectImplicitTargetB = 0;
		}

		//this an on equip item spell(2824) :  ice arrow(29501)
		sp = dbcSpell.LookupEntryForced( 29501 );
		//if( sp != NULL )
		{
			sp->procChance = 30;//some say it is triggered every now and then
			sp->procFlags = PROC_ON_RANGED_ATTACK;
		}

		//Purify helboar meat
/*		sp = dbcSpell.LookupEntryForced( 29200 );
		//if( sp != NULL )
		{
			sp->Reagent[1] = 0;
			sp->ReagentCount[1] = 0;
			sp->eff[0].Effect = 24;
		}*/

		//Big Blizzard Bear
		sp = dbcSpell.LookupEntryForced( 58983 );
		sp2 = dbcSpell.LookupEntryForced( 41514 );
		//if( sp != NULL )
			SpellEntryEffectCopy(sp2,sp,2,2);//normal speed
		//Raven Lord
		sp2 = dbcSpell.LookupEntryForced( 41252 );
		//if( sp != NULL )
			SpellEntryEffectCopy(sp2,sp,2,2);//normal speed

		//Magic Broom
		sp = dbcSpell.LookupEntryForced( 47977 );
		sp2 = dbcSpell.LookupEntryForced( 41514 );
		//if( sp != NULL )
		{
			SpellEntryEffectCopy(sp2,sp,2,2);//normal speed
			sp->CastingTimeIndex = sp2->CastingTimeIndex;
		}
		//Swift Flying Broom
		sp = dbcSpell.LookupEntryForced( 42668 );
		//if( sp != NULL )
			sp->CastingTimeIndex = sp2->CastingTimeIndex;
		//Black Qiraji Battle Tank
		sp = dbcSpell.LookupEntryForced( 26656 );
		//if( sp != NULL )
			sp->CastingTimeIndex = sp2->CastingTimeIndex;
		//Dragonwrath, Tarecgosa's Rest
//		sp = dbcSpell.LookupEntryForced( 101641 );
		//if( sp != NULL )
//			sp->CastingTimeIndex = sp2->CastingTimeIndex;

		//Recently Bandaged
		sp = dbcSpell.LookupEntryForced( 11196 );
		//if( sp != NULL )
		{
			sp->MechanicsType = MECHANIC_HEALING;
			sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			sp->ThreatForSpellCoef = 0;
		}
			
		// - Warrior - Warbringer Armor
		// 2 pieces: You have a chance each time you parry to gain Blade Turning, absorbing 200 damage for 15 sec.
		// SPELL ID = 37514 (http://www.wowhead.com/?spell=37514)

		sp = dbcSpell.LookupEntryForced( 37514 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 37515;
			sp->procChance = 25;
		}
		
		//Thorium Grenade
		sp = dbcSpell.LookupEntryForced(19769);
		//if(sp != NULL)
		{
			sp->InterruptFlags |= ~(CAST_INTERRUPT_ON_MOVEMENT);
		}

		//M73 Frag Grenade
		sp = dbcSpell.LookupEntryForced(13808);
		//if(sp != NULL)
		{
			sp->InterruptFlags |= ~(CAST_INTERRUPT_ON_MOVEMENT);
		}

		//Iron Grenade
		sp = dbcSpell.LookupEntryForced(4068);
		//if(sp != NULL)
		{
			sp->InterruptFlags |= ~(CAST_INTERRUPT_ON_MOVEMENT);
		}

		//Frost Grenade
		sp = dbcSpell.LookupEntryForced(39965);
		//if(sp != NULL)
		{
			sp->InterruptFlags |= ~(CAST_INTERRUPT_ON_MOVEMENT);
		}

		//Adamantine Grenade
		sp = dbcSpell.LookupEntryForced(30217);
		//if(sp != NULL)
		{
			sp->InterruptFlags |= ~(CAST_INTERRUPT_ON_MOVEMENT);
		}
		
		//trinket death's verdict or death's choice ....rest of the TOC trinkets 
		sp = dbcSpell.LookupEntryForced( 67698 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_HEAL;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 67752 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_HEAL;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 67702 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 67703;	//might get overwritten based on stat
			sp->procChance = 30;
			sp->proc_interval = 6000;
		}
		sp = dbcSpell.LookupEntryForced( 67771 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 67772;	//might get overwritten based on stat
			sp->procChance = 30;
			sp->proc_interval = 6000;
		}
		//You gain a Mote of Flame each time you cause a damaging spell critical strike.  When you reach $s1 Motes, they will release, firing a Pillar of Flame for $67714s1 damage.  Mote of Flame cannot be gained more often than once every 2 sec.
		sp = dbcSpell.LookupEntryForced( 67712 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 67713;	
			sp->proc_interval = 2000;
		}
		sp = dbcSpell.LookupEntryForced( 67758 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->eff[0].EffectTriggerSpell = 67759;	
			sp->proc_interval = 2000;
		}
		//Blood of the Old God
		sp = dbcSpell.LookupEntryForced( 64792 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		//Comet's Trail
		sp = dbcSpell.LookupEntryForced( 64786 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		//Mjolnir Runestone
		sp = dbcSpell.LookupEntryForced( 65020 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		//Rising Fury
		sp = dbcSpell.LookupEntryForced( 67747 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		//Dark Matter
		sp = dbcSpell.LookupEntryForced( 65025 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		//Flame of the Heavens
		sp = dbcSpell.LookupEntryForced( 64714 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		//Show of Faith
		sp = dbcSpell.LookupEntryForced( 64738 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		//Volatile Power
		sp = dbcSpell.LookupEntryForced( 67744 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		sp2 = dbcSpell.LookupEntryForced( 67743 );	//proc
		//if( sp2 != NULL )
			sp2->DurationIndex = sp->DurationIndex;

		//Jom Gabbar
		sp = dbcSpell.LookupEntryForced( 29602 );
		sp2 = dbcSpell.LookupEntryForced( 29604 );	//proc
		//if( sp2 != NULL )
			sp2->DurationIndex = sp->DurationIndex;

		//Rising Fury
		sp = dbcSpell.LookupEntryForced( 67738 );
		sp2 = dbcSpell.LookupEntryForced( 67737 );	//proc
		//if( sp2 != NULL )
			sp2->DurationIndex = sp->DurationIndex;

		//Volatile Power
		sp = dbcSpell.LookupEntryForced( 67736 );
		sp2 = dbcSpell.LookupEntryForced( 67735 );	//proc
		//if( sp2 != NULL )
			sp2->DurationIndex = sp->DurationIndex;


		//Hardening Armor
		sp = dbcSpell.LookupEntryForced( 67728 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		sp2 = dbcSpell.LookupEntryForced( 67727 );	//proc
		//if( sp2 != NULL )
			sp2->DurationIndex = sp->DurationIndex;
		//Hardening Armor
		sp = dbcSpell.LookupEntryForced( 67742 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		sp2 = dbcSpell.LookupEntryForced( 67741 );	//proc
		//if( sp2 != NULL )
			sp2->DurationIndex = sp->DurationIndex;
		//Meteoric Inspiration
		sp = dbcSpell.LookupEntryForced( 64999 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
		}
		sp2 = dbcSpell.LookupEntryForced( 65000 );	//proc
		//if( sp2 != NULL )
			sp2->DurationIndex = sp->DurationIndex;
		//Deadly Gladiator's Totem of Survival
		sp = dbcSpell.LookupEntryForced( 60572 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_EARTH_SHOCK;
			sp->ProcOnNameHash[1] = SPELL_HASH_FLAME_SHOCK;
			sp->ProcOnNameHash[2] = SPELL_HASH_FROST_SHOCK;
		}
		//Hateful Gladiator's Totem of Survival
		sp = dbcSpell.LookupEntryForced( 60571 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_EARTH_SHOCK;
			sp->ProcOnNameHash[1] = SPELL_HASH_FLAME_SHOCK;
			sp->ProcOnNameHash[2] = SPELL_HASH_FROST_SHOCK;
		}
		//LK Arena 4 Gladiator's Totem of Survival
		sp = dbcSpell.LookupEntryForced( 60573 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_EARTH_SHOCK;
			sp->ProcOnNameHash[1] = SPELL_HASH_FLAME_SHOCK;
			sp->ProcOnNameHash[2] = SPELL_HASH_FROST_SHOCK;
		}
		//LK Arena 5 Gladiator's Totem of Survival
		sp = dbcSpell.LookupEntryForced( 60574 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_EARTH_SHOCK;
			sp->ProcOnNameHash[1] = SPELL_HASH_FLAME_SHOCK;
			sp->ProcOnNameHash[2] = SPELL_HASH_FROST_SHOCK;
		}
		//Deadly Totem of Indomitability
		sp = dbcSpell.LookupEntryForced( 60548 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_LAVA_LASH;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//Hateful Totem of Indomitability
		sp = dbcSpell.LookupEntryForced( 60546 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_LAVA_LASH;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//LK Arena 4 Totem of Indomitability
		sp = dbcSpell.LookupEntryForced( 60550 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_LAVA_LASH;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//LK Arena 5 Totem of Indomitability
		sp = dbcSpell.LookupEntryForced( 60552 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_LAVA_LASH;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//Item - Shaman T9 Enhancement Relic (Lava Lash)
		sp = dbcSpell.LookupEntryForced( 67392 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_LAVA_LASH;
		}
		//Item - Shaman T9 Elemental Relic (Lightning Bolt)
		sp = dbcSpell.LookupEntryForced( 67386 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		}
		//Totem of the Elemental Plane
		sp = dbcSpell.LookupEntryForced( 60770 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		}
		//Item - Shaman T9 Restoration Relic (Chain Heal)
		sp = dbcSpell.LookupEntryForced( 67389 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CHAIN_HEAL;
		}
		//Nax 25 Melee Shaman Totem
		sp = dbcSpell.LookupEntryForced( 60765 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_STORMSTRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//Deadly Gladiator's Libram of Fortitude
		sp = dbcSpell.LookupEntryForced( 60633 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//Hateful Gladiator's Libram of Fortitude
		sp = dbcSpell.LookupEntryForced( 60632 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//LK Arena 4 Gladiator's Libram of Fortitude
		sp = dbcSpell.LookupEntryForced( 60634 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//LK Arena 5 Gladiator's Libram of Fortitude
		sp = dbcSpell.LookupEntryForced( 60635 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//Item - Paladin T8 Protection Relic
		sp = dbcSpell.LookupEntryForced( 64955 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_SHIELD;
		}
		//Item - Paladin T9 Holy Relic (Judgement)
		sp = dbcSpell.LookupEntryForced( 67363 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_LIGHT;
		}
		//Item - Paladin T9 Protection Relic (Hammer of The Righteous)
		sp = dbcSpell.LookupEntryForced( 67379 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_HAMMER_OF_THE_RIGHTEOUS;
		}
/*		//Item - Paladin T9 Retribution Relic (Seal of Vengeance)
		sp = dbcSpell.LookupEntryForced( 67365 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
//			sp->procFlags2 = PROC2_TARGET_SELF;
//			sp->ProcOnNameHash[0] = SPELL_HASH_SEAL_OF_VENGEANCE;
//			sp->ProcOnNameHash[1] = SPELL_HASH_SEAL_OF_CORRUPTION;
			sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_VENGEANCE;
			sp->ProcOnNameHash[1] = SPELL_HASH_BLOOD_CORRUPTION;
			sp->proc_interval = 20000;
		}
		//Libram of Obstruction
		sp = dbcSpell.LookupEntryForced( 60794 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT_OF_JUSTICE;
			sp->ProcOnNameHash[1] = SPELL_HASH_JUDGEMENT_OF_LIGHT;
			sp->ProcOnNameHash[2] = SPELL_HASH_JUDGEMENT_OF_WISDOM;
		}
		//Libram of Reciprocation
		sp = dbcSpell.LookupEntryForced( 60818 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_JUDGEMENT_OF_JUSTICE;
			sp->ProcOnNameHash[1] = SPELL_HASH_JUDGEMENT_OF_LIGHT;
			sp->ProcOnNameHash[2] = SPELL_HASH_JUDGEMENT_OF_WISDOM;
			//must be casted on seal of command. Now how to check that ?
		}
		*/
		//Deadly Gladiator's Death Knight Relic
		sp = dbcSpell.LookupEntryForced( 60686 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//LK Arena 6 Gladiator's Death Knight Relic
		sp = dbcSpell.LookupEntryForced( 60686 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 60555;
		}
		//LK Arena 6 Gladiator's Libram of Fortitude
		sp = dbcSpell.LookupEntryForced( 60636 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 60555;
		}
		//Hateful Gladiator's Death Knight Relic
		sp = dbcSpell.LookupEntryForced( 60685 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//LK Arena 4 Gladiator's Death Knight Relic
		sp = dbcSpell.LookupEntryForced( 60687 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//LK Arena 5 Gladiator's Death Knight Relic
		sp = dbcSpell.LookupEntryForced( 60688 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		}
		//Icy Touch Defense Increase
		sp = dbcSpell.LookupEntryForced( 62147 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_ICY_TOUCH;
		}
		//Item - Death Knight T8 Tank Relic
		sp = dbcSpell.LookupEntryForced( 64964 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_RUNE_STRIKE;
		}
		//Item - Death Knight T9 Tank Relic (Rune Strike)
		sp = dbcSpell.LookupEntryForced( 67381 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_RUNE_STRIKE;
		}
		//Item - Death Knight T9 Melee Relic (Rune Strike)
		sp = dbcSpell.LookupEntryForced( 67384 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_DEATH_STRIKE;
			sp->ProcOnNameHash[1] = SPELL_HASH_OBLITERATE;
			sp->ProcOnNameHash[2] = SPELL_HASH_SCOURGE_STRIKE;
			sp->procChance = 30;
			sp->proc_interval = 6000;
		}
		//Sigil of Haunted Dreams
		sp = dbcSpell.LookupEntryForced( 60826 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procFlags2 = PROC2_TARGET_SELF;
			sp->ProcOnNameHash[0] = SPELL_HASH_HEART_STRIKE;
			sp->ProcOnNameHash[1] = SPELL_HASH_BLOOD_STRIKE;
		}

		sp = dbcSpell.LookupEntryForced( 40475 );		// Black temple melee trinket
		//if( sp != NULL )
		{
			sp->procChance = 50;
			sp->proc_interval = uint32(60000 / 1.0f);
		}

		// Band of the Eternal Champion: reduced proc rate
		sp = dbcSpell.LookupEntryForced( 35080 );
		//if( sp != NULL )
			sp->procChance = 5;

		// Band of the Eternal Sage: reduced proc rate
		sp = dbcSpell.LookupEntryForced( 35083 );
		//if( sp != NULL )
			sp->procChance = 5;

		// Band of the Eternal Defender: reduced proc rate
		sp = dbcSpell.LookupEntryForced( 35077 );
		//if( sp != NULL )
			sp->procChance = 5;

		// Band of the Eternal Restorer: reduced proc rate
		sp = dbcSpell.LookupEntryForced( 35086 );
		//if( sp != NULL )
			sp->procChance = 5;

		// Deadly Throw Interrupt
		sp = dbcSpell.LookupEntryForced( 32748 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DEADLY_THROW;
		}

		//Figurine - Shadowsong Panther
		sp = dbcSpell.LookupEntryForced( 46784 );		//	http://www.wowhead.com/?item=35702
		//if( sp != NULL )
			sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;

		// Infernal Protection
		sp = dbcSpell.LookupEntryForced(36488);			//	http://www.wowhead.com/?spell=36488
		//if( sp != NULL )
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;
		//Sundial of the Exiled
		sp = dbcSpell.LookupEntryForced(60063);
		if(sp != NULL)
		{
			sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
			sp->procChance = 10;
			sp->proc_interval = 45000;
		}

		//Je'Tze's Bell
		sp = dbcSpell.LookupEntryForced(49622);
		if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 10;
			sp->proc_interval = 45000;
		}

		//Tears of Bitter Anguish
		sp = dbcSpell.LookupEntryForced(58901);
		if(sp != NULL)
		{
			sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_CRIT_ATTACK;
			sp->procChance = 10;
			sp->proc_interval = 60000;
		}

		//Embrace of the Spider
		sp = dbcSpell.LookupEntryForced(60490);
		if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 10;
			sp->proc_interval = 30000;
		}

		//Dying Curse
		sp = dbcSpell.LookupEntryForced(60493);
		if(sp != NULL)
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 15;
			sp->proc_interval = 45000;
		}

		//Fury of the Five Flights
		sp = dbcSpell.LookupEntryForced(60313);
		if(sp != NULL)
		{
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
			sp->procChance = 100;
			sp->maxstack = 20;
		}

		//Vial of the Sunwell
		sp = dbcSpell.LookupEntryForced( 45059 );
		//if( sp != NULL )
		{	
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;		
		}	
		sp = dbcSpell.LookupEntryForced( 45062 ); 
		//if( sp != NULL )
		{	
			sp->self_cast_only = true;	
			sp->procChance = 100;	
		}

		//Pendant of the Violet Eye
		sp = dbcSpell.LookupEntryForced( 29601 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL ;
			sp->procFlags2 |= PROC2_TARGET_SELF;
			sp->procChance = 100;
		}
		sp = dbcSpell.LookupEntryForced( 35095 );
		//if( sp != NULL )
		{
			sp->self_cast_only = true;
			sp->procChance = 100;
		}
				
		sp = dbcSpell.LookupEntryForced( 38332 );		// Ribbon of Sacrifice
		//if( sp != NULL )
			sp->procFlags = PROC_ON_CAST_SPELL;

		sp = dbcSpell.LookupEntryForced( 32642 );		// Sporegarr - Petrified Lichen Guard
		//if( sp != NULL )
		{	
			sp->procFlags = PROC_ON_BLOCK_VICTIM;
			sp->procChance = 100;
		}

        //Flow of Knowledge
		sp = dbcSpell.LookupEntryForced ( 62114 );
        if(sp != NULL )
		{
			//sp->eff[1].EffectTriggerSpell = 60064;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 10;
			sp->proc_interval = 45000;
		}
		//Forge Ember
		sp = dbcSpell.LookupEntryForced ( 60473 );
        if(sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 10;
			sp->proc_interval = 45000;
		}
		//Sundial of the Exiled
		sp = dbcSpell.LookupEntryForced ( 60063 );
        if(sp != NULL )
		{
			//sp->eff[1].EffectTriggerSpell = 60064;
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->procChance = 10;
			sp->proc_interval = 45000;
		}

//		sp = dbcSpell.LookupEntryForced( 44856 );		// Bash'ir Phasing Device
		//if( sp != NULL )
//			sp->GetRequiresAreaId() = 3864;

		sp = dbcSpell.LookupEntryForced( 27997 );		//Spellsurge
		//if( sp != NULL )
		{
			sp->proc_interval = 30000; // Wowhead Comment
			sp->procChance = 3; //Enchantment Text
		}

		//Enchant Weapon - Deathfrost
		sp = dbcSpell.LookupEntryForced( 46662 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_MELEE_ATTACK;

		//Enchant Weapon - Heartsong
		sp = dbcSpell.LookupEntryForced( 95653 );
		//if( sp != NULL )
			sp->procFlags = PROC_ON_HEAL_SPELL;

		//Grounded Plasma Shield - Enchant
		sp = dbcSpell.LookupEntryForced( 82626 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 82627;
		}

		// Sigil of the Unfaltering Knight
		sp = dbcSpell.LookupEntryForced( 62147 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_ICY_TOUCH;
			sp->procChance = 100;
			sp->proc_interval = 45000;
		}

		// Deadly Gladiator's Death Knight Relic
/*		sp = dbcSpell.LookupEntryForced( 60686 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 60549;
		}
		// Deadly Gladiator's Idol of Resolve
		sp = dbcSpell.LookupEntryForced( 60696 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 60549;
		}
		// Deadly Gladiator's Libram of Fortitude
		sp = dbcSpell.LookupEntryForced( 60633 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 60549;
		}
		// Deadly Totem of Indomitability
		sp = dbcSpell.LookupEntryForced( 60548 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
			sp->procChance = 100;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 60549;
		}
		sp = dbcSpell.LookupEntryForced( 60549 );
		//if( sp != NULL )
		{
			// it have 2 same effects dunno why
			sp->eff[1].EffectApplyAuraName = 0;
			sp->eff[1].EffectBasePoints = 0;
		}*/

		// Sigil of Haunted Dreams
		sp = dbcSpell.LookupEntryForced( 60826 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
			sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_STRIKE;
			sp->ProcOnNameHash[1] = SPELL_HASH_HEART_STRIKE;
			sp->procChance = 15;
			sp->proc_interval = 45000;
		}

		// Vestige of Haldor
		sp = dbcSpell.LookupEntryForced( 60306 );
		//if( sp != NULL )
		{
			sp->proc_interval = 45000;
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		}

		// Majestic Dragon Figurine
		sp = dbcSpell.LookupEntryForced( 60524 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		// Anvil of Titans
		sp = dbcSpell.LookupEntryForced( 62115 );
		//if( sp != NULL )
		{
			sp->proc_interval = 45000;
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		}

		// Soul of the Dead
		sp = dbcSpell.LookupEntryForced( 60537 );
		//if( sp != NULL )
		{
			sp->proc_interval = 45000;
			sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
			sp->procFlags2 |= PROC2_TARGET_SELF;
		}
		sp = dbcSpell.LookupEntryForced( 60538 );
		//if( sp != NULL )
			sp->spell_id_client = sp->Id;

		// Illustration of the Dragon Soul
		sp = dbcSpell.LookupEntryForced( 60485 );
		//if( sp != NULL )
		{
			sp->procFlags = PROC_ON_CAST_SPELL;
		}

		// Grim Toll
		sp = dbcSpell.LookupEntryForced( 60436 );
		//if( sp != NULL )
		{
			sp->proc_interval = 45000;
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		}

		// Meteorite Whetstone
		sp = dbcSpell.LookupEntryForced( 60301 );
		//if( sp != NULL )
		{
			sp->proc_interval = 45000;
			sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		}

		// Sonic Booster
		sp = dbcSpell.LookupEntryForced( 54707 );
		//if( sp != NULL )
		{
			sp->proc_interval = 60000;
			sp->procFlags = PROC_ON_MELEE_ATTACK;
		}

		//Totem of the Third Wind - bad range
		SpellEntry * sp_healing_wave = dbcSpell.LookupEntryForced( 8004 );
		sp = dbcSpell.LookupEntryForced( 34132 );
		//if( sp != NULL )
		{
			sp->rangeIndex = sp_healing_wave->rangeIndex;
		}
		sp = dbcSpell.LookupEntryForced( 42371 );
		//if( sp != NULL )
		{
			sp->rangeIndex = sp_healing_wave->rangeIndex;
		}
		sp = dbcSpell.LookupEntryForced( 43729 );
		//if( sp != NULL )
		{
			sp->rangeIndex = sp_healing_wave->rangeIndex;
		}
		sp = dbcSpell.LookupEntryForced( 46099 );
		//if( sp != NULL )
		{
			sp->rangeIndex = sp_healing_wave->rangeIndex;
		}
	//////////////////////////////////////////////////////
	// GAME-OBJECT SPELL FIXES                          //
	//////////////////////////////////////////////////////

	// Blessing of Zim'Torga
	sp = dbcSpell.LookupEntryForced( 51729 );
	if( sp )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SCRIPTED_OR_SINGLE_TARGET;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDBUFF;
	}

	// Blessing of Zim'Abwa
	sp = dbcSpell.LookupEntryForced( 51265 );
	if( sp )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SCRIPTED_OR_SINGLE_TARGET;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDBUFF;
	}

	// Blessing of Zim'Rhuk
	sp = dbcSpell.LookupEntryForced( 52051 );
	if( sp )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SCRIPTED_OR_SINGLE_TARGET;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDBUFF;
	}

		//////////////////////////////////////////
		// BOSSES								//
		//////////////////////////////////////////

		// Insert boss spell fixes here
		// Headless Horseman - Throw Bucket
		sp = dbcSpell.LookupEntryForced( 42340 );
		//if( sp != NULL )
		{
			sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
			sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		}
		// Headless Horseman - Burning (Cosmetic)
		sp = dbcSpell.LookupEntryForced( 42971 );
		//if( sp != NULL )
		{
			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
			sp->SpellIconID = 0;
		}
		sp = dbcSpell.LookupEntryForced( 42075 );
		//if( sp != NULL )
		{
			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
			sp->SpellIconID = 0;
		}
		sp = dbcSpell.LookupEntryForced( 42074 );
		//if( sp != NULL )
		{
			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
			sp->SpellIconID = 0;
		}

		// Lifebinder's Gift
		sp = dbcSpell.LookupEntryForced( 62584 );
		//if( sp != NULL )
		{
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
			sp->eff[2].EffectImplicitTargetB = EFF_TARGET_NONE;
		}
		// Consuming Shroud
		sp = dbcSpell.LookupEntryForced( 110214 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 110215;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_HEAL_SPELL;
			sp->rangeIndex = 5; // 50 yards, whatever just not 0
		}
		sp = dbcSpell.LookupEntryForced( 110215 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID;
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[0].EffectRadiusIndex = 12; //100 yards
			sp->rangeIndex = 5; // 50 yards, whatever just not 0
		}
		// Essence of Dreams
		sp = dbcSpell.LookupEntryForced( 105900 );
		//if( sp != NULL )
		{
			SpellEntryEffectCopy(sp,sp,0,1);
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[0].EffectTriggerSpell = 105996;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_HEAL_SPELL;
		}
		sp = dbcSpell.LookupEntryForced( 105996 );
		//if( sp != NULL )
		{
//			sp->spell_can_crit = false;
			SetNoEffeCanCrit( sp );
			sp->Spell_value_is_scripted = true;
			SetSpellPowerCoeffsAll(sp,0.0f);
		}
		// Timeloop
		sp = dbcSpell.LookupEntryForced( 105984 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_RAID; 
			sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
			sp->eff[1].EffectTriggerSpell = 105992; 
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_RAID; 
			sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
			sp->procChance = 100;
			sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
			sp->procFlags2 |= PROC2_REMOVEONUSE;
		}

		// stealth for moroes ( does not go away while he fights ? )
		sp = dbcSpell.LookupEntryForced( 41476);
		//if( sp != NULL )
			sp->AuraInterruptFlags &= ~(AURA_INTERRUPT_ON_HOSTILE_SPELL_INFLICTED | AURA_INTERRUPT_ON_CAST_SPELL | AURA_INTERRUPT_ON_ENTER_COMBAT | AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_DIRECT_DAMAGE );
		//Emerald Vigor
		sp = dbcSpell.LookupEntryForced( 70873 );
		//if( sp != NULL )
		{
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
			sp->eff[1].EffectImplicitTargetA = EFF_TARGET_DUEL;
			sp->eff[2].EffectImplicitTargetA = EFF_TARGET_DUEL;
		}

		//Blastenheimer 5000 Ultra Cannon
		sp = dbcSpell.LookupEntryForced( 24832 );
		//if( sp != NULL )
			sp->eff[2].EffectTriggerSpell = 24742;
			// Restore Soul
			sp = dbcSpell.LookupEntryForced( 72595 );
			//if( sp != NULL )
			{
				sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			}
			// Will of Sartharion
			sp = dbcSpell.LookupEntryForced( 61254 );
			//if( sp != NULL )
			{
				sp->DurationIndex = 3; // 1 minute
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_FRIENDLY_IN_AREA;
				sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			}
			// Power of Vesperon
			sp = dbcSpell.LookupEntryForced( 61251 );
			//if( sp != NULL )
			{
				sp->DurationIndex = 3; // 1 minute
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
				sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			}
			// Twilight Revenge
			sp = dbcSpell.LookupEntryForced( 60639 );
			//if( sp != NULL )
			{
				sp->DurationIndex = 3; // 1 minute
				sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			}
			// Power of Shadron
			sp = dbcSpell.LookupEntryForced( 58105 );
			//if( sp != NULL )
			{
				sp->DurationIndex = 3; // 1 minute
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
				sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			}
			// Power of Tenebron
			sp = dbcSpell.LookupEntryForced( 61248 );
			//if( sp != NULL )
			{
				sp->DurationIndex = 3; // 1 minute
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
				sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
			}
			// Berserk
			sp = dbcSpell.LookupEntryForced( 61632 );
			//if( sp != NULL )
			{
				sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
				sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
				sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
				sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
				sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
				sp->eff[2].EffectImplicitTargetB = EFF_TARGET_NONE;
			}
		
			// Dark Glare
			sp = dbcSpell.LookupEntryForced( 26029 );
			//if( sp != NULL )
				sp->cone_width = 15.0f; // 15 degree cone

			// Drain Power (Malacrass) // bugged - the charges fade even when refreshed with new ones. This makes them everlasting.
			sp = dbcSpell.LookupEntryForced( 44131 );
 			//if( sp != NULL )
				sp->DurationIndex = 21; //infinit
			sp = dbcSpell.LookupEntryForced( 44132 );
			//if( sp != NULL )
				sp->DurationIndex = 21; //infinit


	/****************************************/
	// dk	YAY DK spell hacks xD 
	/****************************************/
	// death knight
	//death knight

#ifdef SPECIFIC_14333_CLIENT_FIXES
	//Icy Touch
	sp = dbcSpell.LookupEntryForced( 45477 );
	//if( sp != NULL )
		sp->AttackPowerToSpellDamageCoeff = 0.0f;
#endif
	//Resilient Infection
	sp = dbcSpell.LookupEntryForced( 81338 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 90721;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 81339 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 90721;
		sp->procChance = sp->eff[0].EffectBasePoints;
		sp->procFlags = PROC_ON_PRE_DISPELL_AURA_CASTER;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}

	//Sweeping Claws
	sp = dbcSpell.LookupEntryForced( 91778 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_CONDITIONAL_PASSIVE_CAST;
	//Monstrous Blow
	sp = dbcSpell.LookupEntryForced( 91797 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_CONDITIONAL_PASSIVE_CAST;
	//Shambling Rush
	sp = dbcSpell.LookupEntryForced( 91802 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_CONDITIONAL_PASSIVE_CAST;
	//Putrid Bulwark
	sp = dbcSpell.LookupEntryForced( 91837 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_CONDITIONAL_PASSIVE_CAST;

	//Abomination's Might
	sp = dbcSpell.LookupEntryForced( 53137 );
	//if( sp != NULL )
		SpellEntryEffectSwap(sp,sp,0,2);	//or else will conflict with trueshot aura add / remove
	sp = dbcSpell.LookupEntryForced( 53138 );
	//if( sp != NULL )
		SpellEntryEffectSwap(sp,sp,0,2);	//or else will conflict with trueshot aura add / remove
		
	//Blood Strike
	sp = dbcSpell.LookupEntryForced( 45902 );
	//if( sp != NULL )
		if( sp->eff[0].Effect == SPELL_EFFECT_DUMMYMELEE ) //to avoid using 
			sp->eff[0].Effect = SPELL_EFFECT_WEAPON_DAMAGE;

	//Dark Transformation
	sp = dbcSpell.LookupEntryForced( 63560 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,1,2);
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DUMMY;	//replace cast bar
	}
	//Glyph of Raise Dead
	sp = dbcSpell.LookupEntryForced( 58686 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 58686; //self proc
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_RAISE_DEAD;
	}

	//Lichborne
	sp = dbcSpell.LookupEntryForced( 49039 );
	sp2 = dbcSpell.LookupEntryForced( 50397 );
	//if( sp != NULL )
		sp->chained_cast = sp2; //shapeshift spell
		sp2->maxstack = 1;

	//Runic Focus
	sp = dbcSpell.LookupEntryForced( 61455 );
	//if( sp != NULL )
		sp->eff[0].Effect = SPELL_EFFECT_NULL; //aura 108 is simply bad in so many ways
				
	//Glyph of Path of Frost - this should be somehow removed with patch of frost. Right now it stays for 10 minutes
	sp = dbcSpell.LookupEntryForced( 59307 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 93061;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_PATH_OF_FROST;
	}
	sp = dbcSpell.LookupEntryForced( 93061 );
	//if( sp != NULL )
	{
		sp->maxstack = 1;
		sp->DurationIndex = dbcSpell.LookupEntryForced( 3714 )->DurationIndex;
	}
	//Glyph of Strangulate
	sp = dbcSpell.LookupEntryForced( 58618 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_STRANGULATE;
	}
	//Death Pact
	sp = dbcSpell.LookupEntryForced( 48743 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	//Dancing Rune Weapon
	sp = dbcSpell.LookupEntryForced( 49028 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Dark Command
	sp = dbcSpell.LookupEntryForced( 56222 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Chains of Ice
	sp = dbcSpell.LookupEntryForced( 45524 );
	//if( sp != NULL )
		sp->FacingCasterFlags = 0;
	// Death Grip
	sp = dbcSpell.LookupEntryForced( 49576 );
	//if( sp != NULL )
		sp->FacingCasterFlags |= (CASTER_FACE_FACING|CASTER_FACE_TARGET);

	//Crimson Scourge
	sp = dbcSpell.LookupEntryForced( 81135 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	}
	sp = dbcSpell.LookupEntryForced( 81136 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	}
	sp = dbcSpell.LookupEntryForced( 81141 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}

	//Might of the Frozen Wastes
	sp = dbcSpell.LookupEntryForced( 81330 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 81332 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 81333 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}

	//Death's Advance
	sp = dbcSpell.LookupEntryForced( 96269 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 96268;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_RUNE_DEPLETE_EVENT | PROC_ON_NOT_VICTIM;
	}
	sp = dbcSpell.LookupEntryForced( 96270 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 96268;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_RUNE_DEPLETE_EVENT | PROC_ON_NOT_VICTIM;
	}
	sp = dbcSpell.LookupEntryForced( 96268 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	//Improved Blood Presence
	sp = dbcSpell.LookupEntryForced( 50365 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63611;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE; 
		sp->proc_interval = 0;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PRESENCE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_PRESENCE;
		sp->ProcOnNameHash[2] = SPELL_HASH_UNHOLY_PRESENCE;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	sp = dbcSpell.LookupEntryForced( 50371 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63611;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE; 
		sp->proc_interval = 0;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PRESENCE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_PRESENCE;
		sp->ProcOnNameHash[2] = SPELL_HASH_UNHOLY_PRESENCE;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	sp = dbcSpell.LookupEntryForced( 63611 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}

	//Improved Frost Presence
	sp = dbcSpell.LookupEntryForced( 50384 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63621;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE; 
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PRESENCE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_PRESENCE;
		sp->ProcOnNameHash[2] = SPELL_HASH_UNHOLY_PRESENCE;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	sp = dbcSpell.LookupEntryForced( 50385 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63621;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE; 
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PRESENCE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_PRESENCE;
		sp->ProcOnNameHash[2] = SPELL_HASH_UNHOLY_PRESENCE;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}

	//Improved Unholy Presence
	sp = dbcSpell.LookupEntryForced( 50391 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63622;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE; 
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PRESENCE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_PRESENCE;
		sp->ProcOnNameHash[2] = SPELL_HASH_UNHOLY_PRESENCE;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}
	sp = dbcSpell.LookupEntryForced( 50392 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 63622;
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE; 
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PRESENCE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_PRESENCE;
		sp->ProcOnNameHash[2] = SPELL_HASH_UNHOLY_PRESENCE;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}

	//Contagion
	sp = dbcSpell.LookupEntryForced( 91316 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced( 91319 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}

	//Dark Simulacrum
	sp = dbcSpell.LookupEntryForced( 77606 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_HEAL_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 77616;		
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 77616 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = 77606;		//replace this spell ( the original ) with a random new one
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;		//suicide on self cast 
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
//	uint32 AllowedStealList[] = { 31801,20154,20164,20165,853,642,498,1022,1044,31884,2812,26573,33206,62618,17,64843,64901,32375,6346,8122,64044,15487,605,73325,47788,8129,1706,588,73413,32182,2825,51514,974,79206,5782,6789,30283,5484,50796,1122,30108,6358,19647,86121,48181,6229,89420,77801,47193,1949,71521,19028,33786,339,78675,48505,50516,78674,5487,24858,1066,40120,33943,783,768,22812,16689,88747,88751,18562,770,60089,16857,118,55342,92315,44457,2139,80353,82691,45438,1953,122,120,1463,11426,66,44572,12472,130,6117,30482,7302,8998,5211,1850,99,5229,5209,1082,22568,6807,9005,22842,5215,6795,1882,6785,33745,22570,1079,62600,77764,52610,5221,80964,80965,77761,5217,77758,62078,779,8271, 0};
	uint32 AllowedStealList[] = { 31801,20154,20164,20165,853,642,498,1022,1044,31884,2812,26573,33206,62618,17,64843,64901,32375,6346,8122,64044,15487,605,73325,47788,8129,1706,588,73413,32182,2825,51514,974,79206,5782,6789,30283,5484,50796,1122,30108,6358,19647,86121,48181,6229,89420,77801,47193,1949,71521,19028,33786,339,78675,48505,50516,78674,5487,24858,1066,40120,33943,783,768,22812,16689,88747,88751,18562,770,60089,16857,118,55342,92315,44457,2139,80353,82691,45438,1953,122,120,1463,11426,66,44572,12472,130,6117,30482,7302,8998,5211,1850,99,5229,5209,1082,22568,6807,9005,22842,5215,6795,1882,6785,33745,22570,1079,62600,77764,52610,5221,80964,80965,77761,5217,77758,62078,779,8271,0,33786,339,78675,48505,50516,78674,18562,770,55342,31661,11366,44457,2139,80353,82676,45438,1953,1463,11426,76027,44572,12472,130,7302,34913,6117,20164,31801,853,642,498,1022,1044,31884,2812,26573,33206,62618,64843,64901,32375,6346,8122,64044,15487,605,73325,47788,8129,1706,588,73413,32182,51514,974,79206,5782,6789,30283,5484,50796,22703,30108,6358,19647,86121,48181,6229,689,77801,47193,1949,71521,28176,19028,59672,48018, 0};
	for( uint32 i=0;i<5000 && AllowedStealList[i]!=0; i++)
		dbcSpell.LookupEntryForced( 63560 )->c_is_flags3 |= SPELL_FLAG3_IS_SAFE_SIMULACRUM_STEAL;


	//Glyph of Pillar of Frost
	sp = dbcSpell.LookupEntryForced( 58635 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 90259;		
		sp->ProcOnNameHash[0] = SPELL_HASH_PILLAR_OF_FROST;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 90259 );
	//if( sp != NULL )
	{
		sp->maxstack = 1; //to stack with real pillar of frost
		sp->AuraInterruptFlags &= ~AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		sp->eff[0].EffectMiscValue = MECHANIC_DISORIENTED | MECHANIC_FLEEING | MECHANIC_STUNNED | MECHANIC_POLYMORPHED | MECHANIC_HORRIFIED | MECHANIC_SAPPED;
	}
	//Pillar of Frost
	sp = dbcSpell.LookupEntryForced( 51271 );
	//if( sp != NULL )
	{
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
	}

	//Rune of Cinderglacier
	sp = dbcSpell.LookupEntryForced( 53386 );
	//if( sp != NULL )
	{
		sp->proc_interval = 12000; 
		sp->procChance = 20;
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE; //script both add and remove
	}
	//Necrotic Strike - this is a hack to make the effect stack
	sp = dbcSpell.LookupEntryForced( 73975 );
	//if( sp != NULL )
	{
//		sp->maxstack = 100;
		DynamicCreateAssignSpellStackGroup( sp, 0, "Necrotic strike" ); //does not stack from different casters
	}

	//Brittle Bones
	sp = dbcSpell.LookupEntryForced( 81327 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81326;		
		sp->ProcOnNameHash[0] = SPELL_HASH_FROST_FEVER;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 81328 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81326;		
		sp->ProcOnNameHash[0] = SPELL_HASH_FROST_FEVER;
		sp->procChance = 100;
	}
	dbcSpell.LookupEntryForced( 81326 )->DurationIndex = dbcSpell.LookupEntryForced( 55095 )->DurationIndex; //same dur as frost fever

	//Runic Empowerment
	sp = dbcSpell.LookupEntryForced( 81229 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 81229;		
		sp->ProcOnNameHash[0] = SPELL_HASH_RUNE_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_STRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_DEATH_COIL;
		sp->procChance = 45;
	}

	//Blood Rites
	sp = dbcSpell.LookupEntryForced( 50034 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 50031;		//!!! bulshit spell. Need real one
		sp->ProcOnNameHash[0] = SPELL_HASH_DEATH_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_OBLITERATE;
		sp->proc_interval = 500;
	}
/*	CreateDummySpell( 50033 );
	sp = dbcSpell.LookupEntryForced( 50033 );
	//if( sp != NULL )
	{
		sp->DurationIndex = 3; // 1 minute ? Wowhead says this can be from 10 sec to 3 minutes :(
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_CONVERT_RUNE;
		sp->eff[0].EffectMiscValue = RUNE_FROST;
		sp->eff[0].EffectMiscValueB = RUNE_DEATH;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_CONVERT_RUNE;
		sp->eff[1].EffectMiscValue = RUNE_FROST;
		sp->eff[1].EffectMiscValueB = RUNE_DEATH;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->NameHash = SPELL_HASH_BLOOD_RITES + 1;
		sp->DiminishStatus = -1;
	} */
	//watched movie on youtube. This spell converts the runes that will go on cooldown. 1 unholy and 1 frost. not 2
	CreateDummySpell( 50031 );
	sp = dbcSpell.LookupEntryForced( 50031 );
	//if( sp != NULL )
	{
//		sp->DurationIndex = 3; // 1 minute ? Wowhead says this can be from 10 sec to 3 minutes :(
		sp->DurationIndex = 9; // right now blood DKs are imba, nerfing this to 30 sec
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_CONVERT_RUNE;
		sp->eff[0].EffectMiscValue = RUNE_UNHOLY;
		sp->eff[0].EffectMiscValueB = RUNE_DEATH;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_CONVERT_RUNE;
//		sp->eff[1].EffectMiscValue = RUNE_UNHOLY;
		sp->eff[1].EffectMiscValue = RUNE_FROST;
		sp->eff[1].EffectMiscValueB = RUNE_DEATH;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->chained_cast = dbcSpell.LookupEntryForced( 50033 );
		sp->NameHash = SPELL_HASH_BLOOD_RITES + 2;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_CONVERTING_RECHARGING_RUNE;
		sp->DiminishStatus = -1;
		sp->maxstack = 2;
	}

	//Reaping
	sp = dbcSpell.LookupEntryForced( 56835 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 56838;		//!!! bulshit spell. Need real one
		sp->eff[1].EffectTriggerSpell = 56853;		//!!! bulshit spell. Need real one
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_STRIKE;		//1 blood rune
		sp->ProcOnNameHash[1] = SPELL_HASH_PESTILENCE;			//1 blood rune
		sp->ProcOnNameHash[2] = SPELL_HASH_FESTERING_STRIKE;	//1 blood and 1 frost rune
	}
	CreateDummySpell( 56838 );
	sp = dbcSpell.LookupEntryForced( 56838 );
	//if( sp != NULL )
	{
		sp->DurationIndex = 3; // 1 minute ? Wowhead says this can be from 10 sec to 3 minutes :(
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_CONVERT_RUNE;
		sp->eff[0].EffectMiscValue = RUNE_BLOOD;
		sp->eff[0].EffectMiscValueB = RUNE_DEATH;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->NameHash = SPELL_HASH_REAPING + 1;
		sp->maxstack = 4;
		sp->DiminishStatus = -1;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_CONVERTING_RECHARGING_RUNE;
	}
	CreateDummySpell( 56853 );
	sp = dbcSpell.LookupEntryForced( 56853 );
	//if( sp != NULL )
	{
		sp->DurationIndex = 3; // 1 minute ? Wowhead says this can be from 10 sec to 3 minutes :(
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_CONVERT_RUNE;
		sp->eff[0].EffectMiscValue = RUNE_FROST;
		sp->eff[0].EffectMiscValueB = RUNE_DEATH;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->NameHash = SPELL_HASH_REAPING + 2;
		sp->maxstack = 4;
		sp->DiminishStatus = -1;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_CONVERTING_RECHARGING_RUNE;
	}

	//Scarlet Fever
	sp = dbcSpell.LookupEntryForced( 81131 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PLAGUE;
	}
	sp = dbcSpell.LookupEntryForced( 81132 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_PLAGUE;
	}

	//Blood of the North
/*	sp = dbcSpell.LookupEntryForced( 54637 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 45624;		//!!! bulshit spell. Need real one
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_PESTILENCE;
	}
	//!!!!this is some random temp spell we hack use to mesure the time death rune will be active !!!
	sp = dbcSpell.LookupEntryForced( 45624 );
	//if( sp != NULL )
	{
		sp->DurationIndex = 3; // 1 minute ? Wowhead says this can be from 10 sec to 3 minutes :(
		sp->eff[0].EffectMiscValue = RUNE_BLOOD;
		sp->eff[0].EffectMiscValueB = RUNE_DEATH;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
	} */

	//Vengeance - DK
	sp = dbcSpell.LookupEntryForced( 93099 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 76691;	//not dead sure	
	}
	sp = dbcSpell.LookupEntryForced( 76691 );
	//if( sp != NULL )
	{
//		sp->procCharges = 100;	//according to wowhead this just stacks up N times and every stack has a 20 sec duration
		sp->maxstack = 0;
		sp->DurationIndex = 18;	//20 seconds
	}
	for( uint32 i=0;i<5;i++)
	{
		sp2 = CreateDummySpell( 76827 + i ); //create 5 version so we can stack them without them colliding
		memcpy( sp2, sp, sizeof( SpellEntry ) );
		sp2->Id = 76827 + i;
		sp2->NameHash = sp->NameHash + 1 + i;
	}
	//Vengeance - druid
	sp = dbcSpell.LookupEntryForced( 84840 );
	//if( sp != NULL )
	{
		sp->RequiredShapeShift = (1 << (FORM_BEAR-1));
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 76691;	//not dead sure	
		sp->RemoveOnShapeShift = true;
	}
	//Vengeance - Paladin
	sp = dbcSpell.LookupEntryForced( 84839 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 76691;	//not dead sure	
	}
	//Vengeance - Warrior
	sp = dbcSpell.LookupEntryForced( 93098 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 76691;	//not dead sure	
	}

	//Shadow Infusion
	sp = dbcSpell.LookupEntryForced( 48965 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->ProcOnNameHash[0] = SPELL_HASH_DEATH_COIL;
	}
	sp = dbcSpell.LookupEntryForced( 49571 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->ProcOnNameHash[0] = SPELL_HASH_DEATH_COIL;
	}	
	sp = dbcSpell.LookupEntryForced( 49572 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->ProcOnNameHash[0] = SPELL_HASH_DEATH_COIL;
	}
	sp = dbcSpell.LookupEntryForced( 91342 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_PET;
	}

	//Will of the Necropolis
	sp = dbcSpell.LookupEntryForced( 52284 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM ; 
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced( 81163 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM ; 
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced( 81164 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM ; 
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced( 96171 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL ; 
	}
	//Ebon Plaguebringer
	sp = dbcSpell.LookupEntryForced( 51099 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65142;	
	}
	sp = dbcSpell.LookupEntryForced( 51160 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65142;	
	}

#define DK_FROST_DISEASE_CUSTOM_MOD_FLAG (0x40000000)
#define DK_BLOOD_DISEASE_CUSTOM_MOD_FLAG (0x20000000)
	CreateDummySpell( 40515 );
	sp2 = dbcSpell.LookupEntryForced( 40515 );
	sp = dbcSpell.LookupEntryForced( 65142 );
	//if( sp != NULL )
	{
		memcpy( sp2, sp, sizeof( SpellEntry ) );
		sp2->Id = 40515;
		sp2->NameHash = sp->NameHash + 1;
		sp2->spell_id_client = sp2->Id;	//this spell does not exist anymore
		sp2->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;	
		sp2->eff[0].EffectMiscValue = SMT_ATTACK_POWER_AND_DMG_BONUS;
		sp2->eff[0].EffectSpellGroupRelation[2] = DK_FROST_DISEASE_CUSTOM_MOD_FLAG | DK_BLOOD_DISEASE_CUSTOM_MOD_FLAG;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp2->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	//if( sp != NULL )
	{
		int32 ori_dmg = sp->eff[1].EffectBasePoints;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_TAKEN;
		sp->eff[1].EffectBasePoints = ori_dmg;
		sp->eff[1].EffectMiscValue = 126;	//all magic schools
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->chained_cast = sp2;
	}
	//Empower Rune Weapon
	sp = dbcSpell.LookupEntryForced( 89831 ); 
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_ENERGIZE; 
		sp->eff[2].EffectBasePoints = 25;	//regen runic power
		sp->eff[2].EffectMiscValue = POWER_TYPE_RUNIC;	
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;	
	}
	//Horn of Winter
	sp = dbcSpell.LookupEntryForced( 57330 ); 
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_ENERGIZE; 
		sp->eff[2].EffectBasePoints = 100;	//regen 10 runic power
		sp->eff[2].EffectMiscValue = POWER_TYPE_RUNIC;	//regen 10 runic power
	}

	//Death Strike
	sp = dbcSpell.LookupEntryForced( 49998 ); 
	//if( sp != NULL )
	{
		sp->eff[2].Effect = SPELL_EFFECT_HEAL_MAXHEALTH_PCT; //from dummy to heal. Dummy because we are supposed to meter the dmg we received in the previous 5 seconds :(
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
	}

	//Improved Death Strike
	sp = dbcSpell.LookupEntryForced( 62908 ); 
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	//moving to class scritp cause it was making 2x effect 
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	sp = dbcSpell.LookupEntryForced( 62905 ); 
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	//moving to class scritp cause it was making 2x effect 
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}
	sp = dbcSpell.LookupEntryForced( 81138 ); 
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	//moving to class scritp cause it was making 2x effect 
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	}

	//Sanguine Fortitude
	sp = dbcSpell.LookupEntryForced( 81125 ); 
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
	sp = dbcSpell.LookupEntryForced( 81127 ); 
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;

	//DreadBlade - Increases all Shadow damage done by 0%. Each point of Mastery increases Shadow damage by an additional 2.5%.
	sp = dbcSpell.LookupEntryForced( 77515 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
		sp->ClassOverideApplyHandler = &HandleDreadBlade;
	}
	//Blood Shield - Each time you heal yourself via Death Strike, you gain 50% of the amount healed as a damage absorption shield.  Each point of Mastery increases the shield by an additional 6.25%.
	sp = dbcSpell.LookupEntryForced( 77513 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 50;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
		sp->talent_remove_auras[0] = 77535;
	}
	//Frozen Heart - Increases all frost damage done by 16%.  Each point of Mastery increases frost damage by an additional 2.0%.
	sp = dbcSpell.LookupEntryForced( 77514 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
//		sp->eff[0].EffectBasePoints = 16;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;	//we will recalculate all in 1 go 
	}

	//rune strike -> messed up spell. Instead of using normal required aurastate. It will require an aura :S
	CreateDummySpell( 56817 );
	sp = dbcSpell.LookupEntryForced( 56817 );
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlagsRemove = PROC_ON_CAST_SPELL; 
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->DurationIndex = 1;	//description says 10 seconds
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->DiminishStatus = -1;
	}
	sp = dbcSpell.LookupEntryForced( 56816 );	//this needs to be in playercreateinfo
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_DODGE; //if target dodges then we proc it on self
		sp->Attributes |= ATTRIBUTES_PASSIVE;
	}

	//Threat of Thassarian
	sp = dbcSpell.LookupEntryForced( 65661 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65661;	//self proc MUST HANDLE IT !
		sp->procChance = sp->eff[0].EffectBasePoints + 1;
	}
	sp = dbcSpell.LookupEntryForced( 66191 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65661;	//self proc MUST HANDLE IT !
		sp->procChance = sp->eff[0].EffectBasePoints + 1;
	}
	sp = dbcSpell.LookupEntryForced( 66192 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ; 
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 65661;	//self proc MUST HANDLE IT !
		sp->procChance = sp->eff[0].EffectBasePoints + 1;
	}

	//Bloodworms
	sp = dbcSpell.LookupEntryForced( 49027 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK ; 
	sp = dbcSpell.LookupEntryForced( 49542 );
	//if( sp != NULL )
		sp->procFlags = PROC_ON_MELEE_ATTACK ; 

	//Improved Icy Talons
	sp = dbcSpell.LookupEntryForced( 55610 );
	//if( sp != NULL )
		sp->RequiredShapeShift = 0;

	//Unholy Blight
	sp = dbcSpell.LookupEntryForced( 49194 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE ; //maybe description also refers to spell damage ?
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 50536;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEATH_COIL;
	}
	sp = dbcSpell.LookupEntryForced( 50536 );
	//if( sp != NULL )
	{
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
	}

	//Anti-Magic Zone
	sp = dbcSpell.LookupEntryForced( 51052 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 0;
		sp->eff[0].EffectMiscValueB = 208;	//make it summon guardians
//		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
//		sp->eff[1].EffectTriggerSpell = 50461;
//		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
	}
	sp = dbcSpell.LookupEntryForced( 50461 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = dbcSpell.LookupEntryForced( 51052 )->eff[0].EffectBasePoints;
		sp->eff[0].EffectMiscValue = 126;	//magic dmg
		sp->eff[0].EffectRadiusMaxIndex = sp->eff[0].EffectRadiusIndex = 18; //14 yards scause players said so
//		sp->DK_AP_spell_bonus[0]=2.0f;
	}
	//army of the dead
	sp = dbcSpell.LookupEntryForced( 42650 );
	//if( sp != NULL )
		sp->rangeIndex = 5; // whatever just not 0
	sp = dbcSpell.LookupEntryForced( 42651 );
	//if( sp != NULL )
	{
		sp->rangeIndex = 5; // whatever just not 0
		sp->eff[1].EffectMiscValueB = 713l;	//make it summon guardians
	}

	//Dancing Rune Weapon
	//no idea if this is a summon or just a visual. Atm i will try a visual
	sp = dbcSpell.LookupEntryForced( 49028 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = 0;	//summon only 1 blade
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 81256;	//mod threath and increase parry rating for 12 seconds
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->c_is_flags |= SPELL_FLAG_IS_INHERITING_LEVEL;
	}
	//death grip is actually some other spell which ofc does not have cooldown
	sp = dbcSpell.LookupEntryForced( 49576 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 49560;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->FacingCasterFlags = 0; //does not require facing
	}
	sp = dbcSpell.LookupEntryForced( 49560 ); //some version of death grip was targeting multiple targets. We do not want that
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_SINGLE_ENEMY;
		sp->FacingCasterFlags = 0; //does not require facing
	}

	//death pact use only scripted target gathering
	sp = dbcSpell.LookupEntryForced( 48743 );
	//if( sp != NULL )
	{
//		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME; //scripted targeting
//		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_DUEL; //scripted targeting
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF; //this is heal
		sp->eff[2].EffectImplicitTargetB = EFF_TARGET_NONE;
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		sp->Spell_value_is_scripted = true;
		sp->rangeIndex = 5; // 50 yards, whatever just not 0
	}

	//death and decay -> stupid drink effect. Need to make some research about it
	sp = dbcSpell.LookupEntryForced( 43265 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PERIODIC_DAMAGE;		
		sp->eff[0].EffectAmplitude = sp->eff[1].EffectAmplitude;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}

	//Frost Presence
/*	sp = dbcSpell.LookupEntryForced( 48266 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK | PROC_ON_SPELL_HIT_DOT ; //maybe description also refers to spell damage ?
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 50475;
		sp->eff[1].EffectBasePoints = sp2->eff[0].EffectBasePoints;
	}*/

	//Blood Presence
	sp = dbcSpell.LookupEntryForced( 48263 );
	//if( sp != NULL )
		sp->chained_cast = dbcSpell.LookupEntryForced( 61261 );
	sp = dbcSpell.LookupEntryForced( 61261 );
	//if( sp != NULL )
		sp->maxstack = 1;	// so it stacks with mother spell

	//Abomination's Might
	sp = dbcSpell.LookupEntryForced( 53137 ); 
	//if( sp != NULL )
		sp->RequiredShapeShift = 0;
	sp = dbcSpell.LookupEntryForced( 53138 ); 
	//if( sp != NULL )
		sp->RequiredShapeShift = 0;

	//Butchery
	sp = dbcSpell.LookupEntryForced( 48979 ); 
	//if( sp != NULL )
	{
//		sp->eff[1].EffectBasePoints = (sp->eff[1].EffectBasePoints + 1) / 5 - 1; //regen value is for 5 seconds. but we really care for / sec value
		sp->procFlags = PROC_ON_TARGET_DIE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 50163;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 49483 ); 
	//if( sp != NULL )
	{
//		sp->eff[1].EffectBasePoints = (sp->eff[1].EffectBasePoints + 1) / 5 - 1; //regen value is for 5 seconds. but we really care for / sec value
		sp->procFlags = PROC_ON_TARGET_DIE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 50163;
		sp->procChance = 100;
	}
	sp = dbcSpell.LookupEntryForced( 50163 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectBasePoints = (sp->eff[0].EffectBasePoints + 1) * 10 - 1 ;//well runic power is 10x stored but blizz forgot that
	}

	//Death Coil 
	sp = dbcSpell.LookupEntryForced( 47541 );
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_SCHOOL_DAMAGE; //damage enemy if we can find one
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].Effect = SPELL_EFFECT_HEAL; //heal friendly undead
//		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND; //damn, how to check an undead ?
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_ALL_SCRIPTED_OR_TARGETABLE_AROUND_LOCATION_IN_RADIUS_OVER_TIME; //damn, how to check an undead ?
		sp->eff[1].EffectBasePoints = (int32)(sp->eff[0].EffectBasePoints*1.5f);
		sp->chained_cast = dbcSpell.LookupEntryForced( 52375 ); //dummy spell for the animation

//		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL_WITH_VALUE;
//		sp->eff[0].EffectTriggerSpell = 47632; //dmg
//		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL_WITH_VALUE;
//		sp->eff[1].EffectTriggerSpell = 47633; //heal
	}

	//death charger -> should not cost anything
	sp = dbcSpell.LookupEntryForced( 48778 ); 
	//if( sp != NULL )
	{
		sp->powerType = POWER_TYPE_RUNIC;
//		sp->GetManaCost() = 0;
	}

	//Scent of Blood
	sp = dbcSpell.LookupEntryForced( 49004 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL; //these are registering same spell multiple times
		sp->proc_interval = 4000;
	}
	sp = dbcSpell.LookupEntryForced( 49508 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[1].EffectMiscValue = SMT_CHARGES;
		sp->eff[1].EffectSpellGroupRelation[0] = 64; //hope it is not taken :P
		sp->eff[1].EffectBasePoints = 0; // +1 
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].Effect = SPELL_EFFECT_NULL; //these are registering same spell multiple times 
		sp->proc_interval = 6000;
	}
	sp = dbcSpell.LookupEntryForced( 49509 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[1].EffectMiscValue = SMT_CHARGES;
		sp->eff[1].EffectSpellGroupRelation[0] = 64; //hope it is not taken :P
		sp->eff[1].EffectBasePoints = 1; // +1 
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].Effect = SPELL_EFFECT_NULL; //these are registering same spell multiple times
		sp->proc_interval = 8000;
	}
	sp = dbcSpell.LookupEntryForced( 50421 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell = 50422;
		sp->GetSpellGroupType()[0] = 64;//hope it is not taken :P
		sp->procCharges = 1;
	}
//	sp = dbcSpell.LookupEntryForced( 50422 ); 
	//if( sp != NULL )
//		sp->eff[0].EffectBasePoints = (sp->eff[0].EffectBasePoints + 1) / 2 - 1; //no idea why butvalue is double

	//Merciless Combat
/*	sp = dbcSpell.LookupEntryForced( 49024 ); 
	//if( sp != NULL )
		sp->GetTargetAuraState() = 0;
	sp = dbcSpell.LookupEntryForced( 49538 ); 
	//if( sp != NULL )
		sp->GetTargetAuraState() = 0;
		*/

	//Rune Tap
	sp = dbcSpell.LookupEntryForced( 48982 ); 
	//if( sp != NULL )
	{
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		sp->Spell_value_is_scripted = true;
	}

	//Improved Rune Tap
	sp = dbcSpell.LookupEntryForced( 48985 ); 
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	sp = dbcSpell.LookupEntryForced( 49488 ); 
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	sp = dbcSpell.LookupEntryForced( 49489 ); 
	//if( sp != NULL )
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

	//Unholy Frenzy
//	sp = dbcSpell.LookupEntryForced( 49016 ); 
	//if( sp != NULL )
	{
//		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
//		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_DUEL;
	}

	//Unholy Strength - Rune of the Fallen Crusader
	sp = dbcSpell.LookupEntryForced( 53365 ); 
	//if( sp != NULL )
	{
		sp->proc_interval = 20000;
		sp->procChance = 20; //no idea about real value
	}

	//Sudden Doom
	sp = dbcSpell.LookupEntryForced( 49018 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->proc_interval = 20000;
	}
	sp = dbcSpell.LookupEntryForced( 49529 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->proc_interval = 16000;
	}
	sp = dbcSpell.LookupEntryForced( 49530 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->proc_interval = 14000;	//min is 10 sec
	}
	sp = dbcSpell.LookupEntryForced( 81340 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}

	//Killing Machine
	sp = dbcSpell.LookupEntryForced( 51123 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
//		sp->proc_interval = 18000;
		sp->proc_interval = 9000;
	}
	sp = dbcSpell.LookupEntryForced( 51127 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
//		sp->proc_interval = 14000;
		sp->proc_interval = 7000;
	}
	sp = dbcSpell.LookupEntryForced( 51128 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
//		sp->proc_interval = 11000;
		sp->proc_interval = 4000;
	}
	sp = dbcSpell.LookupEntryForced( 51124 ); 
	//if( sp != NULL )
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
	}

	//Blood-Caked Strike
//	sp = dbcSpell.LookupEntryForced( 50463 );
	//if( sp != NULL )
//		SpellEntryEffectSwap(sp,sp,0,1);
//	sp = dbcSpell.LookupEntryForced( 61895 );
	//if( sp != NULL )
//		SpellEntryEffectSwap(sp,sp,0,1);

	//Bone Shield
	sp = dbcSpell.LookupEntryForced( 49222 ); 
	//if( sp != NULL )
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM;
	//Glyph of Bone Shield
	sp2 = dbcSpell.LookupEntryForced( 58673 ); 
	//if( sp != NULL )
	{
		if( sp->eff[2].EffectApplyAuraName == SPELL_AURA_MOD_INCREASE_SPEED )
			sp2->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_3;
	}

	//Chill of the Grave
	sp = dbcSpell.LookupEntryForced( 49149 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_COST;
		sp->eff[0].EffectSpellGroupRelation[0] = 2;
		sp->eff[0].EffectSpellGroupRelation[1] = 2;
	}
	sp = dbcSpell.LookupEntryForced( 50115 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_COST;
		sp->eff[0].EffectSpellGroupRelation[0] = 2;
		sp->eff[0].EffectSpellGroupRelation[1] = 2;
	}

	//Unholy Command
	sp = dbcSpell.LookupEntryForced( 49588 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_TARGET_DIE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 49588;	//SELF PROC !
	}
	sp = dbcSpell.LookupEntryForced( 49589 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_TARGET_DIE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 49588;	//SELF PROC !
	}

	//Magic Suppression
	sp = dbcSpell.LookupEntryForced( 49224 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->procFlags = PROC_ON_ABSORB_VICTIM;
		sp->procChance = 100;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 49088;	
		sp->proc_interval = 0;
	}
	sp = dbcSpell.LookupEntryForced( 49611 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->procFlags = PROC_ON_ABSORB_VICTIM;
		sp->procChance = 100;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 49088;	
		sp->proc_interval = 0;
	}
	sp = dbcSpell.LookupEntryForced( 49610 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->procFlags = PROC_ON_ABSORB_VICTIM;
		sp->procChance = 100;
		SpellEntryEffectCopy(sp,sp,0,1);
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 49088;	
		sp->proc_interval = 0;
	}

	//Rime
	sp = dbcSpell.LookupEntryForced( 49188 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_OBLITERATE;
	}
	sp = dbcSpell.LookupEntryForced( 56822 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_OBLITERATE;
	}
	sp = dbcSpell.LookupEntryForced( 59057 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_OBLITERATE;
	}
	sp = dbcSpell.LookupEntryForced( 59052 ); 
	//if( sp != NULL )
		sp->procFlags = PROC_ON_CAST_SPELL;

	//Endless Winter
	sp = dbcSpell.LookupEntryForced( 49137 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAINS_OF_ICE;
	}
	sp = dbcSpell.LookupEntryForced( 49657 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAINS_OF_ICE;
	}

	//Chains of Ice
	sp = dbcSpell.LookupEntryForced( 45524 ); 
	//if( sp != NULL )
	{
//		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints / 2;
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 55095;	//frost fever
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
		sp->DiminishStatus = DIMINISHING_GROUP_SLOW;
//		sp->spell_learn_is_linked_to_talent = 0;
	}
	
	// Glyph of Heart Strike
	// Your Heart Strike also reduces the movement speed of your target by $58617s1% for $58617d.
	sp = dbcSpell.LookupEntryForced( 58616 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEART_STRIKE;
	}
	// Glyph of Chains of Ice
	// Your Chains of Ice also causes 144 to 156 Frost damage, increased by your attack power.
	sp = dbcSpell.LookupEntryForced( 58620 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAINS_OF_ICE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 58621;
	}
	sp = dbcSpell.LookupEntryForced( 58621 ); 
	//if( sp != NULL )
	{
//		sp->AP_spell_bonus_base[0] = 0.34f;	//no idea actaully :(
		ASSERT( sp->AttackPowerToSpellDamageCoeff == 0.0f );
		sp->AttackPowerToSpellDamageCoeff = 0.34f;	//no idea actaully :(
	}
	// Glyph of Howling Blast
	// Your Howling Blast ability now infects your targets with Frost Fever.
	sp = dbcSpell.LookupEntryForced( 63335 ); 
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HOWLING_BLAST;
	}

	//Chilblains
	sp = dbcSpell.LookupEntryForced( 50040 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->eff[0].EffectTriggerSpell = 50434;
		sp->eff[1].EffectTriggerSpell = 96293;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROST_FEVER;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAINS_OF_ICE;
	}
	sp = dbcSpell.LookupEntryForced( 50041 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->eff[0].EffectTriggerSpell = 50435;
		sp->eff[1].EffectTriggerSpell = 96294;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_FROST_FEVER;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAINS_OF_ICE;
	}
	sp = dbcSpell.LookupEntryForced( 96293 ); 
	//if( sp != NULL )
	{
		sp->maxstack = 1;
		sp->DiminishStatus = DIMINISHING_GROUP_ROOT;
	}
	sp = dbcSpell.LookupEntryForced( 96294 ); 
	//if( sp != NULL )
	{
		sp->maxstack = 1;
		sp->DiminishStatus = DIMINISHING_GROUP_ROOT;
	}

	//Pestilence
	sp = dbcSpell.LookupEntryForced( 50842 ); 
	//if( sp != NULL )
	{
		sp->eff[0].Effect = SPELL_EFFECT_SCRIPT_EFFECT;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}

	//Hungering Cold -> you learn a talent that does nothing ? :S	
	sp = dbcSpell.LookupEntryForced( 49203 ); 
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = 13; //everyone knows that is 10 yards :P

		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 55095;		//frost fever
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_LOCATION_TO_SUMMON;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].EffectRadiusIndex = 13; //everyone knows that is 10 yards :P
		
		//the visual effect
//		sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
//		sp->eff[2].EffectTriggerSpell = 51209;
//		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;

		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
	}
/*	sp = dbcSpell.LookupEntryForced( 51209 ); 
	//if( sp != NULL )
	{
		sp->procCharges = 0;
		sp->AuraInterruptFlags = AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	} /**/

	//Frost Fever
	sp = dbcSpell.LookupEntryForced( 55095 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
		sp->SpellGroupType[2] |= DK_FROST_DISEASE_CUSTOM_MOD_FLAG;
	}
	//blood plague
	sp = dbcSpell.LookupEntryForced( 55078 );
	//if( sp != NULL )
	{
		sp->c_is_flags |= SPELL_FLAG_IS_PROC_TRIGGER_PROC;
		sp->SpellGroupType[2] |= DK_BLOOD_DISEASE_CUSTOM_MOD_FLAG;
		sp->belongs_to_player_class = DEATHKNIGHT;
	}

	//Plague Strike
	sp = dbcSpell.LookupEntryForced( 45462 );
	//if( sp != NULL )
	{
		if( sp->eff[0].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE )
		{
//			sp->AP_spell_bonus_base[0] = 0.299f;
			ASSERT( sp->AttackPowerToSpellDamageCoeff == 0.0f );
			sp->AttackPowerToSpellDamageCoeff = 0.299f;
		}
	}
	//Rune Strike
	sp = dbcSpell.LookupEntryForced( 56815 );
	//if( sp != NULL )
	{
		sp->Attributes |= ATTRIBUTES_CANT_BE_DPB;
		if( sp->eff[0].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE )
		{
//			sp->AP_spell_bonus_base[0] = 0.393f;
			ASSERT( sp->AttackPowerToSpellDamageCoeff == 0.0f );
			sp->AttackPowerToSpellDamageCoeff = 0.393f;
		}
	}
	
	//Frost Strike
//	sp = dbcSpell.LookupEntryForced( 49143 );
	//if( sp != NULL )
//		sp->Attributes = ATTRIBUTES_CANT_BE_DPB;

	//Morbidity
	sp = dbcSpell.LookupEntryForced( 48963 );
	sp2 = dbcSpell.LookupEntryForced( 43265 ); //death and decay
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[1].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[1].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
	}
	sp = dbcSpell.LookupEntryForced( 49564 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[1].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[1].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
	}
	sp = dbcSpell.LookupEntryForced( 49565 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[1].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
		sp->eff[1].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
		sp->eff[1].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
	}

	//Necrosis
	//Runic Corruption -> mods Runic Empowerment
	//Runic Empowerment - When you land a damaging Death Coil, Frost Strike, or Rune Strike, you have a 45% chance to activate a random fully depleted rune.
	sp = dbcSpell.LookupEntryForced( 51459 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 51460;
		sp->proc_interval = 1000;
		sp->procChance = 45;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RUNE_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_STRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_DEATH_COIL;
		sp->BGR_one_buff_on_target = 0;
	}
	sp = dbcSpell.LookupEntryForced( 51462 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 51460;
		sp->proc_interval = 1000;
		sp->procChance = 45;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RUNE_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_FROST_STRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_DEATH_COIL;
		sp->BGR_one_buff_on_target = 0;
	}
/*	sp = dbcSpell.LookupEntryForced( 51463 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 51460;
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	}*/
	sp = dbcSpell.LookupEntryForced( 51460 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->maxstack = 1;
	}

	//Scourge Strike
	sp = dbcSpell.LookupEntryForced( 55090 );
	//if( sp != NULL )
	{
		sp->eff[1].Effect = SPELL_EFFECT_WEAPON_PERCENT_DAMAGE;
		sp->eff[2].Effect = SPELL_EFFECT_DUMMY;
		sp->eff[2].EffectTriggerSpell = 70890;
	}
	//Glyph of Scourge Strike
//	sp = dbcSpell.LookupEntryForced( 70890 );
//	sp2 = dbcSpell.LookupEntryForced( 58642 );
	//if( sp != NULL )
//		sp->SpellGroupType[2] = sp2->eff[0].EffectSpellGroupRelation[2];

	//Desecration -> fucked up spell. creates npc that has aura to boost us and slow enemy
	sp = dbcSpell.LookupEntryForced( 55666 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_NECROTIC_STRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_SCOURGE_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 55667 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_PLAGUE_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_NECROTIC_STRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_SCOURGE_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced( 68766 );
	//if( sp != NULL )
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;

	//Blood-Caked Blade
	sp = dbcSpell.LookupEntryForced( 49219 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 49627 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
	}
	sp = dbcSpell.LookupEntryForced( 49628 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
	}

/*	//Summon Gargoyle
	sp = dbcSpell.LookupEntryForced( 49206 );
	//if( sp != NULL )
		sp->DurationIndex = 9; // 30 sec*/
	//raise dead
	sp = dbcSpell.LookupEntryForced( 46584 );
	//if( sp != NULL )
	{
/*		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
//		sp->eff[0].EffectTriggerSpell = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectTriggerSpell = 52150;
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[1].EffectTriggerSpell = sp->eff[1].EffectBasePoints;
		sp->c_is_flags |= SPELL_FLAG_IS_TRIGGERED_BY_TARGET;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TRIGGERED_ON_TARGET;
		sp->eff[2].Effect = SPELL_EFFECT_NULL; */
		sp->c_is_flags |= SPELL_FLAG_IS_REQUIRECOOLDOWNUPDATE;
	}
	sp = dbcSpell.LookupEntryForced( 46585 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectBasePoints = 0; // 1 summon
	}
	sp = dbcSpell.LookupEntryForced( 52150 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}

	////////////////////////////////////////////////
	// misc fixes
	////////////////////////////////////////////////
	//Light of Elune
	sp = dbcSpell.LookupEntryForced( 6724 );
	//if(sp != NULL)
		sp->powerType = POWER_TYPE_HAPPINESS;
	//Taunt Flag Targeting
	sp = dbcSpell.LookupEntryForced( 51640 );
	//if(sp != NULL)
	{
		sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CURRENT_SELECTION;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	sp = dbcSpell.LookupEntryForced( 52605 );
	//if(sp != NULL)
	{
		sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	//Shadow Resonance
	sp = dbcSpell.LookupEntryForced( 71911 );
	//if(sp != NULL)
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	//Restoration
	sp = dbcSpell.LookupEntryForced(23493);
	//if(sp != NULL)
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN | AURA_INTERRUPT_ON_HOSTILE_SPELL_INFLICTED | AURA_INTERRUPT_ON_ENTER_COMBAT | AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_DIRECT_DAMAGE;
		SpellEntryEffectCopy( sp,sp,0,1 );
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints = 10;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_MANA_REGEN_PCT;
		sp->eff[1].EffectBasePoints = 10;
	}
	//Blood Mirror - boss spell
	sp = dbcSpell.LookupEntryForced(70821);
	//if(sp != NULL)
	{
		sp->procFlags	=	PROC_ON_ANY_DAMAGE_VICTIM;
		sp->proc_interval = 0;	//all dmg, we will have a lot of attackers
		sp->eff[0].EffectTriggerSpell	=	70821;	//self proc cause we handle it 
	}
	//Mirrored Soul - boss spell
	sp = dbcSpell.LookupEntryForced(69051);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[0].EffectAmplitude = 2000;			//spam or to not to spam
	}
	//Blood Link - boss spell
	sp = dbcSpell.LookupEntryForced(72178);
	//if(sp != NULL)
	{
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procFlags	=	PROC_ON_CAST_SPELL;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BOILING_BLOOD;
		sp->ProcOnNameHash[1] = SPELL_HASH_BLOOD_NOVA;
		sp->eff[0].EffectTriggerSpell	=	72371;
	}
	//Mark of the Fallen Champion - boss spell for heal proc
	sp = dbcSpell.LookupEntryForced(72293);
	//if(sp != NULL)
	{
		sp->procFlags =	PROC_ON_TARGET_DIE;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
	}
	//Mark of the Fallen Champion - boss spell for dmg proc
	sp = dbcSpell.LookupEntryForced(72256);
	//if(sp != NULL)
		sp->procFlags =	PROC_ON_MELEE_ATTACK;
	//Blood Mirror - boss spell
	sp = dbcSpell.LookupEntryForced(71510);
	//if(sp != NULL)
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_SPLIT_DAMAGE;
	//Slime Puddle - boss spell
	sp = dbcSpell.LookupEntryForced(70346);
	//if(sp != NULL)
		sp->eff[0].EffectRadiusIndex = 15;	//3 yards
	//Dreamwalker's Rage - boss spell
	sp = dbcSpell.LookupEntryForced(71189);
	//if(sp != NULL)
		sp->eff[0].Effect = SPELL_EFFECT_INSTANT_KILL;	
	//Mana Barrier - boss spell
	sp = dbcSpell.LookupEntryForced(70842);
	//if(sp != NULL)
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;	
	//Unleashed Souls - boss spell
	sp = dbcSpell.LookupEntryForced(68967);
	//if(sp != NULL)
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
	//Ball Lightning - boss spell
	sp = dbcSpell.LookupEntryForced(52780);
	//if(sp != NULL)
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		
/*	//Ranged Weapon Specialization
	sp = dbcSpell.LookupEntryForced( 19507 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
		sp->eff[0].EffectMiscValue = 1;
	};
	sp = dbcSpell.LookupEntryForced( 19508 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
		sp->eff[0].EffectMiscValue = 1;
	};
	sp = dbcSpell.LookupEntryForced( 19509 );
	//if( sp != NULL )
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
		sp->eff[0].EffectMiscValue = 1;
	};*/

	//Glyph of Bloodthirst
/*	sp = dbcSpell.LookupEntryForced(58369);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
	}*/
	//Glyph of Vanish - has no affect :(
/*	sp = dbcSpell.LookupEntryForced(63320);
	//if(sp != NULL)
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;	//!!omg save us from this ! */
	//Glyph of Life Tap
/*	sp = dbcSpell.LookupEntryForced(63320);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIFE_TAP;
		sp->ProcOnNameHash[1] = SPELL_HASH_DARK_PACT;
		sp->eff[0].EffectTriggerSpell = 63321;
	}*/
	//Glyph of Shadowflame
	sp = dbcSpell.LookupEntryForced(63310);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHADOWFLAME;
		sp->eff[0].EffectTriggerSpell = 63311;
	}
	sp = dbcSpell.LookupEntryForced( 63311 );
	sp->rangeIndex = 7; //10 yards

/*	//Glyph of Heroic Strike
	sp = dbcSpell.LookupEntryForced(58357);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEROIC_STRIKE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 58362;
	} */
	//Glyph of Heroic Throw
	sp = dbcSpell.LookupEntryForced(58357);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEROIC_THROW;
	}
	//Glyph of Hamstring
	sp = dbcSpell.LookupEntryForced(58372);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HAMSTRING;
	}
/*	//Glyph of Blocking
	sp = dbcSpell.LookupEntryForced(58375);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_SLAM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 58374;
	} */
	//Glyph of Shield Slam
	sp = dbcSpell.LookupEntryForced(58375);
	//if(sp != NULL)
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2; 

	// Glyph of Enraged Regeneration
	sp = dbcSpell.LookupEntryForced(63327);
//	if(sp != NULL)
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1; 
	// Glyph of Revenge
	sp = dbcSpell.LookupEntryForced(58364);
//	if(sp != NULL)
	{
	   sp->procFlags = PROC_ON_CAST_SPELL;
	   sp->ProcOnNameHash[0] = SPELL_HASH_REVENGE;
	}
	// Glyph of Resillient Grip
	sp = dbcSpell.LookupEntryForced(59309); 
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_IMMUNE ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEATH_GRIP;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL ;
		sp->eff[0].EffectTriggerSpell = 90289;
		sp->procChance = 100;
	}
	//Glyph of Corruption
	sp = dbcSpell.LookupEntryForced(56218);
	if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell	=	17941;
		sp->procFlags	=	PROC_ON_SPELL_HIT_DOT;
		sp->procChance = sp->eff[0].EffectBasePoints; //well this is kinda like nothing
		SetPPMForChance( sp, 4, 1000, 60000 );
		sp->procChance = 20 + sp->eff[0].EffectBasePoints; //well this is kinda like nothing
		sp->ProcOnNameHash[0] = SPELL_HASH_CORRUPTION;
	}
	// Glyph of Rune Tap
	sp = dbcSpell.LookupEntryForced(59327); 
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_RUNE_TAP;
		//party members except self
//		sp->eff[0].Effect = SPELL_EFFECT_NULL; //the proc already heals for 10% no need for extra 10% leading to 20%
	}
	sp = dbcSpell.LookupEntryForced(59754); 
	//if(sp != NULL)
		sp->spell_id_client = sp->Id;	//combat log issue
	// Glyph of Icy Touch
	sp = dbcSpell.LookupEntryForced(58631); 
	//if(sp != NULL)
	{
//		sp->procFlags = PROC_ON_CAST_SPELL ;
//		sp->procFlags2 |= PROC2_TARGET_SELF;
//		sp->ProcOnNameHash[0] = SPELL_HASH_ICY_TOUCH;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1; 
	}
	// Glyph of Renewed Life
	sp = dbcSpell.LookupEntryForced(58059);
	//if(sp != NULL)
	{
//		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
//		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
	}
	// Glyph of Shred
	sp = dbcSpell.LookupEntryForced(54815);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName	= SPELL_AURA_PROC_TRIGGER_SPELL ;
		sp->procFlags2				|= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell	= 54815;	//!self proc
		sp->procFlags				= PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0]		= SPELL_HASH_SHRED;
	}
	// Glyph of Healing Wave
	sp = dbcSpell.LookupEntryForced(55440);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName	= SPELL_AURA_PROC_TRIGGER_SPELL ;
		sp->procFlags2				|= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell	= 55533;
		sp->procFlags				= PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0]		= SPELL_HASH_HEALING_WAVE;
	}
	// Glyph of Prayer of Healing
	sp = dbcSpell.LookupEntryForced(55680);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell  = 56161;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_PRAYER_OF_HEALING;
	}
	sp = dbcSpell.LookupEntryForced( 32837 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0]		= SPELL_HASH_DEATH_COIL;
	}
	// Evocation for Glyph of Evocation
	sp = dbcSpell.LookupEntryForced(12051);
	//if(sp != NULL)
	{
		sp->EffectHandler = &HandleEvocationGlyph;
//		sp->eff[1].EffectBasePoints = sp->eff[0].EffectBasePoints;
//		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[1].EffectSpellPowerCoef = 0.0f; //onekillerat said this got patched so it really heals for 40% amt instead 60%
		sp->Spell_value_is_scripted = true; //will this nerf the other effects ?
//		sp->c_is_flags2 |= SPELL_FLAG2_IS_TICKING_IMEDIATLY | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_TICKING_IMEDIATLY;
		//something is modding heal amount. According to wowhead it should not
		sp->SpellGroupType[0] = 0;
		sp->SpellGroupType[1] = 0;
		sp->SpellGroupType[2] = 0;
/*
		sp->EffectHandler = &HandleEvocationGlyph;
		SpellEntryEffectCopy( sp,sp,0,1 );
		sp->eff[0].Effect = SPELL_EFFECT_ENERGIZE_MAXPOWER_PCT;
		sp->eff[1].EffectBasePoints = 3 * sp->eff[0].EffectBasePoints;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[1].EffectSpellPowerCoef = 0.0f; //onekillerat said this got patched so it really heals for 40% amt instead 60%
		sp->Spell_value_is_scripted = true; //will this nerf the other effects ?
//		sp->c_is_flags2 |= SPELL_FLAG2_IS_TICKING_IMEDIATLY | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		//something is modding heal amount. According to wowhead it should not
		*/
	}
	// Glyph of Evocation
	sp = dbcSpell.LookupEntryForced( 56380 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_2;
	}
	// Glyph of Ice Armor
	sp = dbcSpell.LookupEntryForced(56384);
	//if(sp != NULL)
	{
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;	//!!beware of the misc effect !
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	// Glyph of Frostbolt
	sp = dbcSpell.LookupEntryForced(56370);
	//if(sp != NULL)
	{
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_DUMMY;
	}
	// Glyph of Imp
	sp = dbcSpell.LookupEntryForced(56248);
	//if(sp != NULL)
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_PET_OWNER;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
	}
	// Libram of Mending
	sp = dbcSpell.LookupEntryForced( 43741 );
	//if( sp != NULL )
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procChance = 100;
		sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_LIGHT;
	}
	// Mending - item enchant proc
	sp = dbcSpell.LookupEntryForced( 74194 );
	//if( sp != NULL )
	{
		sp->proc_interval = 60000 / 5; //15% = 5 times a minute
	}
	// Mystical Skyfire Diamond
	sp = dbcSpell.LookupEntryForced( 32837 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       45000;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	// Darkglow Embroidery - rank 1
	sp = dbcSpell.LookupEntryForced( 55768 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       60000;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	// Darkglow Embroidery - rank 2
	sp = dbcSpell.LookupEntryForced( 75174 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       40000;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	// Lightweave Embroidery - rank 1
	sp = dbcSpell.LookupEntryForced( 55640 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       60000;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	// Lightweave Embroidery - rank 2
	sp = dbcSpell.LookupEntryForced( 75171 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       40000;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	// Swordguard Embroidery - rank 1
	sp = dbcSpell.LookupEntryForced( 55776 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       60000;
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
	}
	// Swordguard Embroidery - rank 2
	sp = dbcSpell.LookupEntryForced( 75177 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       60000;
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
	}
	// Chuchu's Tiny Box of Horrors
	sp = dbcSpell.LookupEntryForced( 61618 );
	//if( sp != NULL )
	{
		sp->proc_interval       =       45000;
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	}        
	//Noise Machine - Sonic Shield
	sp = dbcSpell.LookupEntryForced(54808);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName  =   SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell   =   55019;
		sp->procFlags   =   PROC_ON_MELEE_ATTACK_VICTIM;
		sp->proc_interval   =   60000;
		sp->procChance  =   50;
	}
	//Pendulum of Telluric Currents
	sp = dbcSpell.LookupEntryForced(60482);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName  =   SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell   =   60483;
		sp->procFlags   =   PROC_ON_CAST_SPELL;
		sp->procChance  =   15;
	}
	//Has Tabard
	sp = dbcSpell.LookupEntryForced(57818);
	//if(sp != NULL)
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;

	//Create Totem of Issliruk
/*	sp = dbcSpell.LookupEntryForced(46816);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Aqual Quintessence
	sp = dbcSpell.LookupEntryForced(21357);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Aqual Quintessence
	sp = dbcSpell.LookupEntryForced(21357);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Banner of Provocation
	sp = dbcSpell.LookupEntryForced(27755);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Ectoplasmic Distiller
	sp = dbcSpell.LookupEntryForced(27752);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Eternal Quintessence
	sp = dbcSpell.LookupEntryForced(28439);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Frostwolf Assault Order (DND)
	sp = dbcSpell.LookupEntryForced(21654);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Extra-Dimensional Ghost Revealer
	sp = dbcSpell.LookupEntryForced(27754);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Incomplete Banner of Provocation
	sp = dbcSpell.LookupEntryForced(27756);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Replacement Illidari Tabard
	sp = dbcSpell.LookupEntryForced(41633);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Replacement Map
	sp = dbcSpell.LookupEntryForced(31446);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Replacement Whistle
	sp = dbcSpell.LookupEntryForced(40886);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	}

	//Create Restorative Draught
	sp = dbcSpell.LookupEntryForced(28149);
	//if(sp != NULL)
	{
		sp->Reagent[0] = 0;
	} */

	//resurrection sickness
	sp = dbcSpell.LookupEntryForced( 15007 );
	//if( sp != NULL )
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;
	//ghost form
	sp = dbcSpell.LookupEntryForced( 8326 );
	//if( sp != NULL)
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF;

	// sending packet after mounting seems to remove mount visual
	// Flying Carpet
//	sp = dbcSpell.LookupEntryForced( 61309 );
	//if( sp != NULL)
//		SpellEntryEffectSwap( sp,sp,0,2);
//	sp = dbcSpell.LookupEntryForced( 61451 );
	//if( sp != NULL)
//		SpellEntryEffectSwap( sp,sp,0,2);

	//enchant : Enchant Weapon - Avalanche
	sp = dbcSpell.LookupEntryForced( 95472 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	}
	//Formula: Enchant Weapon - Landslide
	sp = dbcSpell.LookupEntryForced( 74245 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
	}
	sp = dbcSpell.LookupEntryForced( 74196 );
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
	}
	
	//enchant : Rune of the Fallen Crusader
	sp = dbcSpell.LookupEntryForced(53344);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	}
	//item : Mark of Conquest
	sp = dbcSpell.LookupEntryForced( 33510 );
	//if( sp != NULL)
	{
		sp->procChance = 50;
		sp->proc_interval = 2000; //no spams please
	}
	sp = dbcSpell.LookupEntryForced(60442);// Bandit's Insignia
	//if(sp != NULL)
	{
		sp->proc_interval	=	15000;
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
	}
	sp = dbcSpell.LookupEntryForced(60442);// Bandit's Insignia
	//if(sp != NULL)
		sp->spell_id_client = sp->Id;

	//item : Val'anyr Hammer of Ancient Kings
	sp = dbcSpell.LookupEntryForced( 64415 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 2000; //no spams please
	}
	//need this to be shield like power word
	sp = dbcSpell.LookupEntryForced( 64411 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_SCHOOL_ABSORB;
		sp->eff[0].EffectBasePoints = 14;
		sp->eff[0].EffectMiscValue = 127; //absorb on all schools
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_FRIEND;	//any target
		sp->BGR_one_buff_on_target &= ~SPELL_TYPE_BLESSING;	//don't remove other blessings :)
//		DynamicCreateAssignSpellStackGroup( sp, 0, "MARK BLESSING", false );
//		DynamicCreateAssignSpellStackGroup( sp, 0, "MARK BLESSING 2", false );
	}

	//item : avatar of flame
	sp = dbcSpell.LookupEntryForced( 15636 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->proc_interval = 2000; //no spams please
	}
	//item : Enchant Swordguard Embroidery
	sp = dbcSpell.LookupEntryForced( 64571 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//Enchant Weapon - Power Torrent
	sp = dbcSpell.LookupEntryForced( 94746 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_HEAL_EVENT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 2000; //no spams please
	}
	//item : Enchant Weapon - Blood Draining
	sp = dbcSpell.LookupEntryForced( 64571 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 2000; //no spams please
		sp->eff[0].EffectTriggerSpell = 64569; //this is false !! it stacks an aura that heals only if below 35% health
	}
	//Item - Proc Haste Rating - Witching Hourglass
	sp = dbcSpell.LookupEntryForced(90888);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Flintlocke's Woodchucker
	sp = dbcSpell.LookupEntryForced(99622);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	sp = dbcSpell.LookupEntryForced(99621);
	//if(sp != NULL)
		sp->rangeIndex = 4;	//30 yards
	//item : Nitro Boosts -> should be cast spell but we simply copy whole spell over thsi one (in case that works out)
/*	sp = dbcSpell.LookupEntryForced( 55004 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 54861;
	} */

	//Item - Rogue T9 2P Bonus (Rupture)
	sp = dbcSpell.LookupEntryForced(67209);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_MELEE_ATTACK_EVENT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_RUPTURE;
		sp->procChance = 20;	//well it was 2% which i think it is like nothing and players report it as bug
		sp->procCharges = 1;
	}
	//Item - Warrior T8 Melee 2P Bonus
	sp = dbcSpell.LookupEntryForced(64938);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_SPELL_CRIT_HIT | PROC_ON_CRIT_ATTACK;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_HEROIC_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SLAM;
	}
	//Item - Rogue T8 2P Bonus
	sp = dbcSpell.LookupEntryForced(64914);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEADLY_POISON;
	}
	//Item - Priest T8 Healer 4P Bonus
	sp = dbcSpell.LookupEntryForced(64912);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
	}
	//Item - Priest T8 Shadow 4P Bonus
	sp = dbcSpell.LookupEntryForced(64908);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIND_BLAST;
	}
	//Item - Druid T8 Feral 2P Bonus
	sp = dbcSpell.LookupEntryForced(64752);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_MELEE_ATTACK_EVENT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 20;	//well it was 2% which i think it is like nothing and players report it as bug
		sp->ProcOnNameHash[0] = SPELL_HASH_RAKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_RIP;
		sp->ProcOnNameHash[2] = SPELL_HASH_LACERATE;
	} 
	//Item - Bleed Cost Reduction
	sp = dbcSpell.LookupEntryForced(60176);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_MELEE_ATTACK;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_REND;
		sp->ProcOnNameHash[1] = SPELL_HASH_DEEP_WOUNDS;
	} 
	sp = dbcSpell.LookupEntryForced( 61571 );
	//if( sp != NULL )
	{
		sp->AuraInterruptFlags = 0;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}
	//Item - Life Tap Bonus Spirit
	sp = dbcSpell.LookupEntryForced(60172);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIFE_TAP;
	} 
	//Item - Corruption Triggers Crit
	sp = dbcSpell.LookupEntryForced(60170);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_CORRUPTION;
		sp->ProcOnNameHash[1] = SPELL_HASH_IMMOLATE;
	} 
	sp = dbcSpell.LookupEntryForced( 61595 );
	//if( sp != NULL )
	{
		sp->AuraInterruptFlags = 0;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}
	//Item - Kill Command Pet Boost
	sp = dbcSpell.LookupEntryForced(60143);
	//if(sp != NULL)
	{
		sp->c_is_flags |= SPELL_FLAG_IS_CASTED_ON_PET_SUMMON_ON_PET;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_PET;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_PERCENT_DONE;
		sp->eff[0].EffectBasePoints = 4;
	} 
	//Item - Oblit/Scourge Strike Runic Power Up
	sp = dbcSpell.LookupEntryForced(60132);
	//if(sp != NULL)
	{
		sp->procFlags   =   PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_OBLITERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SCOURGE_STRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_DEATH_STRIKE;
	} 
	//Sudden Eclipse - Item - Moonkin Starfire Bonus
	sp = dbcSpell.LookupEntryForced( 46832 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags   =   PROC_ON_CRIT_HIT_VICTIM | PROC_ON_RANGED_CRIT_ATTACK_VICTIM | PROC_ON_SPELL_CRIT_HIT_VICTIM;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 6000;	//it's in the description
		sp->eff[0].EffectTriggerSpell = 95746;	
	} 
	sp = dbcSpell.LookupEntryForced(46833);
	//if(sp != NULL)
		sp->procCharges = 1;
	//Item - Item - Priest T9 Healing 4P Bonus (Divine Aegis and Empowered Renew)
	sp = dbcSpell.LookupEntryForced(67202);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[0].EffectSpellGroupRelation[0] = 64;		//don't do this !
		sp->eff[0].EffectSpellGroupRelation[1] = 16777216;	//don't do this !
		sp->eff[0].EffectSpellGroupRelation[2] = 0;			//don't do this !
	} 
	//Item - Item - Priest T9 Healing 2P Bonus (Prayer of Mending)
	sp = dbcSpell.LookupEntryForced(67201);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;
		sp->eff[0].EffectSpellGroupRelation[0] = 0;		//don't do this !
		sp->eff[0].EffectSpellGroupRelation[1] = 32;	//don't do this !
		sp->eff[0].EffectSpellGroupRelation[2] = 0;		//don't do this !
	} 
	//Item - Item - Shaman T8 Elemental 4P Bonus
	sp = dbcSpell.LookupEntryForced(64928);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->eff[0].EffectTriggerSpell = 50895;		//!! wrong spell but could not find better :(
	} 
	sp = dbcSpell.LookupEntryForced(50895);
	//if(sp != NULL)
		sp->spell_id_client = 64928;
	//Item - Druid T8 Restoration 4P Bonus
	sp = dbcSpell.LookupEntryForced(64760);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
		sp->eff[0].EffectTriggerSpell = 64801;		
	} 
	sp = dbcSpell.LookupEntryForced(64801);
	//if(sp != NULL)
		sp->spell_id_client = 774;	//!! meed logs for correct combat log info
	//Item - Death Knight T8 Melee 4P Bonus
/*	sp = dbcSpell.LookupEntryForced(64736);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[0].EffectSpellGroupRelation[0] = 0;		//don't do this !
		sp->eff[0].EffectSpellGroupRelation[1] = 0;		//don't do this !
		sp->eff[0].EffectSpellGroupRelation[2] = 2;		//don't do this !
	} */
	//Item - Fists of Fury
	sp = dbcSpell.LookupEntryForced(41989);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags |= PROC_ON_MELEE_ATTACK;
	} 
	sp = dbcSpell.LookupEntryForced(41990);
	//if(sp != NULL)
		SetSpellPowerCoeffsAll( sp, 0.15f );
	//Item - The Twin Blades of Azzinoth
	sp = dbcSpell.LookupEntryForced(41434);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags |= PROC_ON_MELEE_ATTACK;
	} 
	//Item - Frozen Shadoweave
	sp = dbcSpell.LookupEntryForced( 39372 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags |= PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell = 2054;		//just heal :( 99% this is wrong
	} 
	//Item - Mana Regen Proc
	sp = dbcSpell.LookupEntryForced( 38427 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->procFlags |= PROC_ON_MELEE_ATTACK;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 20;
	} 
	//Item - Alacrity of the Elements
	sp = dbcSpell.LookupEntryForced( 65005 );
	//if(sp != NULL)
	{
		sp->procFlags |= PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	} 
	//Item - Death Knight T8 DPS Relic
	//!!! zack need to implement flat mod to some specific effect only cause this is modding weapon pct dmg and that is huge
/*	sp = dbcSpell.LookupEntryForced( 64962 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints;		//according to description
		sp->eff[0].EffectSpellGroupRelation[0] = 0;		//don't do this !
		sp->eff[0].EffectSpellGroupRelation[1] = 0;		//don't do this !
		sp->eff[0].EffectSpellGroupRelation[2] = 1;		//don't do this !
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[1].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[1].EffectBasePoints = sp->eff[2].EffectBasePoints;		//according to description
		sp->eff[1].EffectSpellGroupRelation[0] = 0;		//don't do this !
		sp->eff[1].EffectSpellGroupRelation[1] = 4;		//don't do this !
		sp->eff[1].EffectSpellGroupRelation[2] = 0;		//don't do this !
	} */
	//Item - Paladin T8 Holy Relic
	sp = dbcSpell.LookupEntryForced( 64956 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints * 2;		//spell power -> heal power
	} 
	//Item - Item - Druid T8 Balance Relic
	sp = dbcSpell.LookupEntryForced( 64950 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints;
		sp->eff[0].EffectSpellGroupRelation[0] = 2097152;	//don't do this !
		sp->eff[0].EffectSpellGroupRelation[1] = 0;			//don't do this !
		sp->eff[0].EffectSpellGroupRelation[2] = 0;			//don't do this !
	} 
	//Item - Item - Druid T8 Restoration Relic
	sp = dbcSpell.LookupEntryForced( 64949 );
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_FLAT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[0].EffectBasePoints = sp->eff[0].EffectBasePoints * 2;		//spell power -> heal power
		sp->eff[0].EffectSpellGroupRelation[0] = 0;			//don't do this !
		sp->eff[0].EffectSpellGroupRelation[1] = 33554432;	//don't do this !
		sp->eff[0].EffectSpellGroupRelation[2] = 0;			//don't do this !
	} 
	//Item - Glory of the Jouster
	sp = dbcSpell.LookupEntryForced( 63251 );
	//if(sp != NULL)
	{
		sp->procFlags |= PROC_ON_MELEE_ATTACK;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 20;
	} 
	//Item - Chains of Ice Frost Rune Refresh
	sp = dbcSpell.LookupEntryForced( 62459 );
	//if(sp != NULL)
	{
		sp->procFlags |= PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_CHAINS_OF_ICE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->procChance = 20;
	} 
	//some whatever GM spell to make them visible to players
	sp = dbcSpell.LookupEntryForced( 37729 );
	//if( sp != NULL)
		sp->Attributes |=ATTRIBUTES_CANT_CANCEL;	
	//some whatever GM spell to root player - QA automation
	sp = dbcSpell.LookupEntryForced( 39258 );
	//if( sp != NULL)
	{
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF | SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->AuraInterruptFlags = 0;
	}
	//GM spell : uber heal over time to be self cast only
	sp = dbcSpell.LookupEntryForced( 30839 );
	//if( sp != NULL)
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;	
	//GM spell : uber heal over time to be self cast only
	sp = dbcSpell.LookupEntryForced( 1908 );
	//if( sp != NULL)
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;	
	//Item - Warrior T10 Melee 2P Bonus
	sp = dbcSpell.LookupEntryForced(70854);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_DEEP_WOUNDS;
	} 

	//Item - Druid T11 Feral 4P Bonus
	sp = dbcSpell.LookupEntryForced(90165);
	//if(sp != NULL)
	{
		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 90166;	
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 = PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_MANGLE;
	} 
	//Item - Priest T11 Healer 4P Bonus
	sp = dbcSpell.LookupEntryForced(89911);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 89911;	//self proc ? :O
		sp->procChance = 100;
		sp->procFlags = PROC_ON_HEAL_SPELL | PROC_ON_CAST_SPELL | PROC_ON_AURA_REMOVE;
		sp->procFlags2 = PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_PENANCE;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAKRA;
	} 
	//Item - Druid T11 Balance 4P Bonus
	sp = dbcSpell.LookupEntryForced(90163);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 90164;	
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 = PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_ECLIPSE__LUNAR_;
		sp->ProcOnNameHash[1] = SPELL_HASH_ECLIPSE__SOLAR_;
	}
	sp = dbcSpell.LookupEntryForced(90164);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
	}
	//Item - Hunter T11 4P Bonus
	sp = dbcSpell.LookupEntryForced(89925);
	//if(sp != NULL)
	{
		sp->eff[0].EffectTriggerSpell = 89925;	//self proc!
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FOCUS_FIRE;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHIMERA_SHOT;
		sp->ProcOnNameHash[2] = SPELL_HASH_BLACK_ARROW;
	} 
	//Item - Warlock T11 4P Bonus
	sp = dbcSpell.LookupEntryForced(89935);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->procChance = 20;		//had 2% chance = unhuman
		sp->ProcOnNameHash[0] = SPELL_HASH_IMMOLATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_UNSTABLE_AFFLICTION;
	} 
	sp = dbcSpell.LookupEntryForced(89937);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	//Item - Druid T11 Restoration 4P Bonus
	sp = dbcSpell.LookupEntryForced(90158);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIFEBLOOM;
	} 
	//Item - Warrior T11 DPS 4P Bonus
	sp = dbcSpell.LookupEntryForced(90295);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_OVERPOWER;
		sp->ProcOnNameHash[1] = SPELL_HASH_RAGING_BLOW;
	} 
	//Item - Paladin T11 Holy 4P Bonus
	sp = dbcSpell.LookupEntryForced(90313);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_SHOCK;
	} 
	//Item - Paladin T11 Holy 4P Bonus
	sp = dbcSpell.LookupEntryForced(90473);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 10;	//had 1%, i mean really
	} 
	sp = dbcSpell.LookupEntryForced(90472);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	//Item - Shaman T11 Restoration 4P Bonus
	sp = dbcSpell.LookupEntryForced(90499);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RIPTIDE;
	} 
	//Item - Death Knight T11 DPS 4P Bonus
	sp = dbcSpell.LookupEntryForced(90459);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 90507;	//self proc!
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_KILLING_MACHINE;
	} 

	//s9 - Runic Power Back on Snare/Root - Runic Return
	sp = dbcSpell.LookupEntryForced(61257);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 61258;	
		sp->procChance = 100;
		sp->procFlags = PROC_ON_SPELL_LAND_VICTIM;
	} 
	//s9 - Holy Walk 
	sp = dbcSpell.LookupEntryForced(33333);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 96219;
		sp->procChance = 100;
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_POWER_WORD__SHIELD;
	} 
	sp = dbcSpell.LookupEntryForced(96219);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
	}

	//Item - Warrior T10 Melee 4P Bonus
	//You have a $s1% chance for your Bloodsurge and Sudden Death talents to grant 2 charges of their effect instead of 1, reduce the global cooldown on Execute or Slam by ${$m3/-1000}.1 sec, and for the duration of the effect to be increased by $s2%.
/*	sp = dbcSpell.LookupEntryForced(70847);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70847;	//self proc ? :O
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOODSURGE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SUDDEN_DEATH;
	}  */
	//Item - Warlock T10 4P Bonus
	sp = dbcSpell.LookupEntryForced(70841);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_IMMOLATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_UNSTABLE_AFFLICTION;
	} 
	//Item - Shaman T10 Enhancement 4P Bonus
	sp = dbcSpell.LookupEntryForced(70832);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70831;	//self proc ? :O
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MAELSTROM_WEAPON;
	} 
	//Item - Shaman T10 Enhancement 2P Bonus
	sp = dbcSpell.LookupEntryForced(70830);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHAMANISTIC_RAGE;
	} 
/*	//Item - Shaman T10 Elemental 2P Bonus
	sp = dbcSpell.LookupEntryForced(70811);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70811;	//self proc ? :O
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIGHTNING_BOLT;
		sp->ProcOnNameHash[1] = SPELL_HASH_CHAIN_LIGHTNING;
	} */
	//Item - Shaman T10 Restoration 4P Bonus
	sp = dbcSpell.LookupEntryForced(70808);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70809;	
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT_VICTIM;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAIN_HEAL;
	} 
	//Item - Shaman T10 Restoration 2P Bonus
	sp = dbcSpell.LookupEntryForced(70807);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RIPTIDE;
	} 
	//Item - Rogue T10 2P Bonus
	sp = dbcSpell.LookupEntryForced(70805);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_TRICKS_OF_THE_TRADE;
	} 
	//Item - Rogue T10 4P Bonus
	sp = dbcSpell.LookupEntryForced(70803);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
	} 
	//Item - Priest T10 Healer 4P Bonus
/*	sp = dbcSpell.LookupEntryForced(70798);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CIRCLE_OF_HEALING;
		sp->ProcOnNameHash[1] = SPELL_HASH_PENANCE;
	} 
*/
	//Item - Priest T10 Healer 2P Bonus
	sp = dbcSpell.LookupEntryForced(70770);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70809;	//self proc ? :O
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_HEAL;
	} 
	//Item - Paladin T10 Retribution 2P Bonus
	sp = dbcSpell.LookupEntryForced(70765);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70765;	//self proc ? :O
	} 
	//Item - Paladin T10 Protection 4P Bonus
	sp = dbcSpell.LookupEntryForced(70761);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_PLEA;
	} 
	//Item - Paladin T10 Holy 4P Bonus
	sp = dbcSpell.LookupEntryForced(70756);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_SHOCK;
	} 
	sp = dbcSpell.LookupEntryForced(70757);
	//if(sp != NULL)
	{
		sp->procCharges = 1;
		sp->procFlags = PROC_ON_CAST_SPELL;
	}
	//Item - Paladin T10 Holy 2P Bonus
	sp = dbcSpell.LookupEntryForced(70755);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71166;	
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_ILLUMINATION;
	} 
	sp = dbcSpell.LookupEntryForced(71166);
	//if(sp != NULL)
	{
		sp->DurationIndex = AURA_DURATION_INDEX_15_SECONDS;
		sp->NameHash = SPELL_HASH_DIVINE_ILLUMINATION_custom; //or it will remove other divine illumination
	}
	//Item - Mage T10 2P Bonus
	sp = dbcSpell.LookupEntryForced(70752);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70753;	
		sp->procFlags = PROC_ON_AURA_REMOVE;
		sp->ProcOnNameHash[0] = SPELL_HASH_HOT_STREAK;
		sp->ProcOnNameHash[1] = SPELL_HASH_MISSILE_BARRAGE;
		sp->ProcOnNameHash[2] = SPELL_HASH_BRAIN_FREEZE;
	} 
	//Item - Mage T10 4P Bonus
	sp = dbcSpell.LookupEntryForced(70748);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MIRROR_IMAGE;
	} 
	//Item - Hunter T10 4P Bonus
	sp = dbcSpell.LookupEntryForced(70730);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SERPENT_STING;
		sp->ProcOnNameHash[1] = SPELL_HASH_WYVERN_STING;
	} 
	//Item - Hunter T10 2P Bonus
	sp = dbcSpell.LookupEntryForced(70727);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	} 
	//Item - Druid T10 Balance 4P Bonus
	sp = dbcSpell.LookupEntryForced(70723);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71023;	
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->ProcOnNameHash[0] = SPELL_HASH_STARFIRE;
		sp->ProcOnNameHash[1] = SPELL_HASH_WRATH;
	} 
	//Item - Druid T10 Balance 2P Bonus
	sp = dbcSpell.LookupEntryForced(70718);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70721;	
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CLEARCASTING;
		sp->procChance = 100;
	} 
	//Item - Druid T10 Restoration 4P Bonus (Rejuvenation)
	sp = dbcSpell.LookupEntryForced(70664);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70664;	//!self proc
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
		sp->procChance = 10;
	} 
	//Item - Druid T10 Restoration 2P Bonus
/*	sp = dbcSpell.LookupEntryForced(70658);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70658;	//!self proc
		sp->procFlags = PROC_ON_SPELL_HIT_DOT;
		sp->ProcOnNameHash[0] = SPELL_HASH_WILD_GROWTH;
	} */
	//Item - Death Knight T10 Melee 4P Bonus
	sp = dbcSpell.LookupEntryForced(70656);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_RUNE_DEPLETE_EVENT | PROC_ON_NOT_VICTIM;
	} 
	//Item - Death Knight T10 Tank 4P Bonus
	sp = dbcSpell.LookupEntryForced(70652);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BLOOD_TAP;
	} 
	//Item - Death Knight T10 Tank 2P Bonus
	sp = dbcSpell.LookupEntryForced(70650);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_ADD_PCT_MODIFIER;
		sp->eff[0].EffectMiscValue = SMT_MISC_EFFECT;
		sp->eff[0].EffectSpellGroupRelation[0] = 32;
	} 
	//Item - Warrior T10 Protection 4P Bonus
	sp = dbcSpell.LookupEntryForced(70844);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 70845;	
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BATTLE_SHOUT;
		sp->ProcOnNameHash[1] = SPELL_HASH_COMMANDING_SHOUT;
	} 
	//Purified Shard of the Scale - Equip Effect
	sp = dbcSpell.LookupEntryForced(69755);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 69734;	
		sp->procFlags = PROC_ON_CAST_SPELL;
	} 

	//Item - Chamber of Aspects 25 Melee Trinket
	sp = dbcSpell.LookupEntryForced(75455);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
//		sp->proc_interval = 45000;
	}
	//Item - Chamber of Aspects 25 Heroic Melee Trinket
	sp = dbcSpell.LookupEntryForced(75457);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
//		sp->proc_interval = 45000;
	}

	//Item - Chamber of Aspects 25 Nuker Trinket
	sp = dbcSpell.LookupEntryForced(75465);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
//		sp->proc_interval = 45000;
	}
	//Item - Chamber of Aspects 25 Heroic Nuker Trinket
	sp = dbcSpell.LookupEntryForced(75474);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
//		sp->proc_interval = 45000;
	}

	//Item - Chamber of Aspects 25 Tank Trinket
	sp = dbcSpell.LookupEntryForced(75475);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->proc_interval = 45000;
	}
	//Item - Chamber of Aspects 25 Heroic Tank Trinket
	sp = dbcSpell.LookupEntryForced(75481);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->proc_interval = 45000;
	}

	//Eyes of Twilight
	sp = dbcSpell.LookupEntryForced(75490);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
//		sp->proc_interval = 45000;
	}
	//Eyes of Twilight
	sp = dbcSpell.LookupEntryForced(75495);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
//		sp->proc_interval = 45000;
	}

	//Item - Icecrown 10 Heroic Tank Trinket
	sp = dbcSpell.LookupEntryForced(71578);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->proc_interval = 2000;
	}
	//Item - Icecrown 10 Normal Tank Trinket
	sp = dbcSpell.LookupEntryForced(71576);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->proc_interval = 2000;
	}

	//Item - Icecrown 10 Normal Melee Trinket
	sp = dbcSpell.LookupEntryForced(71402);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->procChance = 20;
		sp->proc_interval = 45000;
	}
	//Item - Icecrown 10 Heroic Melee Trinket
	sp = dbcSpell.LookupEntryForced(71540);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->procChance = 30;
		sp->proc_interval = 45000;
	}
	//Item - Icecrown 25 Normal Melee Trinket
	sp = dbcSpell.LookupEntryForced(71519);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71519;	//!self proc
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->proc_interval = 90000;		//cause spell duration is 30 sec
		sp->procChance = 30;	//no idea really
	}
	//Item - Icecrown 25 Heroic Melee Trinket
	sp = dbcSpell.LookupEntryForced(71562);
	//if(sp != NULL)
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71519;	//!self proc
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->proc_interval = 90000;		//cause spell duration is 30 sec
		sp->procChance = 30;	//no idea really
	}

	//Item - Icecrown Reputation Ring Healer Trigger
	sp = dbcSpell.LookupEntryForced(72419);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown Reputation Ring Caster Trigger
	sp = dbcSpell.LookupEntryForced(72417);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown Reputation Ring Tank Trigger
	sp = dbcSpell.LookupEntryForced(72415);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Item - Icecrown Reputation Ring Melee
	sp = dbcSpell.LookupEntryForced(72413);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Item - Icecrown 25 Normal Caster Weapon Proc
	sp = dbcSpell.LookupEntryForced(71845);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown 25 Normal Ranged Weapon Proc
	sp = dbcSpell.LookupEntryForced(71835);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	//Item - Icecrown 25 Normal Tank Trinket 1
	sp = dbcSpell.LookupEntryForced(71634);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Item - Icecrown 25 Heroic Tank Trinket 1
	sp = dbcSpell.LookupEntryForced(71640);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Item - Icecrown 25 Normal Healer Trinket 2
	sp = dbcSpell.LookupEntryForced(71611);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown 25 Heroic Healer Trinket 2
	sp = dbcSpell.LookupEntryForced(71642);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown 25 Emblem Healer Trinket
	sp = dbcSpell.LookupEntryForced(71585);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown 10 Normal Caster Trinket
	sp = dbcSpell.LookupEntryForced(71571);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->proc_interval = 1;	//they say this procs all the time
	}
	//Item - Icecrown Dungeon Healer Trinket
	sp = dbcSpell.LookupEntryForced(71567);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown Dungeon Melee Trinket
	sp = dbcSpell.LookupEntryForced(71404);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK;
	//Item - Icecrown 25 Emblem Melee Trinket
	sp = dbcSpell.LookupEntryForced(71397);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->proc_interval = 1001;	//each attack ...
	}
	//Item - Icecrown 25 Heroic Dagger Proc
	sp = dbcSpell.LookupEntryForced(71892);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71888;
		sp->procChance = 20;
	}
	//Item - Icecrown 25 Normal Dagger Proc
	sp = dbcSpell.LookupEntryForced(71880);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK ;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71881;
		sp->procChance = 20;
	}
	//Item - Icecrown 25 Normal Slow Melee Weapon Proc
	sp = dbcSpell.LookupEntryForced(71876);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 20;
	}
	//Item - Icecrown 25 Heroic Tank Weapon Proc
	sp = dbcSpell.LookupEntryForced(71873);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 20;
	}
	//Item - Icecrown 25 Normal Tank Weapon Proc
	sp = dbcSpell.LookupEntryForced(71871);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->procChance = 20;
	}
	//Item - Icecrown 25 Heroic Healer Weapon Proc
	sp = dbcSpell.LookupEntryForced(71868);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = 20;
	}
	sp = dbcSpell.LookupEntryForced( 71866 );	//some say this is not receiving any bonus at all
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	
		sp->Spell_value_is_scripted = true;
	}
	
	//lesser heroism
//	sp = dbcSpell.LookupEntryForced( 32844 );	
	//if(sp != NULL)
	{
//		sp->procChance = 20;
//		sp->proc_interval = 30000;
	}
	sp = dbcSpell.LookupEntryForced( 32845 );	//some say this is not receiving any bonus at all
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	
		sp->Spell_value_is_scripted = true;
	}

	//Item - Icecrown 25 Normal Healer Weapon Proc
	sp = dbcSpell.LookupEntryForced(71865);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->procChance = 20;
	}
	//Item - Icecrown 25 Heroic Ranged Weapon Proc
	sp = dbcSpell.LookupEntryForced(71836);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	//Item - Icecrown 25 Normal Caster Trinket 1 Base
	sp = dbcSpell.LookupEntryForced(71602);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown 25 Heroic Caster Trinket 1 Base
	sp = dbcSpell.LookupEntryForced(71645);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Icecrown 25 Normal Caster Trinket 1 Base - the proc
	dbcSpell.LookupEntryForced(71600)->DurationIndex = dbcSpell.LookupEntryForced(71601)->DurationIndex;
	//Item - Icecrown 25 Heroic Caster Trinket 1 Base - the proc
	dbcSpell.LookupEntryForced(71643)->DurationIndex = dbcSpell.LookupEntryForced(71644)->DurationIndex;

	//Item - Icecrown 25 Normal Caster Trinket 2
	sp = dbcSpell.LookupEntryForced(71606);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->proc_interval = 45000;
	}
	//Item - Icecrown 25 Heroic Caster Trinket 2
	sp = dbcSpell.LookupEntryForced(71637);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 45000;
	}
	//Item - Icecrown 25 Heroic Caster Trinket 2
	sp = dbcSpell.LookupEntryForced(71637);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->proc_interval = 45000;
	}
	//Item - Icecrown 10 Normal Tank Trinket
	sp = dbcSpell.LookupEntryForced(71576);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Deadly Precision
	sp = dbcSpell.LookupEntryForced(71563);
	//if(sp != NULL)
	{
//		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
//		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
//		sp->eff[0].EffectTriggerSpell = 71564;
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71564;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[1].EffectTriggerSpell = 71564;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[2].Effect = SPELL_EFFECT_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 71564;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->chained_cast = dbcSpell.LookupEntryForced(71564); //still need 1 more cast to get 5
	}
	//Anger Capacitor
	sp = dbcSpell.LookupEntryForced(71545);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71432;
	}
	//Anger Capacitor
	sp = dbcSpell.LookupEntryForced(71406);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 71432;
	}
	//Unsated Craving - !!! no description !!!
	sp = dbcSpell.LookupEntryForced(71168);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Item - Paladin T10 Protection Relic (Shield of Righteousness)
/*	sp = dbcSpell.LookupEntryForced(71194);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHIELD_OF_RIGHTEOUS;
	}*/
	//Item - Death Knight T10 Tank Relic (Runestrike)
	sp = dbcSpell.LookupEntryForced(71228);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RUNE_STRIKE;
	}
	//Item - Death Knight T10 DPS Relic (Obliterate, Scourge Strike, Death Strike)
	sp = dbcSpell.LookupEntryForced(71226);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_OBLITERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SCOURGE_STRIKE;
		sp->ProcOnNameHash[2] = SPELL_HASH_DEATH_STRIKE;
	}
	//Item - Shaman T10 Restoration Relic (Riptide)
	sp = dbcSpell.LookupEntryForced(71217);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_RIPTIDE;
	}
	//Item - Shaman T10 Enhancement Relic (Stormstrike)
	sp = dbcSpell.LookupEntryForced(71214);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_STORMSTRIKE;
	}
	//Item - Shaman T10 Elemental Relic (Shocks)
	sp = dbcSpell.LookupEntryForced(71198);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLAME_SHOCK;
	}
	//Item - Paladin T10 Holy Relic (Holy Shock)
	sp = dbcSpell.LookupEntryForced(71191);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_SHOCK;
	}
	//Item - Paladin T10 Retribution Relic (Crusader Strike)
	sp = dbcSpell.LookupEntryForced(71186);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
		sp->proc_interval = 1;	//they say this procs all the time
	}
	//Item - Druid T10 Restoration Relic (Rejuvenation)
	sp = dbcSpell.LookupEntryForced(71178);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
	}

	//Item - Druid T10 Balance Relic (Moonfire and Insect Swarm)
	sp = dbcSpell.LookupEntryForced(71176);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_INSECT_SWARM;
		sp->ProcOnNameHash[1] = SPELL_HASH_MOONFIRE;
	}
	//Item - Druid T10 Feral Relic (Rake and Lacerate)
	sp = dbcSpell.LookupEntryForced(71174);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[0] = SPELL_HASH_LACERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_RAKE;
	}
	//Escalating Power
	sp = dbcSpell.LookupEntryForced(67740);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Escalating Power
	sp = dbcSpell.LookupEntryForced(67726);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Rising Fury
	sp = dbcSpell.LookupEntryForced(67738);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Volatile Power
	sp = dbcSpell.LookupEntryForced(67736);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Coliseum 5 Melee Trinket
	sp = dbcSpell.LookupEntryForced(67672);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	//Coliseum 5 CasterTrinket
	sp = dbcSpell.LookupEntryForced(67670);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Coliseum 5 Healer Trinket
	sp = dbcSpell.LookupEntryForced(67667);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Coliseum 5 Tank Trinket
	sp = dbcSpell.LookupEntryForced(67653);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->proc_interval = 45000;
	}
	//Item - Druid T9 Balance Relic (Moonfire)
	sp = dbcSpell.LookupEntryForced(67361);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
	}
	//Item - Druid T9 Restoration Relic (Rejuvenation)
	sp = dbcSpell.LookupEntryForced(67356);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_REJUVENATION;
	}
	//Item - Druid T9 Feral Relic (Lacerate, Swipe, Mangle, and Shred)
	sp = dbcSpell.LookupEntryForced(67353);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_LACERATE;
		sp->ProcOnNameHash[1] = SPELL_HASH_SWIPE;
		sp->ProcOnNameHash[2] = SPELL_HASH_MANGLE;
		sp->eff[0].EffectTriggerSpell = 67354;
	}
	//Bonus Mana Regen
	sp = dbcSpell.LookupEntryForced(65002);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Blessed Book of Nagrand
	sp = dbcSpell.LookupEntryForced(32403);
	//if(sp != NULL)
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
	//Item - Druid T8 Feral Relic
/*	sp = dbcSpell.LookupEntryForced(64952);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_MANGLE__BEAR_;
		sp->ProcOnNameHash[1] = SPELL_HASH_MANGLE__CAT_;
	}*/
	//The General's Heart
	sp = dbcSpell.LookupEntryForced(64764);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Justice
	sp = dbcSpell.LookupEntryForced(61324);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[0] = SPELL_HASH_DIVINE_STORM;
	}
	//LK Arena 5 Gladiator's Idol of Steadfastness
	sp = dbcSpell.LookupEntryForced(60724);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
	}
	//LK Arena 4 Gladiator's Idol of Steadfastness
	sp = dbcSpell.LookupEntryForced(60722);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 = PROC2_TARGET_SELF;
		sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
	}
	//Deadly Gladiator's Idol of Steadfastness
	sp = dbcSpell.LookupEntryForced(60719);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
	}
	//Hateful Gladiator's Idol of Steadfastness
	sp = dbcSpell.LookupEntryForced(60717);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
	}
	//Savage Gladiator's Idol of Steadfastness
	sp = dbcSpell.LookupEntryForced(60710);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
	}
	//Savage Gladiator's Totem of Survival
	sp = dbcSpell.LookupEntryForced(60564);
	//if(sp != NULL)
	{
	}
	//Surge of Conquest - Bloodthirsty Gladiator's Insignia of Conquest
	sp = dbcSpell.LookupEntryForced(92221);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_ANY_SPELL_DAMAGE_DONE;
	}
	//Forethought Talisman
	sp = dbcSpell.LookupEntryForced(60529);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Spark of Life
	sp = dbcSpell.LookupEntryForced(60519);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Talisman of Troll Divinity
	sp = dbcSpell.LookupEntryForced(60517);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Soul Preserver
	sp = dbcSpell.LookupEntryForced(60510);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;

	//Extract of Necromatic Power
	sp = dbcSpell.LookupEntryForced(60487);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
	sp = dbcSpell.LookupEntryForced( 60488 );
	//if( sp != NULL )
		sp->spell_id_client = sp->Id;

	//Signet of Edward the Odd
	sp = dbcSpell.LookupEntryForced(60317);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_MELEE_ATTACK;
	//Essence of Gossamer
	sp = dbcSpell.LookupEntryForced(60221);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Rage of the Unraveller
	sp = dbcSpell.LookupEntryForced(60066);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CRIT_ATTACK;
	//Flow of Time
	sp = dbcSpell.LookupEntryForced(60061);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_CAST_SPELL;
	//Frenzyheart Fury
	sp = dbcSpell.LookupEntryForced(59818);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_TARGET_DIE;
	//Oracle Ablutions
	sp = dbcSpell.LookupEntryForced(59787);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_TARGET_DIE;
	//Chagrin
	sp = dbcSpell.LookupEntryForced(59345);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_MELEE_ATTACK;
	//Worg Tooth Oatmeal Stout
	sp = dbcSpell.LookupEntryForced(58444);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Airy Pale Ale
	sp = dbcSpell.LookupEntryForced(58442);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Increased Spirit
	sp = dbcSpell.LookupEntryForced(57907);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MOONFIRE;
	}
	//Chilling Blow
	sp = dbcSpell.LookupEntryForced(55755);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Argent Fury
	sp = dbcSpell.LookupEntryForced(55747);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_MELEE_ATTACK;
	//Chilled Shot
	sp = dbcSpell.LookupEntryForced(55735);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	//Purified Spirit
	sp = dbcSpell.LookupEntryForced(54838);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Star of Light
	sp = dbcSpell.LookupEntryForced(54738);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Power of the Great Ones
	sp = dbcSpell.LookupEntryForced(53371);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK | PROC_ON_MELEE_ATTACK | PROC_ON_CAST_SPELL;
	//Retaliation
	sp = dbcSpell.LookupEntryForced(52423);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_DODGE_VICTIM;
	//Deflection
	sp = dbcSpell.LookupEntryForced(52420);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Snap and Snarl
	sp = dbcSpell.LookupEntryForced(52020);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHRED;
		sp->ProcOnNameHash[1] = SPELL_HASH_SWIPE;
	}
	//Venomous Breath Aura
	sp = dbcSpell.LookupEntryForced(51414);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Venture Company Beatdown!
	sp = dbcSpell.LookupEntryForced(51352);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_TARGET_DIE;
	//Venture Company Beatdown!
	sp = dbcSpell.LookupEntryForced(51346);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_TARGET_DIE;
	//Elemental Tenacity
	sp = dbcSpell.LookupEntryForced(48837);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHOCK;
	}
	//Primal Instinct
/*	sp = dbcSpell.LookupEntryForced(48833);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_MELEE_ATTACK;
		sp->ProcOnNameHash[0] = SPELL_HASH_MANGLE__BEAR_;
		sp->ProcOnNameHash[1] = SPELL_HASH_MANGLE__CAT_;
	}*/
	//Black Bow of the Betrayer
	sp = dbcSpell.LookupEntryForced(46939);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	//Brutal Libram of Justice
	sp = dbcSpell.LookupEntryForced(46092);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
	}
	/////////////////////////////////////////////////////////////
	// Item
	/////////////////////////////////////////////////////////////


	//Swift Hand of Justice 
	sp = dbcSpell.LookupEntryForced( 59906 );
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_TARGET_DIE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 59913;
		sp->proc_interval = 1000; //is this limited ?
	}
	//Underbelly Elixir
	sp = dbcSpell.LookupEntryForced(59645);
	//if(sp != NULL)
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_ENTER_WATER | AURA_INTERRUPT_ON_CAST_SPELL;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}
	sp = dbcSpell.LookupEntryForced(59831);
	//if(sp != NULL)
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_ENTER_WATER | AURA_INTERRUPT_ON_CAST_SPELL;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}

	//Blood Elf Illusion
	sp = dbcSpell.LookupEntryForced(46354);
	//if(sp != NULL)
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;

	//Skinning
	sp = dbcSpell.LookupEntryForced(74522);
	//if(sp != NULL)
		sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;
	sp = dbcSpell.LookupEntryForced(8613);
	//if(sp != NULL)
		sp->AttributesExB |= SPELL_ATTR2_ALLOW_DEAD_TARGET;

	//Item - Dragon Soul - Proc - Str Tank Sword Heroic
	sp = dbcSpell.LookupEntryForced(109832);
	//if(sp != NULL)
	{
//		SetItemSpellProcInterval( sp, 0, 0 );
		sp->proc_interval = 15000;
	}
	sp = dbcSpell.LookupEntryForced(109829);
	//if(sp != NULL)
	{
//		SetItemSpellProcInterval( sp, 0, 0 );
		sp->proc_interval = 15000;
	}
	sp = dbcSpell.LookupEntryForced(109832);
	//if(sp != NULL)
	{
//		SetItemSpellProcInterval( sp, 0, 0 );
		sp->proc_interval = 15000;
	}

	//Leyara's Locket 
	sp = dbcSpell.LookupEntryForced(101184);
	//if(sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;		
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
	}
	//SPELL_ALLIANCE_GOLD_FLAG 
	sp = dbcSpell.LookupEntryForced(32724);
	//if(sp != NULL)
	{
		sp->activeIconID = sp->SpellIconID;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF | SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->AuraInterruptFlags = 0;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}
	//SPELL_ALLIANCE_GREEN_FLAG 
	sp = dbcSpell.LookupEntryForced(32725);
	//if(sp != NULL)
	{
		sp->activeIconID = sp->SpellIconID;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF | SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->AuraInterruptFlags = 0;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}
	//SPELL_HORDE_GOLD_FLAG 
	sp = dbcSpell.LookupEntryForced(35774);
	//if(sp != NULL)
	{
		sp->activeIconID = sp->SpellIconID;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF | SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->AuraInterruptFlags = 0;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}
	//SPELL_HORDE_GREEN_FLAG 
	sp = dbcSpell.LookupEntryForced(35775);
	//if(sp != NULL)
	{
		sp->activeIconID = sp->SpellIconID;
		sp->c_is_flags |= SPELL_FLAG_IS_FORCEDDEBUFF | SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->AuraInterruptFlags = 0;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_MAP_CAST_BOUND;
	}
	//Hurricane 
	sp = dbcSpell.LookupEntryForced(94747);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_EVENT | PROC_ON_SPELL_HIT_EVENT | PROC_ON_NOT_VICTIM;
	//PX-238 Winter Wondervolt
	sp = dbcSpell.LookupEntryForced(26274);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	sp = dbcSpell.LookupEntryForced(26273);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	sp = dbcSpell.LookupEntryForced(26272);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	sp = dbcSpell.LookupEntryForced(26157);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	//Skeleton Costume
	sp = dbcSpell.LookupEntryForced(24723);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	//Ninja Costume
	sp = dbcSpell.LookupEntryForced(24710);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	sp = dbcSpell.LookupEntryForced(24711);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	//Ghost Costume
	sp = dbcSpell.LookupEntryForced(24736);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	sp = dbcSpell.LookupEntryForced(24735);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	//Leper Gnome Costume
	sp = dbcSpell.LookupEntryForced(24712);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	sp = dbcSpell.LookupEntryForced(24713);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	//Pirate Costume
	sp = dbcSpell.LookupEntryForced(24709);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
	sp = dbcSpell.LookupEntryForced(24708);
	//if(sp != NULL)
		sp->AuraInterruptFlags = 0;
		
	//Electrified - Stormchops
	sp = dbcSpell.LookupEntryForced(43730);
	//if(sp != NULL)
	{
		sp->c_is_flags &= ~SPELL_FLAG_IS_TARGETINGSTEALTHED;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
	}
	sp = dbcSpell.LookupEntryForced(43731);
	//if(sp != NULL)
	{
		sp->c_is_flags &= ~SPELL_FLAG_IS_TARGETINGSTEALTHED;
		sp->SpellTargetRestrictionsId = 0;
	}
	sp = dbcSpell.LookupEntryForced(43733);
	//if(sp != NULL)
		sp->c_is_flags &= ~SPELL_FLAG_IS_TARGETINGSTEALTHED;
	//Tazik Shocker
	sp = dbcSpell.LookupEntryForced(82180);
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
	}
	//Dark Iron Pulverizer - Stunning Blow
	sp = dbcSpell.LookupEntryForced(15283);
	//if(sp != NULL)
	{
		sp->proc_interval = 15000;
		if( sp->procChance > 50 )
			sp->procChance = 50;
	}
	//Power of Kran'aish
	sp = dbcSpell.LookupEntryForced(32924);
	//if(sp != NULL)
		sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
	//Blessing of the Burning Wild
	sp = dbcSpell.LookupEntryForced(89049);
	//if(sp != NULL)
		sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
	//Gor'drek's Ointment
	sp = dbcSpell.LookupEntryForced(32578);
	//if(sp != NULL)
		sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;
	//Haste
	sp = dbcSpell.LookupEntryForced(57060);
	//if(sp != NULL)
		sp->AttributesEx |= ATTRIBUTESEX_NOT_BREAK_STEALTH;

	//Joe's God Mode - using this spell to shield duelers to not let them die when they finish duel
	sp = CreateDummySpell( 1235 );
	//if(sp != NULL)
	{
		sp->Name = "Duel GOD";
		sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp->DurationIndex = 39;	//2 sec
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;					
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_SCHOOL_ABSORB; 
		sp->eff[0].EffectBasePoints = 0x0FFFFFFF;		
		sp->eff[0].EffectMiscValue = 127;			//all schools
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
	}
	//Swift Flying Broom - note, in 4.2 client this is normal to be insta cast
	// I don't care if it is normal. It is abused by players. No more instant casts
/*	sp = dbcSpell.LookupEntryForced(42668);
	//if(sp != NULL)
	{
		sp->ss.castTimeMin = 250;	//just to interrput on move
		sp->CastingTimeIndex = 2;	//just to interrput on move
	} */

	//Disco Ball
	sp = dbcSpell.LookupEntryForced(50314);
	//if(sp != NULL)
		sp->eff[0].EffectAmplitude = 10000;
	sp = dbcSpell.LookupEntryForced(50315);
	//if(sp != NULL)
	{
		sp->eff[0].EffectAmplitude = 15000;
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;
	}
	//Item - Dragon Soul Stacking Agility Trinket
	sp = dbcSpell.LookupEntryForced(109720);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->proc_interval = 5000;	//buff duration is 5 sec
	}
	sp = dbcSpell.LookupEntryForced(109718);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->proc_interval = 5000;	//buff duration is 5 sec
	}
	sp = dbcSpell.LookupEntryForced(107961);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK ;
		sp->proc_interval = 5000;	//buff duration is 5 sec
	}
	//Hand-Mounted Pyro Rocket
	sp = dbcSpell.LookupEntryForced(54757);
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	
		sp->Spell_value_is_scripted = true;
	}
	//Whirling Maw - description says 10 yards not 2
	sp = dbcSpell.LookupEntryForced(107997);
	//if(sp != NULL)
		sp->eff[0].EffectRadiusIndex = 13;
	sp = dbcSpell.LookupEntryForced(109752);
	//if(sp != NULL)
		sp->eff[0].EffectRadiusIndex = 13;
	sp = dbcSpell.LookupEntryForced(109754);
	//if(sp != NULL)
		sp->eff[0].EffectRadiusIndex = 13;
	//Weighted Blades
	sp = dbcSpell.LookupEntryForced(110211);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_OVERRIDE_CLASS_SCRIPTS;
		sp->ClassOverideApplyHandler = HandleWeightedBlades;
	}
	//Indomitable
	sp = dbcSpell.LookupEntryForced(109786);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 108008;
		sp->proc_interval = 60000;
	}
	sp = dbcSpell.LookupEntryForced(109785);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 108008;
		sp->proc_interval = 60000;
	}
	sp = dbcSpell.LookupEntryForced(108007);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 108008;
		sp->proc_interval = 60000;
	}
	//Loom of Fate
	sp = dbcSpell.LookupEntryForced(97130);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
		sp->proc_interval = 60000;
	}
	//Eye of Blazing Power
	sp = dbcSpell.LookupEntryForced(97137);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced(96967);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 45000;
	}
	//Vessel of Acceleration
	sp = dbcSpell.LookupEntryForced(97143);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CRIT_ATTACK;
	sp = dbcSpell.LookupEntryForced(96981);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CRIT_ATTACK;
	//Foul Gift
	sp = dbcSpell.LookupEntryForced(102663);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_SPELL_HIT_EVENT | PROC_ON_NOT_VICTIM;
		sp->proc_interval = 45000;
	}
	//Item - Dragon Soul - Proc - Int Spirit Mace 1H Heroic
	sp = dbcSpell.LookupEntryForced(109850);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Dragon Soul - Proc - Int Versatile Staff
	sp = dbcSpell.LookupEntryForced(107805);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Dragon Soul - Proc - Int Hit Dagger LFR
	sp = dbcSpell.LookupEntryForced(109853);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Dragon Soul - Proc - Int Spirit Mace 1H LFR
	sp = dbcSpell.LookupEntryForced(109848);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Dragon Soul - Proc - Int Hit Dagger
	sp = dbcSpell.LookupEntryForced(107832);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 15000;
	}
	sp = dbcSpell.LookupEntryForced(109853);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 15000;
	}
	sp = dbcSpell.LookupEntryForced(109855);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 15000;
	}
	//Item - Dragon Soul - Proc - Int Hit Dagger Heroic
	sp = dbcSpell.LookupEntryForced(109855);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Dragon Soul - Proc - Int Spirit Mace 1H
	sp = dbcSpell.LookupEntryForced(107836);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_HEAL_SPELL;
	//Item - Dragon Soul Stacking Healer Trinket
	sp = dbcSpell.LookupEntryForced(107963);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL;
		sp->proc_interval = 1001;
	}
	//Item - Dragon Soul Stacking Caster Trinket
	sp = dbcSpell.LookupEntryForced(107971);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 1000;
	}
	//Haste
	sp = dbcSpell.LookupEntryForced(109788);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	sp = dbcSpell.LookupEntryForced(109790);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(107983);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(107984);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(107989);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 110000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(107987);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
//		SetItemSpellProcInterval( sp, 0, 0 );
//		sp->proc_interval = 120000;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	sp = dbcSpell.LookupEntryForced(109788);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(109777);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
//		sp->proc_interval = 120000;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(109775);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
//		sp->proc_interval = 120000;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(109745);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 110000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(109743);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 110000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(109712);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	sp = dbcSpell.LookupEntryForced(109710);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	//Item - Dragon Soul Stacking Dodge Trinket
	sp = dbcSpell.LookupEntryForced(109783);
	//if(sp != NULL)
//		sp->proc_interval = 5000;
		sp->proc_interval = 2000;
	//Item - Dragon Soul Stacking Strength Trinket
	sp = dbcSpell.LookupEntryForced(109751);
	//if(sp != NULL)
//		sp->proc_interval = 5000;
		sp->proc_interval = 2000;
	//Item - Dragon Soul Stacking Healer Trinket
	sp = dbcSpell.LookupEntryForced(109814);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL;
		sp->proc_interval = 1001;
	}
	//Item - Dragon Soul Stacking Healer Trinket
	sp = dbcSpell.LookupEntryForced(109812);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL;
		sp->proc_interval = 1001;
	}
	//Item - Dragon Soul Stacking Caster Trinket
	sp = dbcSpell.LookupEntryForced(109796);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 5000;
	}
	//Item - Dragon Soul Stacking Caster Trinket
	sp = dbcSpell.LookupEntryForced(109794);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 1000;
	}
	//Shadowbolt Volley
	sp = dbcSpell.LookupEntryForced(109799);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced(109801);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced(108006);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced(108005);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_IN_AREA_CHANNELED;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = 13;
		sp->eff[0].EffectSpellPowerCoef /= 3;
	}
	sp = dbcSpell.LookupEntryForced(109798);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_IN_AREA_CHANNELED;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = 13;
		sp->eff[0].EffectSpellPowerCoef /= 3;
	}
	sp = dbcSpell.LookupEntryForced(109800);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_ALL_ENEMY_IN_AREA_CHANNELED;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectRadiusIndex = 13;
		sp->eff[0].EffectSpellPowerCoef /= 3;
	}
	//Haste
	sp = dbcSpell.LookupEntryForced(109805);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(109799);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced(109803);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	//Nick of Time
	sp = dbcSpell.LookupEntryForced(109826);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced(109823);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced(108002);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->proc_interval = 20000;
	}
	sp = dbcSpell.LookupEntryForced(97138);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced(109823);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->proc_interval = 20000;
	}
	sp = dbcSpell.LookupEntryForced(109826);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_EVENT | PROC_ON_CRIT;
		sp->proc_interval = 20000;
	}
	sp = dbcSpell.LookupEntryForced(108000);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->rangeIndex=13; //5k yards
	}
	sp = dbcSpell.LookupEntryForced(109822);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->rangeIndex=13; //5k yards
	}
	sp = dbcSpell.LookupEntryForced(109825);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_DUEL;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->rangeIndex=13; //5k yards
	}
	//Matrix Restabilizer
	sp = dbcSpell.LookupEntryForced(97138);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 97139;	
	}
	//Matrix Restabilizer
	sp = dbcSpell.LookupEntryForced(96976);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 96977;	
	}
	//Variable Pulse Lightning Capacitor
	sp = dbcSpell.LookupEntryForced(96887);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->proc_interval = 2500;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 96890;
	}
	sp = dbcSpell.LookupEntryForced(97119);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
		sp->proc_interval = 2500;
		sp->procChance = 100;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 96890;
	}
	sp = dbcSpell.LookupEntryForced(96891);
	//if(sp != NULL)
		SetSpellPowerCoeffsAll( sp, ITEM_SPELL_DEFAULT_SP_BENEFIT_COEF );
	//Wrath of Tarecgosa
	sp = dbcSpell.LookupEntryForced(101056);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
//		sp->procFlags = PROC_ON_SPELL_HIT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 101085;
//		sp->proc_interval = 60000 * ( 100 - 16 ) / 100; //8 %chance
		sp->proc_interval = 4000; 
//		sp->procChance = 17; //8%?sucks
//		sp->procChance = 9; //they linked blizz topics that this should be 7.5% :(
		sp->procChance = 100;	//need to tick on every DOT dmg
		sp->proc_interval = 400; 
	}
	sp = dbcSpell.LookupEntryForced(101085);
	//if(sp != NULL)
	{
//		sp->spell_can_crit = false;
		SetNoEffeCanCrit( sp );
		SetSpellPowerCoeffsAll( sp, 0 );	
		sp->Spell_value_is_scripted = true;
	}

	//Surge of Conquest
	sp = dbcSpell.LookupEntryForced(99749);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	//Surge of Victory
	sp = dbcSpell.LookupEntryForced(99747);
	//if(sp != NULL)
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(99722);
	//if(sp != NULL)
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(105140);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(102433);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	//Surge of Dominance
	sp = dbcSpell.LookupEntryForced(99743);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_HEAL_SPELL;
	sp = dbcSpell.LookupEntryForced(102436);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_HEAL_SPELL;
	sp = dbcSpell.LookupEntryForced(105138);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE | PROC_ON_HEAL_SPELL;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	//Item - Druid Firelands Cosmetic Transform Controller
	sp = dbcSpell.LookupEntryForced(99246);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 99244;
		sp->proc_interval = 1001;
		sp->ProcOnNameHash[0] = SPELL_HASH_CAT_FORM;
	}
	sp = dbcSpell.LookupEntryForced(99244);
	//if(sp != NULL)
		sp->RequiredShapeShift = (1<<(FORM_CAT-1));
	sp = dbcSpell.LookupEntryForced(101085);
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		sp->Spell_value_is_scripted = true;
	}
	//Item - Paladin T12 Retribution 2P Bonus
	sp = dbcSpell.LookupEntryForced(99093);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_SPELL_HIT_EVENT;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 99092;
		sp->proc_interval = 1001;
		sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_STRIKE;
	}
	sp = dbcSpell.LookupEntryForced(99092);
	//if(sp != NULL)
	{
		SetSpellPowerCoeffsAll( sp, 0 );	//scripted value
		sp->Spell_value_is_scripted = true;
	}
	//Item - Warrior T12 DPS 4P Bonus
	sp = dbcSpell.LookupEntryForced(99238);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_MORTAL_STRIKE;
		sp->ProcOnNameHash[1] = SPELL_HASH_RAGING_BLOW;
	}
	//Item - Warrior T12 DPS 2P Bonus
	sp = dbcSpell.LookupEntryForced(99234);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BATTLE_SHOUT;
		sp->ProcOnNameHash[1] = SPELL_HASH_COMMANDING_SHOUT;
	}
	//Item - Warlock T12 4P Bonus
	sp = dbcSpell.LookupEntryForced(99229);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		if( sp->procChance == 5 )
			sp->procChance = 15;	//wtf bonus ? duration is 8 sec = barelly cast 2 spells
	}
	//Item - Warlock T12 2P Bonus
	sp = dbcSpell.LookupEntryForced(99220);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
	//Item - Shaman T12 Elemental 2P Bonus
	sp = dbcSpell.LookupEntryForced(99204);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Shaman T12 Restoration 2P Bonus
	sp = dbcSpell.LookupEntryForced(99190);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_RIPTIDE;
	}
	//Item - Priest T12 Healer 4P Bonus
	sp = dbcSpell.LookupEntryForced(99135);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	sp = dbcSpell.LookupEntryForced(99152);	//Cauterizing Flame - heal
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_LOWEST_HP_PARTY_MEMBER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}	
	//Item - Priest T12 Healer 2P Bonus
	sp = dbcSpell.LookupEntryForced(99134);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Item - Hunter T12 2P Bonus
	sp = dbcSpell.LookupEntryForced(99067);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HOLY_SHOCK;
	}
	//Item - Mage T12 2P Bonus
	sp = dbcSpell.LookupEntryForced(99061);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 45000;
	}
	//Item - Hunter T12 4P Bonus
	sp = dbcSpell.LookupEntryForced(99059);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	sp = dbcSpell.LookupEntryForced(99060);
//	sp2 = dbcSpell.LookupEntryForced(34026);	//kill command
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
//		sp->eff[0].EffectSpellGroupRelation[0] = sp2->SpellGroupType[0];
//		sp->eff[0].EffectSpellGroupRelation[1] = sp2->SpellGroupType[1];
//		sp->eff[0].EffectSpellGroupRelation[2] = sp2->SpellGroupType[2];
	}
	//Item - Hunter T12 2P Bonus
	sp = dbcSpell.LookupEntryForced(99057);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_STEADY_SHOT;
		sp->ProcOnNameHash[1] = SPELL_HASH_COBRA_SHOT;
	}
	//Item - Druid T12 Balance 2P Bonus
	sp = dbcSpell.LookupEntryForced(99019);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_WRATH;
		sp->ProcOnNameHash[1] = SPELL_HASH_STARFIRE;
	}
	//Item - Druid T12 Restoration 2P Bonus
	sp = dbcSpell.LookupEntryForced(99013);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->ProcOnNameHash[0] = SPELL_HASH_LIFEBLOOM;
	}
	//Item - Death Knight T12 DPS 2P Bonus
	sp = dbcSpell.LookupEntryForced(98970);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_HORN_OF_WINTER;
	}
	sp = dbcSpell.LookupEntryForced(98971);
	//if(sp != NULL)
		sp->eff[0].EffectBasePoints *= 10;	//runic power is scaled by 10 ?
	//Item - Death Knight T12 Blood 2P Bonus
	sp = dbcSpell.LookupEntryForced(98956);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;

	//Item - Vessel of Acceleration
	sp = dbcSpell.LookupEntryForced(96981);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->proc_interval = 1001;
	}
	//Item - Vessel of Acceleration
	sp = dbcSpell.LookupEntryForced(97143);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->proc_interval = 1001;
	}
	//Item - Eye of Blazing Power
	sp = dbcSpell.LookupEntryForced(96967);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced(96966);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_LOWEST_HP_PARTY_MEMBER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	//Item - Eye of Blazing Power
	sp = dbcSpell.LookupEntryForced(97137);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_HEAL_SPELL;
		sp->proc_interval = 45000;
	}
	sp = dbcSpell.LookupEntryForced(97136);
	//if(sp != NULL)
	{
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_CUSTOM_LOWEST_HP_PARTY_MEMBER;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
	}
	//Item - Necromantic Focus
	sp = dbcSpell.LookupEntryForced(96963);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->proc_interval = 1001;
	}
	//Item - Necromantic Focus
	sp = dbcSpell.LookupEntryForced(97132);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
		sp->proc_interval = 1001;
	}
	//Item - Loom of Fate
	sp = dbcSpell.LookupEntryForced(96947);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Item - Loom of Fate
	sp = dbcSpell.LookupEntryForced(97130);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Item - Apparatus of Khaz'goroth
	sp = dbcSpell.LookupEntryForced(96924);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK;
		sp->proc_interval = 1001;
	}
	//Item - Hungerer
	sp = dbcSpell.LookupEntryForced(96910);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	//Item - Hungerer
	sp = dbcSpell.LookupEntryForced(97126);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	//Item - Victory
	sp = dbcSpell.LookupEntryForced(96908);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 501;
	}
	//Item - Victory
	sp = dbcSpell.LookupEntryForced(97121);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->proc_interval = 501;
	}
	//Item - Surge of Dominance
	sp = dbcSpell.LookupEntryForced(85024);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_HEAL_SPELL | PROC_ON_ANY_DAMAGE_DONE;
	sp = dbcSpell.LookupEntryForced(99720);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_HEAL_SPELL | PROC_ON_ANY_DAMAGE_DONE;
	//Item - Surge of Victory
	sp = dbcSpell.LookupEntryForced(85034);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	sp = dbcSpell.LookupEntryForced(99722);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	//Item - Surge of Conquest
	sp = dbcSpell.LookupEntryForced(85011);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}	sp = dbcSpell.LookupEntryForced(102440);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}	sp = dbcSpell.LookupEntryForced(105136);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 90000;
		sp->procChance = 50;
	}
	sp = dbcSpell.LookupEntryForced(99718);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
	//Item - Chains of Ice Frost Rune Refresh
	sp = dbcSpell.LookupEntryForced(62459);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CHAINS_OF_ICE;
	}
	//Item - Glyph of Dark Succor
	sp = dbcSpell.LookupEntryForced(96279);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_TARGET_DIE;
	sp = dbcSpell.LookupEntryForced(101568);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procCharges = 1;
	}
	//Item - T7 Melee Trinket Base
	sp = dbcSpell.LookupEntryForced(45355);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK_VICTIM | PROC_ON_MELEE_ATTACK_VICTIM;
	//Item - Sunwell Dungeon Melee Trinket
	sp = dbcSpell.LookupEntryForced(45354);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Evasive Maneuvers
	sp = dbcSpell.LookupEntryForced(45057);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Augment Pain
	sp = dbcSpell.LookupEntryForced(45054);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
	//Charm of the Raging Defender
	sp = dbcSpell.LookupEntryForced(43822);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Charm of the Witch Doctor
	sp = dbcSpell.LookupEntryForced(43820);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 43821;
	}
	//Charm of Mighty Mojo
	sp = dbcSpell.LookupEntryForced(43818);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Charm of the Bloodletter
	sp = dbcSpell.LookupEntryForced(43816);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Fire Extinguisher
	sp = dbcSpell.LookupEntryForced(55037);
	//if(sp != NULL)
		sp->eff[0].Effect = SPELL_EFFECT_NULL;
	//Elemental Strength
	sp = dbcSpell.LookupEntryForced(43748);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_SHOCK;
	}
	//Elemental Strength
	sp = dbcSpell.LookupEntryForced(43745);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_CRUSADER_S_COMMAND;
	}
	//Vengeful Libram of Justice
	sp = dbcSpell.LookupEntryForced(43726);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
	}
	//Merciless Libram of Justice
	sp = dbcSpell.LookupEntryForced(42368);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_FLASH_OF_LIGHT;
	}
	//Fury of the Crashing Waves
	sp = dbcSpell.LookupEntryForced(42083);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CRIT_ATTACK;
	//Aviana's Will
	sp = dbcSpell.LookupEntryForced(41262);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_TARGET_DIE;
	//Aviana's Purpose
	sp = dbcSpell.LookupEntryForced(41260);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_TARGET_DIE;
	//Bonus Healing
	sp = dbcSpell.LookupEntryForced(40971);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Illidan Tank Shield
	sp = dbcSpell.LookupEntryForced(40407);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK_VICTIM;
	//Siphon Essence
	sp = dbcSpell.LookupEntryForced(40291);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK;
	//Aura of Vengeance
	sp = dbcSpell.LookupEntryForced(39444);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_DAMAGE_VICTIM | PROC_ON_MELEE_ATTACK_VICTIM | PROC_ON_RANGED_ATTACK_VICTIM;
	//Aura of Wrath
	sp = dbcSpell.LookupEntryForced(39442);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_ANY_SPELL_DAMAGE_DONE;
	//Aura of the Crusade
	sp = dbcSpell.LookupEntryForced(39438);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	//Crit Proc Spell Damage
	sp = dbcSpell.LookupEntryForced(38347);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_SPELL_CRIT_HIT;
	//Forgotten Knowledge
	sp = dbcSpell.LookupEntryForced(38319);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//HoTs on Heals
	sp = dbcSpell.LookupEntryForced(38299);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_CAST_SPELL;
	//Santos' Blessing
	sp = dbcSpell.LookupEntryForced(38290);
	//if(sp != NULL)
		sp->procFlags = PROC_ON_RANGED_ATTACK;
	//Healing Discount
	sp = dbcSpell.LookupEntryForced(37705);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->eff[0].EffectTriggerSpell = 37706;
	}
	//Improved Battle Shout
	sp = dbcSpell.LookupEntryForced(37536);
	//if(sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->ProcOnNameHash[0] = SPELL_HASH_BATTLE_SHOUT;
	}

	//Shiny Shard of the Scale - Equip Effect
	sp = dbcSpell.LookupEntryForced(69739);
	//if(sp != NULL)
	{
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL;
		sp->eff[0].EffectTriggerSpell = 62402;
		sp->procFlags = PROC_ON_CAST_SPELL;
	} 
	//rocket boots
/*	sp2 = dbcSpell.LookupEntryForced( 13141 );
	sp = dbcSpell.LookupEntryForced( 51582 );
	//if( sp != NULL)
	{
		SpellEntryEffectCopy( sp2,sp,0,0);
		sp->DurationIndex = sp2->DurationIndex;
	}*/
	//Holiday - Valentine - Romantic Picnic Near Basket Check
	sp = dbcSpell.LookupEntryForced( 45119 );
	sp2 = dbcSpell.LookupEntryForced( 45093 );
	//if( sp != NULL)
	{
		SpellEntryEffectCopy( sp2,sp,0,0);
		sp->eff[0].EffectMiscValue = 187267; //anything
	}

	//Release of Light - missing cooldown from item Bauble of True Blood
	sp = dbcSpell.LookupEntryForced( 71607 );
	//if( sp != NULL)
	{
		sp->DurationIndex = 4; //2 minutes - no, this is not related to cooldown !
		sp->RecoveryTime = 2*60*1000;	//2 minutes
	}

	//Cast Fishing Net - missing cooldown from item 
	sp = dbcSpell.LookupEntryForced( 29866 );
	//if( sp != NULL)
	{
		sp->DurationIndex = 4; //2 minutes - no, this is not related to cooldown !
		sp->RecoveryTime = 2*60*1000;	//2 minutes
	}

	//Seafood Magnifique Feast
	sp = dbcSpell.LookupEntryForced( 87806 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[0].EffectTriggerSpell = 80169; //health
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[1].EffectTriggerSpell = 80167; //mana
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;	
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
//		sp->eff[2].EffectTriggerSpell = 87545; //need to be scripted to give main stat 
		sp->eff[2].EffectAmplitude = 10000;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
		sp->DurationIndex = dbcSpell.LookupEntryForced( 80169 )->DurationIndex;	//same
	}
	sp2 = dbcSpell.LookupEntryForced( 80169 );
	//if( sp != NULL)
		sp2->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
	sp2 = dbcSpell.LookupEntryForced( 80167 );
	//if( sp != NULL)
	{
		sp2->eff[1].EffectBasePoints = sp2->eff[1].EffectBasePoints / 5; //it's in the description that it's mana regen for 5 sec ticking every 2 seconds..
		sp2->eff[1].EffectAmplitude = 1000;
		sp2->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
	}

	//fish feast 
	sp = dbcSpell.LookupEntryForced( 57426 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
	}
//	sp2 = dbcSpell.LookupEntryForced( 57079 );
	//if( sp != NULL)
//		sp2->eff[1].EffectBasePoints = sp2->eff[1].EffectBasePoints*30/5;	//when used, this spell should have this effect actually
	sp2 = dbcSpell.LookupEntryForced( 57073 );
	//if( sp != NULL)
		sp2->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
	sp2 = dbcSpell.LookupEntryForced( 45548 );
	//if( sp != NULL)
		sp2->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
	sp = dbcSpell.LookupEntryForced( 57397 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[0].EffectTriggerSpell = 45548; //health
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[1].EffectTriggerSpell = 57073; //mana
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;	
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57294; //57079 well fed -> sadly this needs to be scripted to add SP or AP depending on 
		sp->eff[2].EffectAmplitude = 10000;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
		sp->DurationIndex = sp2->DurationIndex;	//same
	}
	sp = dbcSpell.LookupEntryForced( 57294 );
	//if( sp != NULL)
		sp->chained_cast = dbcSpell.LookupEntryForced( 59690 );	//Well Fed (DND) -> needs extra setup

	//Small Feast - not all used 58474,7353,45548,57073,58477,7353,29119,58479,406 
	sp = dbcSpell.LookupEntryForced( 58474 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
	}
	sp2 = dbcSpell.LookupEntryForced( 45548 );
	sp = dbcSpell.LookupEntryForced( 58475 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[0].EffectTriggerSpell = 45548; //health
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[1].EffectTriggerSpell = 57073; //mana
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;	
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57079; //well fed
		sp->eff[2].EffectAmplitude = 10000;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
		sp->DurationIndex = sp2->DurationIndex;	//same
		sp->chained_cast = dbcSpell.LookupEntryForced( 58479 );	//Nearly Well Fed
	}
	sp = dbcSpell.LookupEntryForced( 58479 );
	//if( sp != NULL)
		sp->AuraInterruptFlags = 0;

	//Great Feast - 57301,57337,45548,57073,57338,7353,57294,59690
	sp = dbcSpell.LookupEntryForced( 57301 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
	}
	sp2 = dbcSpell.LookupEntryForced( 45548 );
	sp = dbcSpell.LookupEntryForced( 57337 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[0].EffectTriggerSpell = 45548; //health
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[1].EffectTriggerSpell = 57073; //mana
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;	
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57294; //well fed
		sp->eff[2].EffectAmplitude = 10000;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
		sp->DurationIndex = sp2->DurationIndex;	//same
	}

	//Gigantic Feast -> spells used (58465,58466,45548,57073,58467,406,58468)
	sp = dbcSpell.LookupEntryForced( 58465 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
	}
	sp2 = dbcSpell.LookupEntryForced( 45548 );
	sp = dbcSpell.LookupEntryForced( 58466 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[0].EffectTriggerSpell = 45548; //health
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[1].EffectTriggerSpell = 57073; //mana
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;	
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_PERIODIC_TRIGGER_SPELL;
		sp->eff[2].EffectTriggerSpell = 57338; //57079 well fed -> sadly this needs to be scripted to add SP or AP depending on 
		sp->eff[2].EffectAmplitude = 10000;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
		sp->DurationIndex = sp2->DurationIndex;	//same
		sp->chained_cast = dbcSpell.LookupEntryForced( 58468 );	//Hugely Well Fed
	}
	sp = dbcSpell.LookupEntryForced( 58468 );
	//if( sp != NULL)
		sp->AuraInterruptFlags = 0;

	//Goblin Barbecue Feast
	sp = dbcSpell.LookupEntryForced( 87915 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_NULL;	
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
	}
	sp2 = dbcSpell.LookupEntryForced( 45548 );
	sp = dbcSpell.LookupEntryForced( 87916 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[0].EffectTriggerSpell = 80168; //health
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[1].Effect = SPELL_EFFECT_TRIGGER_SPELL;	
		sp->eff[1].EffectTriggerSpell = 80166; //mana
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->eff[2].Effect = SPELL_EFFECT_APPLY_AURA;	
		sp->eff[2].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp->eff[2].EffectTriggerSpell = 87556; //well fed -> sadly this needs to be scripted to give some usefull stat 
		sp->eff[2].EffectAmplitude = 10000;
		sp->eff[2].EffectImplicitTargetA = EFF_TARGET_SELF; //anything
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_STAND_UP | AURA_INTERRUPT_ON_MOVEMENT;
		sp->DurationIndex = sp2->DurationIndex;	//same
	}

	//Eye of the Broodmother
	sp = dbcSpell.LookupEntryForced( 65007 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 2000; //no spams please
	}
	//Pandora's Plea
	sp = dbcSpell.LookupEntryForced( 64742 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 2000; //no spams please
	}
	//Darkmoon Card: Death
	sp = dbcSpell.LookupEntryForced( 57352 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_ANY_DAMAGE_DONE;
		sp->proc_interval = 45000;
	}
	//Pyrite Infuser
	sp = dbcSpell.LookupEntryForced( 65013 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_CRIT_ATTACK | PROC_ON_RANGED_CRIT_ATTACK ;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->proc_interval = 45000;
	}
	//Reflection of Torment
	sp = dbcSpell.LookupEntryForced( 33648 );
	//if( sp != NULL)
		sp->procFlags = PROC_ON_RANGED_CRIT_ATTACK | PROC_ON_CRIT_ATTACK;
	//Skyshatter Harness - t6 set
	sp = dbcSpell.LookupEntryForced( 38432 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; //force him to use procspell effect
		sp->eff[0].EffectTriggerSpell = 38430; 
		sp->ProcOnNameHash[0] = SPELL_HASH_STORMSTRIKE;
	}
	//Warglaive of Azzinoth set bonus
	sp = dbcSpell.LookupEntryForced( 41434 );
	//if( sp != NULL)
	{
		sp->proc_interval = 2000; //no spams please
		sp->procChance = 5;
	}
	//Parasitic Serpent : using this for custom item :P
	sp = dbcSpell.LookupEntryForced( 23867 );
	//if( sp != NULL)
	{
		sp->proc_interval = 4000; //no spams please
		sp->procFlags = PROC_ON_MELEE_ATTACK | PROC_ON_RANGED_ATTACK;
	}
	sp = dbcSpell.LookupEntryForced( 23865 );
	//if( sp != NULL)
	{
		sp->proc_interval = 1000; //no spams please
		sp->maxstack = 10; 
	}
	//Darkmoon Card: Greatness
	sp = dbcSpell.LookupEntryForced( 57345 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_CAST_SPELL | PROC_ON_ANY_DAMAGE_DONE;
		sp->procFlags2 |= PROC2_TARGET_SELF;
		sp->eff[0].EffectTriggerSpell = 60229;
	}
	//Darkmoon Card: Berserker!
	sp = dbcSpell.LookupEntryForced( 57351 );
	//if( sp != NULL)
	{
		sp->procFlags = PROC_ON_MELEE_ATTACK_EVENT;
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//tentacle call
	sp = dbcSpell.LookupEntryForced( 26391 );
	//if( sp != NULL)
	{
		sp->spell_skilline[0] = 0;
		skilllinespell * spsk = dbcSkillLineSpell.LookupEntryForced( 18994 );
		spsk->skillId = 0;
	}
	//constrictor tentacle
	sp = dbcSpell.LookupEntryForced( 64125 );
	//if( sp != NULL)
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
	sp = dbcSpell.LookupEntryForced( 64126 );
	//if( sp != NULL)
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SINGLE_ENEMY;
	//Ashtongue Talisman of Zeal
	//Flash of Light and Holy Light have a 15% chance to grant your target $40471o healing over $40471d, and your Judgements have a 50% chance to inflict $40472o damage on their target over $40472d.
	sp = dbcSpell.LookupEntryForced( 40470 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA; //aura
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; //force him to use procspell effect
		sp->eff[0].EffectTriggerSpell = 40471; 
		sp->procFlags = PROC_ON_CAST_SPELL; //add procflag here since this was not processed with the others !
		sp->procChance = 50; //well actually 15% for heal spell
		sp->proc_interval = 10000; //never ever spam anything :P
	}

	// Glyph of Drain Soul
	// Your Drain Soul ability occasionally creates an additional soul shard.
	sp = dbcSpell.LookupEntryForced( 55686 );
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = SMT_ADD_TO_EFFECT_VALUE_1;

	// Glyph of Drain Soul
	// Your Drain Soul ability occasionally creates an additional soul shard.
	sp = dbcSpell.LookupEntryForced( 58070 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;					//aura
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; //force him to use procspell effect
		sp->eff[0].EffectTriggerSpell = 58068;							// The spell that creates the soul shard.
		sp->procFlags = PROC_ON_SPELL_HIT_DOT;							// this is a channeled spell, so I hope it's the right proc.
		sp->procChance = 20;										// 20% sounds fine, but it's not blizzlike.
		sp->proc_interval = 10000;									// never ever spam anything :P <- as tudi said
		sp->ProcOnNameHash[ 0 ] = SPELL_HASH_DRAIN_SOUL;			// Will proc only on drain soul spells.
	}

	//after client 4.2.0 items started to store "out of combat" cooldown based on some new rule. To be honest it seems to be valid for any item that aplies an aura
	//Volcanic Power
	sp = dbcSpell.LookupEntryForced( 79476 );
	//if( sp != NULL)
		sp->Attributes |= ATTRIBUTES_START_COOLDOWN_AFTER_COMBAT;
	//Earthen Armor
	sp = dbcSpell.LookupEntryForced( 79475 );
	//if( sp != NULL)
		sp->Attributes |= ATTRIBUTES_START_COOLDOWN_AFTER_COMBAT;
	//Invisibility
	sp = dbcSpell.LookupEntryForced( 11392 );
	//if( sp != NULL)
		sp->Attributes |= ATTRIBUTES_START_COOLDOWN_AFTER_COMBAT;
	//Spinal Healing Injector
	sp = dbcSpell.LookupEntryForced( 82184 );
	//if( sp != NULL)
		sp->Attributes |= ATTRIBUTES_START_COOLDOWN_AFTER_COMBAT;

	//warsong gulch flags were not removed in some client rev
	sp = dbcSpell.LookupEntryForced( 23333 );
	//if( sp != NULL)
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOUNT;
	sp = dbcSpell.LookupEntryForced( 23335 );
	//if( sp != NULL)
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_MOUNT;
	//Honor Points +2000
	sp = dbcSpell.LookupEntryForced( 61700 );
	//if( sp != NULL)
		sp->eff[0].EffectBasePoints = 2000;
	//Honor Points +10000
	sp = dbcSpell.LookupEntryForced( 59869 );
	//if( sp != NULL)
		sp->eff[0].EffectBasePoints = 1000;

	//the faction gain redirect 
	sp = dbcSpell.LookupEntryForced( 57819 );	//Argent Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 1106;	
	sp = dbcSpell.LookupEntryForced( 57820 );	//Ebon Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 1098;	
	sp = dbcSpell.LookupEntryForced( 57822 );	//Wyrmrest Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 1091;	
	sp = dbcSpell.LookupEntryForced( 93795 );	//Stormwind Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 72;	
	sp = dbcSpell.LookupEntryForced( 93805 );	//Ironforge Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 47;	
	sp = dbcSpell.LookupEntryForced( 93806 );	//Darnassus Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 69;	
	sp = dbcSpell.LookupEntryForced( 93811 );	//Exodar Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 930;	
	sp = dbcSpell.LookupEntryForced( 93816 );	//Gilneas Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 1134;	
	sp = dbcSpell.LookupEntryForced( 93821 );	//Gnomeregan Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 54;	
	sp = dbcSpell.LookupEntryForced( 93825 );	//Orgrimmar Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 76;	
	sp = dbcSpell.LookupEntryForced( 93827 );	//Darkspear Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 530;	
	sp = dbcSpell.LookupEntryForced( 93828 );	//Silvermoon Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 911;	
	sp = dbcSpell.LookupEntryForced( 93830 );	//Bilgewater Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 1133;	
	sp = dbcSpell.LookupEntryForced( 94462 );	//Undercity Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 68;	
	sp = dbcSpell.LookupEntryForced( 94463 );	//Thunder Bluff Champion
	//if( sp != NULL)
		sp->eff[0].EffectMiscValue = 81;	

	//for goldsink npc - defense
	sp = CreateDummySpell( 98635 );
	sp2 = dbcSpell.LookupEntryForced( 98632 ); //Obsidian Armor
	//if( sp != NULL )
	{
		memcpy( sp, sp2, sizeof( SpellEntry ) );
		sp->Id = 98635;
		sp->NameHash = sp2->NameHash + 1;
		sp->maxstack = 100;
		sp->eff[0].EffectBasePoints = 1;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[1].Effect = SPELL_EFFECT_NULL;
		sp->eff[2].Effect = SPELL_EFFECT_NULL;
		sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
//		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->AuraInterruptFlags = 0;
		sp->DurationIndex = 1; //10 sec default. Will overwrite this
		sp->Attributes |= ATTRIBUTES_IGNORE_INVULNERABILITY;
		sp->SpellCategoriesId = 0;
		sp->AttributesExD |= SPELL_ATTR4_NOT_STEALABLE;
	}
	sp = CreateDummySpell( 35849 );
	sp2 = dbcSpell.LookupEntryForced( 35778 ); //Bloodcrystal Surge
	//if( sp != NULL )
	{
		memcpy( sp, sp2, sizeof( SpellEntry ) );
		sp->Id = 35849;
		sp->NameHash = sp2->NameHash + 1;
		sp->maxstack = 100;
		sp->eff[0].EffectBasePoints = 60;
		sp->eff[0].EffectMiscValue = 127;
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[0].EffectImplicitTargetB = EFF_TARGET_NONE;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_DAMAGE_DONE;

		sp->eff[1].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[1].EffectApplyAuraName = SPELL_AURA_MOD_HEALING_DONE;
		sp->eff[1].EffectBasePoints = 0;
		sp->eff[1].EffectMiscValue = 127;
		sp->eff[1].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->eff[1].EffectImplicitTargetB = EFF_TARGET_NONE;

		sp->eff[2].Effect = SPELL_EFFECT_NULL;
		sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
//		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		sp->AuraInterruptFlags = 0;
		sp->DurationIndex = 1; //10 sec default. Will overwrite this
		sp->Attributes |= ATTRIBUTES_IGNORE_INVULNERABILITY;
		sp->SpellCategoriesId = 0; //no dispel
		sp->AttributesExD |= SPELL_ATTR4_NOT_STEALABLE;
	}

	//boss ai has missing range
	sp = dbcSpell.LookupEntryForced( 69146 );
	//if( sp != NULL)
		sp->rangeIndex = 137;	//8 yards
	sp = dbcSpell.LookupEntryForced( 69076 );
	//if( sp != NULL)
		sp->rangeIndex = 137;	//8 yards
	sp = dbcSpell.LookupEntryForced( 70842 );
	//if( sp != NULL)
		sp->DurationIndex = 21;	//infinit
	//racial (facial) - shadowmeld
	sp = dbcSpell.LookupEntryForced( 58984 );
	//if( sp != NULL)
	{
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ENTER_COMBAT | AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_CAST_SPELL;
		sp->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN;
		sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
		DynamicCreateAssignSpellStackGroup( sp, 0, "Stealth" );
	}
	// racial - War Stomp
	sp = dbcSpell.LookupEntryForced( 20549 );
	//if( sp != NULL)
	{
		sp->eff[1].EffectRadiusIndex = sp->eff[0].EffectRadiusIndex = 14;
		sp->eff[1].EffectRadiusMaxIndex = sp->eff[0].EffectRadiusMaxIndex = 14;
		SpellEntryEffectSwap( sp, sp, 0, 1 ); //first dmg then stun to avoid removal of the stun
	}
	// racial - Gift of the Naaru
	sp = dbcSpell.LookupEntryForced( 28880 );
	//if( sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints * 100;
	}
	sp = dbcSpell.LookupEntryForced( 59545 );
	//if( sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints * 100;
	}
	sp = dbcSpell.LookupEntryForced( 59548 );
	//if( sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints * 100;
	}
	sp = dbcSpell.LookupEntryForced( 59542 );
	//if( sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints * 100;
	}
	sp = dbcSpell.LookupEntryForced( 59544 );
	//if( sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints * 100;
	}
	sp = dbcSpell.LookupEntryForced( 59547 );
	//if( sp != NULL)
	{
		SetSpellPowerCoeffsAll(sp,0.0f);
		sp->Spell_value_is_scripted = true;
		sp->c_is_flags2 |= SPELL_FLAG2_IS_VALUE_SCALED | SPELL_FLAG2_IS_VALUE_OVER_TIME;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_MOD_TOTAL_HEALTH_REGEN_PCT;
		sp->eff[0].EffectBasePoints = sp->eff[1].EffectBasePoints * 100;
	}
	//racial - Stoneform
	sp = dbcSpell.LookupEntryForced( 20594 );
	sp2 = dbcSpell.LookupEntryForced( 65116 );
	//if( sp != NULL)
	{
		sp->DurationIndex = sp2->DurationIndex;
		sp->chained_cast = sp2;
		sp2->maxstack = 1;	//this is second spell and should stack with first spell
		sp->eff[0].Effect = SPELL_EFFECT_DISPEL_MECHANIC; //not immunity, just dispel
		sp->eff[1].Effect = SPELL_EFFECT_DISPEL_MECHANIC; //not immunity, just dispel
	}
	//Two Forms
	sp = dbcSpell.LookupEntryForced( 68996 );
	//if( sp != NULL)
	{
		sp->eff[0].Effect = SPELL_EFFECT_DUMMY;	//dumym effect to remove aura that puts on us vorgen mode
	}
	//two forms event handler
	CreateDummySpell( 97704 );
	sp = dbcSpell.LookupEntryForced( 97704 );
	//if( sp != NULL )
	{
		sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp->DurationIndex = 21;	//infinit
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;					
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_PROC_TRIGGER_SPELL; 
		sp->eff[0].EffectTriggerSpell = 97709;		
		sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp->procFlags = PROC_ON_SPELL_HIT_DOT | PROC_ON_ANY_DAMAGE_DONE;	
		sp->procChance = 100;				
		sp->proc_interval = 1000;	
		sp->procFlags2 |= PROC2_TARGET_SELF;
	}
	//atered form
	sp = dbcSpell.LookupEntryForced( 97709 );
	//if( sp != NULL)
	{
//		sp->DurationIndex = 21;	//infinit
		sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;	//no actions needed ? this is handled client side
		sp->maxstack = 1;
		sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		sp->Attributes |= ATTRIBUTES_PASSIVE;
		sp->activeIconID = sp->SpellIconID;		//anything but 0 to make us send the aura packet to client :(
	}

	//missing spell visuals for 4.3.4 client. FFs did these go ?
	sp = dbcSpell.LookupEntryForced( 1126 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 212; 
	sp = dbcSpell.LookupEntryForced( 1459 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 158; 
	sp = dbcSpell.LookupEntryForced( 1991 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 107; 
	sp = dbcSpell.LookupEntryForced( 19740 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 9179; 
	sp = dbcSpell.LookupEntryForced( 20170 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 2816; 
	sp = dbcSpell.LookupEntryForced( 20217 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 9187; 
	sp = dbcSpell.LookupEntryForced( 21562 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 278; 
	sp = dbcSpell.LookupEntryForced( 27683 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 27; 
	sp = dbcSpell.LookupEntryForced( 30153 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 2816; 
	sp = dbcSpell.LookupEntryForced( 39171 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 39; 
	sp = dbcSpell.LookupEntryForced( 49977 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 15785; 
	sp = dbcSpell.LookupEntryForced( 50227 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 345; 
	sp = dbcSpell.LookupEntryForced( 51753 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11351; 
	sp = dbcSpell.LookupEntryForced( 54785 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 29; 
	sp = dbcSpell.LookupEntryForced( 57827 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 14314; 
	sp = dbcSpell.LookupEntryForced( 61316 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 12921; 
	sp = dbcSpell.LookupEntryForced( 69741 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 149; 
	sp = dbcSpell.LookupEntryForced( 70975 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 13132; 
	sp = dbcSpell.LookupEntryForced( 74491 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 15643; 
	sp = dbcSpell.LookupEntryForced( 527 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 86; 
	sp = dbcSpell.LookupEntryForced( 15473 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 3619; 
	sp = dbcSpell.LookupEntryForced( 16191 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 4279; 
	sp = dbcSpell.LookupEntryForced( 18803 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 4381; 
	sp = dbcSpell.LookupEntryForced( 25860 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 10006; 
	sp = dbcSpell.LookupEntryForced( 29313 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 6506; 
	sp = dbcSpell.LookupEntryForced( 33713 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 2736; 
	sp = dbcSpell.LookupEntryForced( 40665 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 210; 
	sp = dbcSpell.LookupEntryForced( 42292 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 86; 
	sp = dbcSpell.LookupEntryForced( 42754 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 9634; 
	sp = dbcSpell.LookupEntryForced( 43112 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 8010; 
	sp = dbcSpell.LookupEntryForced( 45281 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 10115; 
	sp = dbcSpell.LookupEntryForced( 47468 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11254; 
	sp = dbcSpell.LookupEntryForced( 47481 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11257; 
	sp = dbcSpell.LookupEntryForced( 47482 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 29; 
	sp = dbcSpell.LookupEntryForced( 47484 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11255; 
	sp = dbcSpell.LookupEntryForced( 47541 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 10755; 
	sp = dbcSpell.LookupEntryForced( 47804 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 10590; 
	sp = dbcSpell.LookupEntryForced( 52103 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11424; 
	sp = dbcSpell.LookupEntryForced( 53353 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11725; 
	sp = dbcSpell.LookupEntryForced( 54158 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11853; 
	sp = dbcSpell.LookupEntryForced( 55533 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 58; 
	sp = dbcSpell.LookupEntryForced( 61682 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11387; 
	sp = dbcSpell.LookupEntryForced( 61683 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 11387; 
	sp = dbcSpell.LookupEntryForced( 68638 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 9342; 
	sp = dbcSpell.LookupEntryForced( 69513 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 14736; 
	sp = dbcSpell.LookupEntryForced( 69700 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 14730; 
	sp = dbcSpell.LookupEntryForced( 71725 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 9736; 
	sp = dbcSpell.LookupEntryForced( 71832 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 516; 
	sp = dbcSpell.LookupEntryForced( 75077 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 4101; 
	sp = dbcSpell.LookupEntryForced( 75083 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 4101; 
	sp = dbcSpell.LookupEntryForced( 76663 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 5; 
	sp = dbcSpell.LookupEntryForced( 78777 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 12971; 
	sp = dbcSpell.LookupEntryForced( 78955 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 18943; 
	sp = dbcSpell.LookupEntryForced( 81207 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 17317; 
	sp = dbcSpell.LookupEntryForced( 81282 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 68; 
	sp = dbcSpell.LookupEntryForced( 81289 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 68; 
	sp = dbcSpell.LookupEntryForced( 82174 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 17360; 
	sp = dbcSpell.LookupEntryForced( 82705 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 17474; 
	sp = dbcSpell.LookupEntryForced( 83456 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 7769; 
	sp = dbcSpell.LookupEntryForced( 83877 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 18844; 
	sp = dbcSpell.LookupEntryForced( 84339 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 15933; 
	sp = dbcSpell.LookupEntryForced( 84718 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 12229; 
	sp = dbcSpell.LookupEntryForced( 85285 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 90; 
	sp = dbcSpell.LookupEntryForced( 85547 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 785; 
	sp = dbcSpell.LookupEntryForced( 86105 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 785; 
	sp = dbcSpell.LookupEntryForced( 86206 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 18229; 
	sp = dbcSpell.LookupEntryForced( 87229 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 18430; 
	sp = dbcSpell.LookupEntryForced( 87918 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 51; 
	sp = dbcSpell.LookupEntryForced( 88632 );
	//if( sp != NULL)
	if( sp->SpellVisual[0] == 0 )
		sp->SpellVisual[0] = 9628; 

	//frikkin fligth mounts. How do i really detect these ?
/*	{
		uint32 spell_list[] = {59961,32292,32246,32296,32243,60002,44151,49193,41517,41518,60024,88746,88331,54729,71810,46197,46199,75973,32246,32289,32297,37015,32295,32290,32242,66088,32240,39802,66087,93326,63963,67336,39800,59570,61997,39801,41516,60021,88718,32345,69395,41513,93623,63796,44744,61309,63956,72286,72807,32245,39798,61294,32235,65439,75596,44153,61451,32239,88741,88744,88742,88335,64927,88990,41515,43927,75614,58615,59569,32244,59996,59568,61996,72808,74856,59976,59650,71342,41514,59567,40192,61229,61230,63844,60025,0};
		uint32 i = 0;
		while( spell_list[i] != 0 )
		{
			sp = dbcSpell.LookupEntryForced( spell_list[i] );
			//there's got to be a better way to detect flying mounts and their speeds
//			if( strstr( sp->ToolTip, "flight speed") )
			{
				sp->c_is_flags2 |= SPELL_FLAG2_IS_FLY_MOUNT;
			}
			i++;
		}
	}*/

	//not sure this is correct. Made it for traplauncher 
	dbcSpell.LookupEntryForced( 60192 )->ReplacingSpell = 1499;
	dbcSpell.LookupEntryForced( 60192 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 82939 )->ReplacingSpell = 13813;
	dbcSpell.LookupEntryForced( 82939 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 82941 )->ReplacingSpell = 13809;
	dbcSpell.LookupEntryForced( 82941 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 82945 )->ReplacingSpell = 13795;
	dbcSpell.LookupEntryForced( 82945 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 82948 )->ReplacingSpell = 34600;
	dbcSpell.LookupEntryForced( 82948 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 92315 )->ReplacingSpell = 11366;
	dbcSpell.LookupEntryForced( 92315 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 82928 )->ReplacingSpell = 19434;
	dbcSpell.LookupEntryForced( 82928 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 101062 )->ReplacingSpell = 2061;
	dbcSpell.LookupEntryForced( 101062 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 89420 )->ReplacingSpell = 689;
	dbcSpell.LookupEntryForced( 89420 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 81170 )->ReplacingSpell = 6785;
	dbcSpell.LookupEntryForced( 81170 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 88685 )->ReplacingSpell = 88625;
	dbcSpell.LookupEntryForced( 88685 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 88684 )->ReplacingSpell = 88625;
	dbcSpell.LookupEntryForced( 88684 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 92283 )->ReplacingSpell = 82731;
	dbcSpell.LookupEntryForced( 92283 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 92284 )->ReplacingSpell = 82731;
	dbcSpell.LookupEntryForced( 92284 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;
	dbcSpell.LookupEntryForced( 86213 )->ReplacingSpell = 86121;
	dbcSpell.LookupEntryForced( 86213 )->c_is_flags2 |= SPELL_FLAG2_IS_NON_CLIENT_CASTABLE;

	//do not save these auras on logout 
	dbcSpell.LookupEntryForced( 73762 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73824 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73825 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73826 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73827 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73828 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;

	dbcSpell.LookupEntryForced( 73816 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73818 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73819 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73820 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73821 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 73822 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;

	dbcSpell.LookupEntryForced( 69127 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;

	dbcSpell.LookupEntryForced( 33943 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;	//prowl

	dbcSpell.LookupEntryForced( 40120 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;	//prowl

	dbcSpell.LookupEntryForced( 23333 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;	
	dbcSpell.LookupEntryForced( 23335 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;	
	dbcSpell.LookupEntryForced( 34976 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;	

	//do not cast these on login or learn 
	dbcSpell.LookupEntryForced( 44440 )->c_is_flags |= SPELL_FLAG_IS_CONDITIONAL_PASSIVE_CAST;
	dbcSpell.LookupEntryForced( 44441 )->c_is_flags |= SPELL_FLAG_IS_CONDITIONAL_PASSIVE_CAST;

	dbcSpell.LookupEntryForced( 110051 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
	dbcSpell.LookupEntryForced( 86461 )->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;

	//these masks were generated by external tool
	sp = dbcSpell.LookupEntryForced( 2367 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 2374 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 3160 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 3164 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 7844 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 8212 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 10667 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 10669 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 11328 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 11334 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 11390 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 11405 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 11406 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 11474 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 16322 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 16323 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 16329 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 17038 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 17537 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 17538 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 17539 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 17624 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 17626 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 17627 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 17628 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 17629 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 21920 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 26276 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28486 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28488 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28490 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28491 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28493 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28497 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28501 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28503 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 28518 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 28519 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 28520 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 28521 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 28540 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 33720 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 33721 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 33726 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 38954 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 40567 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=7;
	} 
	sp = dbcSpell.LookupEntryForced( 40568 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=7;
	} 
	sp = dbcSpell.LookupEntryForced( 40572 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=7;
	} 
	sp = dbcSpell.LookupEntryForced( 40573 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=7;
	} 
	sp = dbcSpell.LookupEntryForced( 40575 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=7;
	} 
	sp = dbcSpell.LookupEntryForced( 40576 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=7;
	} 
	sp = dbcSpell.LookupEntryForced( 41608 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=11;
	} 
	sp = dbcSpell.LookupEntryForced( 41609 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=11;
	} 
	sp = dbcSpell.LookupEntryForced( 41610 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=11;
	} 
	sp = dbcSpell.LookupEntryForced( 41611 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=11;
	} 
	sp = dbcSpell.LookupEntryForced( 42735 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 45373 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 46837 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=11;
	} 
	sp = dbcSpell.LookupEntryForced( 46839 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=11;
	} 
	sp = dbcSpell.LookupEntryForced( 53746 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 53748 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 53749 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 53752 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 53755 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 53758 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 53760 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 54212 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 54452 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 54494 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 60340 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 60341 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 60344 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 60345 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 60346 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 62380 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 67016 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 67017 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 67018 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=3;
	} 
	sp = dbcSpell.LookupEntryForced( 673 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 2378 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 2380 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 3166 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 3219 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 3220 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 3222 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 3223 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 3593 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 10668 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 10692 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 10693 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 11319 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 11348 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 11349 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 11364 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 11371 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 11396 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 15231 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 15233 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 16321 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 16325 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 16326 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 16327 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 17535 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 24361 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 24363 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 24382 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 24383 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 24417 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 27652 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 27653 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 28502 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 28509 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 28514 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 29348 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 39625 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 39626 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 39627 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 39628 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 53747 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 53751 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 53763 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 53764 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 60343 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 60347 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2;
	} 
	sp = dbcSpell.LookupEntryForced( 18125 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 18141 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 19705 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 19706 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 19708 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 19709 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 19710 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 19711 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 23697 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 24799 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 24870 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 25694 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 25941 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33254 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33256 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33257 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33259 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33261 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33263 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33265 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33268 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 33272 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 35272 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 40323 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 42293 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 43764 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 43771 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44097 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44098 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44099 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44100 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44101 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44102 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44104 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44105 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 44106 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 45245 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 45619 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 46682 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 46687 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 46899 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 53284 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57079 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57097 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57100 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57102 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57107 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57111 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57139 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57286 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57288 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57291 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57294 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57325 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57327 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57329 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57332 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57334 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57356 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57358 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57360 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57363 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57365 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57367 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57371 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57373 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57399 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 58468 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 58479 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 59230 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 59690 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 59699 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 62349 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 64057 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 65247 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 65365 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 65410 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 65412 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 65414 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 65415 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 65416 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 66623 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 66624 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 69559 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 19740 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8352;
		sp->StackGroupMasks32[4]|=2176;
	} 
	sp = dbcSpell.LookupEntryForced( 56520 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8352;
	} 
	sp = dbcSpell.LookupEntryForced( 6673 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=16576;
		sp->StackGroupMasks32[4]|=32;
	} 
	sp = dbcSpell.LookupEntryForced( 56521 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8448;
		sp->StackGroupMasks32[3]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 20217 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8704;
		sp->StackGroupMasks32[4]|=1048576;
	} 
	sp = dbcSpell.LookupEntryForced( 90363 ); //Embrace of the Shale Spider
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8704;
		sp->StackGroupMasks32[3]|=1310720;
	} 
	sp = dbcSpell.LookupEntryForced( 43223 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8704;
	} 
	sp = dbcSpell.LookupEntryForced( 56525 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8704;
	} 
	sp = dbcSpell.LookupEntryForced( 58054 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8704;
	} 
	sp = dbcSpell.LookupEntryForced( 72586 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=8704;
	} 
	sp = dbcSpell.LookupEntryForced( 20911 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=9216;
		sp->StackGroupMasks32[2]|=-1207959552;
	} 
	sp = dbcSpell.LookupEntryForced( 23415 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=10240;
	} 
	sp = dbcSpell.LookupEntryForced( 41450 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=10240;
	} 
	sp = dbcSpell.LookupEntryForced( 32770 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=12288;
	} 
	sp = dbcSpell.LookupEntryForced( 55749 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=294912;
	} 
	sp = dbcSpell.LookupEntryForced( 8647 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=327680;
		sp->StackGroupMasks32[4]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 7386 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=393216;
		sp->StackGroupMasks32[4]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 770 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=4718592;
		sp->StackGroupMasks32[4]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 16857 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=4718592;
	} 
	sp = dbcSpell.LookupEntryForced( 56626 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=5242880;
	} 
	sp = dbcSpell.LookupEntryForced( 16231 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=6291456;
	} 
	sp = dbcSpell.LookupEntryForced( 55610 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=41943040;
		sp->StackGroupMasks32[4]|=4096;
	} 
	sp = dbcSpell.LookupEntryForced( 8515 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=50331648;
	} 
	sp = dbcSpell.LookupEntryForced( 17007 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=335544320;
		sp->StackGroupMasks32[4]|=256;
	} 
	sp = dbcSpell.LookupEntryForced( 29801 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=402653184;
	} 
	sp = dbcSpell.LookupEntryForced( 53137 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=536870912;
		sp->StackGroupMasks32[4]|=128;
		sp->StackGroupMasks32[1]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 19506 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=1073741824;
		sp->StackGroupMasks32[4]|=128;
		sp->StackGroupMasks32[1]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 30802 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[0]|=2147483648;
		sp->StackGroupMasks32[4]|=128;
		sp->StackGroupMasks32[1]|=1;
	} 
	sp = dbcSpell.LookupEntryForced( 33878 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=18;
	} 
	sp = dbcSpell.LookupEntryForced( 33876 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=20;
	} 
	sp = dbcSpell.LookupEntryForced( 46856 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=24;
	} 
/*	sp = dbcSpell.LookupEntryForced( 24907 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=160;
	} */
	sp = dbcSpell.LookupEntryForced( 51466 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=192;
		sp->StackGroupMasks32[4]|=256;
	} 
	sp = dbcSpell.LookupEntryForced( 11095 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=1280;
		sp->StackGroupMasks32[4]|=268435456;
	} 
	sp = dbcSpell.LookupEntryForced( 11180 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=1536;
	} 
	sp = dbcSpell.LookupEntryForced( 51099 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=18432;
		sp->StackGroupMasks32[4]|=536870912;
	} 
	sp = dbcSpell.LookupEntryForced( 48506 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=20480;
		sp->StackGroupMasks32[4]|=536870912;
	} 
	sp = dbcSpell.LookupEntryForced( 1490 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=24576;
		sp->StackGroupMasks32[4]|=536870912;
	} 
	sp = dbcSpell.LookupEntryForced( 54646 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=557056;
	} 
	sp = dbcSpell.LookupEntryForced( 52109 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=589824;
	} 
	sp = dbcSpell.LookupEntryForced( 57658 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=1074397184;
	} 
	sp = dbcSpell.LookupEntryForced( 53646 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=786432;
	} 
	sp = dbcSpell.LookupEntryForced( 33600 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=2144337920;
	} 
	sp = dbcSpell.LookupEntryForced( 33191 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=2145386496;
	} 
	sp = dbcSpell.LookupEntryForced( 45477 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[1]|=2147483648;
		sp->StackGroupMasks32[4]|=4194304;
		sp->StackGroupMasks32[2]|=8;
	} 
	sp = dbcSpell.LookupEntryForced( 48483 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=9;
		sp->StackGroupMasks32[4]|=4194304;
	} 
	sp = dbcSpell.LookupEntryForced( 53695 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=10;
		sp->StackGroupMasks32[4]|=4194304;
	} 
	sp = dbcSpell.LookupEntryForced( 6343 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=12;
		sp->StackGroupMasks32[4]|=4194304;
	} 
	sp = dbcSpell.LookupEntryForced( 5570 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=112;
	} 
	sp = dbcSpell.LookupEntryForced( 13218 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=2176;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 19434 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=2304;
	} 
	sp = dbcSpell.LookupEntryForced( 12294 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=2560;
	} 
	sp = dbcSpell.LookupEntryForced( 46910 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=3072;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 99 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=36864;
		sp->StackGroupMasks32[4]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 702 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=40960;
		sp->StackGroupMasks32[4]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 1160 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=49152;
		sp->StackGroupMasks32[4]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 8076 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=327680;
	} 
	sp = dbcSpell.LookupEntryForced( 57330 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=393216;
		sp->StackGroupMasks32[4]|=32;
	} 
	sp = dbcSpell.LookupEntryForced( 469 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=2621440;
		sp->StackGroupMasks32[4]|=524288;
		sp->StackGroupMasks32[0]|=16384;
	} 
	sp = dbcSpell.LookupEntryForced( 6307 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=3145728;
		sp->StackGroupMasks32[4]|=524288;
	} 
	sp = dbcSpell.LookupEntryForced( 1459 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=20971520;
		sp->StackGroupMasks32[4]|=132096;
	} 
	sp = dbcSpell.LookupEntryForced( 54424 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=58720256;
		sp->StackGroupMasks32[4]|=3072;
	} 
	sp = dbcSpell.LookupEntryForced( 47930 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=-1275068416;
	} 
	sp = dbcSpell.LookupEntryForced( 20138 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[2]|=-1073741824;
	} 
	sp = dbcSpell.LookupEntryForced( 14892 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=5;
		sp->StackGroupMasks32[4]|=8192;
	} 
	sp = dbcSpell.LookupEntryForced( 14893 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=5;
	} 
	sp = dbcSpell.LookupEntryForced( 16176 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=6;
		sp->StackGroupMasks32[4]|=8192;
	} 
	sp = dbcSpell.LookupEntryForced( 16177 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=6;
	} 
	sp = dbcSpell.LookupEntryForced( 1714 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=968;
		sp->StackGroupMasks32[4]|=16777216;
	} 
	sp = dbcSpell.LookupEntryForced( 31589 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=976;
	} 
	sp = dbcSpell.LookupEntryForced( 5760 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=992;
		sp->StackGroupMasks32[4]|=16777216;
	} 
	sp = dbcSpell.LookupEntryForced( 122 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1024;
	} 
	sp = dbcSpell.LookupEntryForced( 33395 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1024;
	} 
	sp = dbcSpell.LookupEntryForced( 55080 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1024;
	} 
	sp = dbcSpell.LookupEntryForced( 1126 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=2048;
		sp->StackGroupMasks32[4]|=1048576;
	} 
	sp = dbcSpell.LookupEntryForced( 21562 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=4096;
	} 
	sp = dbcSpell.LookupEntryForced( 72590 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=4096;
	} 
	sp = dbcSpell.LookupEntryForced( 27683 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=8192;
	} 
/*	sp = dbcSpell.LookupEntryForced( 348 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=16384;
	} 
	sp = dbcSpell.LookupEntryForced( 30108 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=16384;
	}  */
	sp = dbcSpell.LookupEntryForced( 588 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=4227072;
	} 
	sp = dbcSpell.LookupEntryForced( 73413 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=4227072;
	} 
	sp = dbcSpell.LookupEntryForced( 79104 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=65536;
	} 
	sp = dbcSpell.LookupEntryForced( 79105 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=65536;
	} 
	sp = dbcSpell.LookupEntryForced( 79060 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=131072;
	} 
	sp = dbcSpell.LookupEntryForced( 79061 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=131072;
	} 
	sp = dbcSpell.LookupEntryForced( 79062 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1310720;
	} 
	sp = dbcSpell.LookupEntryForced( 79063 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1310720;
	} 
	sp = dbcSpell.LookupEntryForced( 79101 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1572864;
	} 
	sp = dbcSpell.LookupEntryForced( 79102 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1572864;
	} 
	sp = dbcSpell.LookupEntryForced( 20154 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 20164 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 20165 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 31801 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 12880 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 57514 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 57518 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 5677 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=50331648;
	} 
	sp = dbcSpell.LookupEntryForced( 6562 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 28878 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 8042 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=268435456;
		sp->StackGroupMasks32[4]|=4194304;
		sp->StackGroupMasks32[2]|=8;
	} 
	sp = dbcSpell.LookupEntryForced( 57386 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=536870912;
		sp->StackGroupMasks32[1]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 49016 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=1073741824;
		sp->StackGroupMasks32[4]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 57933 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[3]|=2147483648;
		sp->StackGroupMasks32[4]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 12292 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=17;
	} 
	sp = dbcSpell.LookupEntryForced( 12042 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=18;
	} 
	sp = dbcSpell.LookupEntryForced( 34471 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=20;
	} 
	sp = dbcSpell.LookupEntryForced( 31884 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=24;
	} 
	sp = dbcSpell.LookupEntryForced( 19372 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 2825 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 35346 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16;
	} 
	sp = dbcSpell.LookupEntryForced( 93435 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=32;
	} 
	sp = dbcSpell.LookupEntryForced( 8073 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=32;
	} 
	sp = dbcSpell.LookupEntryForced( 465 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=64;
	} 
	sp = dbcSpell.LookupEntryForced( 8071 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=64;
	} 
	sp = dbcSpell.LookupEntryForced( 3149 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=256;
	} 
	sp = dbcSpell.LookupEntryForced( 14100 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=256;
	} 
	sp = dbcSpell.LookupEntryForced( 51698 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=256;
	} 
	sp = dbcSpell.LookupEntryForced( 8285 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=256;
	} 
	sp = dbcSpell.LookupEntryForced( 82930 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=512;
	} 
	sp = dbcSpell.LookupEntryForced( 31876 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=33280;
	} 
	sp = dbcSpell.LookupEntryForced( 34460 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=512;
	} 
	sp = dbcSpell.LookupEntryForced( 5675 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=2048;
	} 
	sp = dbcSpell.LookupEntryForced( 53290 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=4096;
	} 
	sp = dbcSpell.LookupEntryForced( 8512 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=4096;
	} 
	sp = dbcSpell.LookupEntryForced( 19746 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16384;
	} 
	sp = dbcSpell.LookupEntryForced( 87718 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16384;
	} 
	sp = dbcSpell.LookupEntryForced( 44561 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=32768;
	} 
	sp = dbcSpell.LookupEntryForced( 23863 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=32768;
	} 
	sp = dbcSpell.LookupEntryForced( 30293 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=32768;
	} 
	sp = dbcSpell.LookupEntryForced( 34914 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=32768;
	} 
	sp = dbcSpell.LookupEntryForced( 23723 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=65536;
	} 
/*	sp = dbcSpell.LookupEntryForced( 24858 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=65536;
	} */
	sp = dbcSpell.LookupEntryForced( 2895 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=65536;
	} 
	sp = dbcSpell.LookupEntryForced( 47236 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=131072;
	} 
	sp = dbcSpell.LookupEntryForced( 8227 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=131072;
	} 
	sp = dbcSpell.LookupEntryForced( 77746 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=131072;
	} 
	sp = dbcSpell.LookupEntryForced( 20043 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=262144;
	} 
	sp = dbcSpell.LookupEntryForced( 8184 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=262144;
	} 
	sp = dbcSpell.LookupEntryForced( 19726 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=262144;
	} 
	sp = dbcSpell.LookupEntryForced( 7235 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=262144;
	} 
	sp = dbcSpell.LookupEntryForced( 13864 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=524288;
	} 
	sp = dbcSpell.LookupEntryForced( 90364 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=524288;
	} 
	sp = dbcSpell.LookupEntryForced( 90363 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=1048576;
	} 
	sp = dbcSpell.LookupEntryForced( 35387 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 33911 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=2097152;
	} 
	sp = dbcSpell.LookupEntryForced( 7272 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=4194304;
	} 
	sp = dbcSpell.LookupEntryForced( 90314 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=4194304;
	} 
	sp = dbcSpell.LookupEntryForced( 51692 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=4194304;
	} 
	sp = dbcSpell.LookupEntryForced( 16952 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=142606336;
	} 
	sp = dbcSpell.LookupEntryForced( 4102 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 45876 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 3604 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 16511 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 19820 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=8388608;
	} 
	sp = dbcSpell.LookupEntryForced( 19272 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16777216;
	} 
	sp = dbcSpell.LookupEntryForced( 21547 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16777216;
	} 
	sp = dbcSpell.LookupEntryForced( 60626 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16777216;
	} 
	sp = dbcSpell.LookupEntryForced( 246 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=16777216;
	} 
	sp = dbcSpell.LookupEntryForced( 15273 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 30213 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 54680 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 82654 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 9347 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 11175 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=33554432;
	} 
	sp = dbcSpell.LookupEntryForced( 24423 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 81130 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 26016 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=67108864;
	} 
	sp = dbcSpell.LookupEntryForced( 9591 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=134217728;
	} 
	sp = dbcSpell.LookupEntryForced( 3242 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=134217728;
	} 
	sp = dbcSpell.LookupEntryForced( 32441 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=134217728;
	} 
	sp = dbcSpell.LookupEntryForced( 51682 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=134217728;
	} 
	sp = dbcSpell.LookupEntryForced( 17793 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=268435456;
	} 
	sp = dbcSpell.LookupEntryForced( 34889 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=536870912;
	} 
	sp = dbcSpell.LookupEntryForced( 15797 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=536870912;
	} 
	sp = dbcSpell.LookupEntryForced( 58410 ); 
	{ 
		sp->HasStackGroupFlags=1;
		sp->StackGroupMasks32[4]|=536870912;
	} 

	//move speed while not in combat - Hurry it up, Buddy
	sp2 = CreateDummySpell( 51532 );
	//if( sp != NULL )
	{
		sp2->DurationIndex = 21;
		sp2->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
		sp2->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
		sp2->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
		sp2->eff[0].EffectAmplitude = 4000;
	}
	sp2 = CreateDummySpell( 51559 );
	sp = dbcSpell.LookupEntryForced( 72883 );
	//if( sp != NULL )
	{
		memcpy( sp2, sp, sizeof( SpellEntry ) );
		sp2->Id = 51559;
		sp2->NameHash = sp2->NameHash + 1;
		sp2->AuraInterruptFlags = AURA_INTERRUPT_ON_ENTER_COMBAT | AURA_INTERRUPT_ON_START_ATTACK | AURA_INTERRUPT_ON_CAST_SPELL;
		sp2->AuraInterruptFlags |= AURA_INTERRUPT_ON_ANY_DAMAGE_TAKEN | AURA_INTERRUPT_ON_MOUNT | AURA_INTERRUPT_ON_STEALTH | AURA_INTERRUPT_ON_DIRECT_DAMAGE;
		sp2->spell_id_client = 72883;
		sp2->eff[0].EffectBasePoints = 350;
		sp2->DurationIndex = 21;
	}

	//imp is too small compared to retail
	CreatureFamilyEntry *ImpFamily = dbcCreatureFamily.LookupEntryForced( 23 );
	if( ImpFamily != NULL && ImpFamily->minsize == ImpFamily->maxsize && ImpFamily->minsize == 0.5f )
	{
		ImpFamily->minsize = 1.5f;
		ImpFamily->maxsize = 1.5f;
	}

#ifdef EPL_REALM_MOD
	// This is optional for EPL realm. Create the enchants item will get randomized on 
	if( sWorld.getIntRate( INTRATE_RANDOMIZEITEMS1 ) )
	{
		EnchantEntry *sp = dbcEnchant.LookupRow( dbcEnchant.GetNumRows() - 1 );
		EPL_SpellsStartAtId = EPL_Initialized = sp->Id + 10;
		//generate enchantments
		uint32 SingleDmgEnchantSpells[] = { 38739,66880,46460,41390,79710,59248,50804,91622,36712,51243,37271,29956,61593,59715,57058,34829,52660,52814,55748,28299,60443,38183,57094,60542,76683,71938,79308,50843,22312,96804,99647,99400,43661,69576,77069,61584,38851,55703,29765,41937,53769,90625,95729,41471,41487,46101,40633,31984,90305,76824,66796,70754,49110,99811,99996,107785,62998,81527,49111,62867,40728,100875,60239,69520,97029,33051,59750,66903,102593,30383,28308,20695,52053,70161,71466,38374,33813,43427,61269,76876,41579,107789,104019,80659,56513,107980,74394,97306,89641,97474,88963,93278,89087,20565,99867,100868,41374,76765,87898,102193,72360,37104,68982,102239,63689,96918,54135,36288,102063,64395,99814,84763,62327,26339,20688,76874,69743,77570,107787,60742,59717,76008,76572,69920,86182,110102,62649,96348,82221,101688,84522,81770,53193,99148,76369,105858,100931,71544,96346,37138,43137, 0 };
		uint32 AOEDmgEnchantSpells[] = { 22694,56279,38809,57432,47790,34785,29885,37567,74392,68958,99917,47444,70123,55974,54966,69080,96871,71904,37106,37476,29680,53273,62682,48734,62598,62937,19798,52341,52576,45662,73576,89816,95443,63821,69921,82789,97667,40871,66496,66519,45779,41277,76718,20203,97721,76160,71393,73547,74541,69273,73722,39323,20694,69934,80342,31303,82769,72247,62054,64972,52960,84544,61886,46317,75821,31463,21058,74648,28085,57976,28062,69781,62465,64875,65085,49033,60835,33671,69642,73527,66881,89133,40314,85980,96489,78862,92958,77475, 0 };
		uint32 SingleDOTDmgEnchantSpells[] = { 60204,61272,88175,91016,43439,59712,69603,55264,67722,56130,90764,76093,77786,61563,65810,65814,69969,64157,59972,65080,40585,72330,68315,105841,89212,64740,56092,93327,65866,74562,101166,49243,37579,42395,62844,75603,90551,78941,41917,62997,74538,84642,99650,36965,42397,93277,82753,92630,40685,91324,72368,98006,98015,84850,74792,57407,76188,43522,39029, 0 };
		uint32 AOEDOTDmgEnchantSpells[] = { 68605,59206,29491,49080,92068, 0 };
		uint32 PersistentAOEDOTDmgEnchantSpells[] = { 20680,30129,38917,28794,100154,26540,56897, 0 };
//		uint32 SelfBuffPosEnchantSpells[] = { 33807,52635,96980,33479,71258,67631,64883,71635,67355,107947,102747,95762,92186,97009,91141,45431,24544,28770,81700,17351,34199,102659,32600,102741,51439,35078,80597,10351,91374,52630,37526,49724,91344,26297,59626,33735,92199,35131,66179,83493,91147,91149,79561,35778,18828,70960,25701,78969,4083,33908,84969,84966,92937,101682,91173,73422,101515,26168,53386,5256,91138,6813,75489,78993,3151,43747,54386,1850,43735,2583,40402,52879,4524,66800,87780,17152,101261,96911,52467,95879,23145,51721,59737,25696,24355,29007,14822,80215,79475,24884,49623,61810,43749,48838,78939,107951,3443,34210,91624,92123,31915,12880,37605,60075,72143,76100,64368,97010,87354,4086,21878,51946,91155,91368,50336,91355,81179,107988,28765,4104,39530,43817,68785,67699,102662,85690,28766,69187,72414,3149,84308,65011,43742,92172,17540,10342,78530,43713,18787,12896,20925,60177,92222,3248,54657,71569,53762,107880,84963,28515,89906,31930,47426,92179,28778,15602,85525,43819,102472,60158,19634,24268,107986,85524,47940,823,92349,3238,107823,33719,6314,6280,40464,5426,82176,70806,36828,3045,69277,20128,112,9906,22067,99619,35159,35158,60180,24662,60214,15604,9657,84827,31905,69056,62836,79437,83567,44605,3742,50204,4941,21991,45049,33668,24043,87228,71633,107949,44055,40408,33774,50713,65949,107982,66889,85521,67391,81707,101678,95712, 0 };
		uint32 SelfBuffPosEnchantSpells[] = { 33807,52635,96980,33479,71258,67631,64883,71635,67355,107947,102747,95762,92186,97009,91141,45431,24544,28770,81700,17351,34199,102659,32600,102741,51439,82604,35078,80597,10351,91374,52630,37526,49724,91344,26297,59626,33735,92199,35131,66179,83493,91147,91149,79561,35778,18828,70960,25701,4083,84969,84966,91173,73422,101515,26168,53386,5256,91138,75489,78993,5915,3151,43747,54386,1850,40402,52879,4524,66800,87780,17152,101261,96911,52467,95879,23145,59737,25696,24355,29007,14822,80215,79475,24884,49623,61810,43749,48838,78939,107951,3443,34210,91624,92123,31915,12880,37605,72143,76100,64368,97010,87354,21878,51946,91155,91368,91355,81179,107988,28765,4104,39530,43817,67699,102662,85690,98932,28766,72414,3149,84308,65011,52268,43742,92172,17540,10342,78530,43713,18787,20925,60177,92222,3248,54657,71569,63391,53762,107880,84963,28515,89906,31930,47426,92179,28778,15602,85525,43819,60158,19634,24268,107986,85524,47940,28768,92349,3238,107823,40464,5426,82176,70806,36828,3045,69277,20128,112,9906,22067,99619,35159,35158,60180,24662,60214,15604,9657,31905,69056,62836,79437,83567,63089,44605,69901,3742,50204,49676,4941,45049,33668,24043,87228,71633,107949,44055,40408,33774,50713,65949,107982,66889,85521,67391,81707,95712, 0 };
//		uint32 ShieldEnchantSpells[] = { 84567,49609,25059,26666,69187,82627,71586,80341,57350,103562,96945,35064,29880,30456,20697,44291,41475,93745,69069,62274,55019,96988,37729,90522, 0 };
		uint32 ShieldEnchantSpells[] = { 17549,49609,7234,7239,82627,71586,7249,80341,57350,57350,96945,35064,7254,30456,20697,44291,41475,93745,7244,69069,62274,55019,96988,90522, 0 };
		uint32 SingleHealEnchantSpells[] = { 97980,89078,64569,26606,38349,50643,41237,5174,45470,15503,3368,3359,8141,55600,47966,47454,101690,8812,36144,53144,67486,11895,29383,60986,54206,41306,93097,67489,82184, 0 };
		uint32 AOEHealEnchantSpells[] = { 0 };
//		uint32 SingleHOTHealEnchantSpells[] = { 36472,4970,85636,82531,7291,20631,8348,53608,43421,36968,50750,38325,20701,60908,62528, 0 };
		uint32 SingleHOTHealEnchantSpells[] = { 36472,4970,85636,7291,20631,8348,53608,43421,36968,50750,38325,20701,84472,60908,110008, 0 };
		uint32 AOEHOTHealEnchantSpells[] = { 0 };
//		uint32 SelfBuff2EffPosEnchantSpells[] = { 32607,29326,33400,13750,23780,52624,71485,71491,23698,35733,35927,58469,33662,51987,59658,59657,24689,35081,35087,35084,69638,91047,107896,109706,64440,13744,43242,18140,71870,35163,3269,23733,82836,64790,54790,34932,37786,29131,3385,56310,32362,56439,84968,43716,34321,20578,106664,27545,24389,77238,13168,72418,105919,17447,41261,79735,20052,6614,77080,90996,1138,30841,32358,12292,73549,79462,54443,69647,31567,93772,43710,24427,26263,91007,45053,52972,31842,58592,73552,44505,14872,73550,25891,26600,93774,15061,19812,55285,42705,59697,35165,12051,52869,38929,84331,16551,806,100093,29039,16560,99621,55067,2639,91836,67671,31022,16470,83497,25990,833,24998,65667,45019,67364,20007,51954,49857,90989,71401,12472,61426,35464,81227,28494,52022,26551,13578,63250,50905,53655,4948,73522,74245,55428,45478,45479,28093,36274,50413,109993,17528,12733,89542,53753,24542,25697,63602,88481,60617,75456,51271,28506,71487,65014,50054,67695,24546,43128,21955,60065,29055,76149,77912,62338,96263,69207,22850,56186,89267,46785,12040,41371,58268,71605,3574,91019,7020,31045,90896,17154,53373,81220,91013,50983,50994,107948,53365,83507,55233,89091,52309,81211, 0 };
		uint32 SelfBuff2EffPosEnchantSpells[] = { 32607,29326,33400,13750,23780,52624,71485,71491,23698,35733,35927,58469,33662,51987,59658,59657,24689,35081,35087,35084,69638,91047,107896,109706,64440,13744,43242,18140,71870,35163,3269,23733,82836,64790,54790,34932,37786,29131,3385,56310,32362,56439,84968,43716,34321,20578,106664,27545,24389,77238,13168,72418,105919,17447,41261,79735,20052,6614,77080,90996,1138,30841,32358,12292,73549,79462,54443,69647,31567,93772,43710,24427,26263,91007,45053,52972,31842,58592,73552,73552,14872,73550,25891,26600,93774,15061,19812,55285,42705,59697,35165,12051,52869,38929,84331,16551,806,100093,29039,16560,99621,55067,2639,91836,67671,31022,16470,83497,25990,833,24998,65667,45019,67364,20007,51954,49857,90989,71401,12472,61426,35464,81227,28494,52022,26551,13578,63250,50905,53655,4948,73522,74245,55428,45478,45479,28093,36274,50413,109993,17528,12733,89542,53753,24542,25697,63602,88481,60617,75456,51271,28506,71487,65014,50054,67695,24546,43128,21955,60065,29055,76149,76149,62338,96263,69207,22850,56186,89267,46785,12040,41371,58268,71605,3574,91019,7020,31045,90896,17154,53373,81220,91013,50983,50994,107948,53365,83507,55233,89091,52309,81211, 0 };
		uint32 CC1TargetInstantEnchantSpells[] = { 13009,29907,64376,6958,7122,51135,46266,7485,271,22745,25373,79704,40565,4280,59723,53372,37727,49617, 0 };
		uint32 CC1TargetAurEnchantSpells[] = { 33487,18118,85387,3247,12248,9482,36333,57063,34794,36482,24686,35914,26641,89766,6253,29679,5211,25515,86814,31125,81049,76335,113,29991,96293,50434,35317,29290,34087,1139,35101,77993,41965,108101,52883,18381,25809,3409,30981,8282,18223,38010,34812,76394,36276,5271,23262,4805,34089,56425,28772,339,7140,38051,78397,37937,27868,63685,29544,1330,26108,13490,19397,29306,7093,15128,10730,32904,51137,4243,41047,31404,15487,27559,6726,18498,18469,18425,3510,24259,32080,35353,7399,21898,28887,30984, 0 };
		uint32 ManualAddedEnchantSpells[] = { 0 };
		uint32 *ListofAttackProcs[] = { CC1TargetAurEnchantSpells, CC1TargetInstantEnchantSpells, SingleDmgEnchantSpells, AOEDmgEnchantSpells, SingleDOTDmgEnchantSpells, AOEDOTDmgEnchantSpells, PersistentAOEDOTDmgEnchantSpells, SelfBuffPosEnchantSpells, NULL };
		uint32 *ListofDefProcs[] = { ShieldEnchantSpells, ShieldEnchantSpells, ShieldEnchantSpells, SingleHealEnchantSpells, AOEHealEnchantSpells, SingleHOTHealEnchantSpells, SelfBuffPosEnchantSpells, SelfBuff2EffPosEnchantSpells, ManualAddedEnchantSpells, NULL };

		struct RandomStatEnchantStruct
		{
			char *Name;
			int32 Type;
			int32 Min,Max;
		};
		RandomStatEnchantStruct StatModEnchants[] = { 
			{ "Mana", POWER, 200, 500 },
			{ "Health", HEALTH, 200, 500 },
			{ "Agility", AGILITY, 10, 100 },//avg 25
			{ "Strength", STRENGTH, 10, 100 }, //avg 36
			{ "Intelect", INTELLECT, 10, 100 },//avg 40
			{ "Spirit", SPIRIT, 10, 100 },//avg 40
			{ "Stamina", STAMINA, 10, 100 }, //avg 50
			{ "Dodge Rating", DODGE_RATING, 35, 140 },//avg 70
			{ "Parry Rating", PARRY_RATING, 40, 160 }, //avg 88
			{ "Haste Rating", HASTE_RATING, 31, 126 }, //avg 63
			{ "Hit Rating", HIT_RATING, 21, 84 },	//avg 42
			{ "Critical Strike Rating", CRITICAL_STRIKE_RATING, 22, 88 }, //avg 44
			{ "Expertise Rating", EXPERTISE_RATING, 40, 160 },//avg 80
			{ "Resilience Rating", RESILIENCE_RATING, 80, 300 },//avg 138
			{ "Attack Power", ATTACK_POWER, 65, 120 },//avg 65
			{ "Spell Power", DAMAGE_DONE, 100, 200 },//avg 4
			{ "Spell Penetration", SPELL_PENETRATION, 22, 90 },//avg  45
			{ "Mastery Rating", ITEM_MOD_MASTERY_RATING, 140, 300 },//avg 290
			{ "Armor", ITEM_MOD_EXTRA_ARMOR, 70, 300 },//avg 148
			{ "Fire Resist", ITEM_MOD_FIRE_RESISTANCE, 7, 15 },//avg 15
			{ "Frost Resist", ITEM_MOD_FROST_RESISTANCE, 7, 15 },//avg 
			{ "Holy Resist", ITEM_MOD_HOLY_RESISTANCE, 7, 15 },//avg 
			{ "Shadow Resist", ITEM_MOD_SHADOW_RESISTANCE, 7, 15 },//avg 
			{ "Arcane Resist", ITEM_MOD_ARCANE_RESISTANCE, 7, 15 },//avg 
			{ "Nature Resist", ITEM_MOD_NATURE_RESISTANCE, 7, 15 },//avg 
			{ "Health Regen", HEALTH_REGEN, 100, 213 },//avg 213
			{ "", 0, 0, 0 }
		};

		uint32 NewEnchantsCreated = 0;
		for( uint32 j = 0; j < 10 && ListofAttackProcs[j] != NULL; j++ )
			for( uint32 i = 0; i < 1500 && ListofAttackProcs[j][i] != 0; i++ )
				NewEnchantsCreated++;
		for( uint32 j = 0; j < 10 && ListofDefProcs[j] != NULL; j++ )
			for( uint32 i = 0; i < 1500 && ListofDefProcs[j][i] != 0; i++ )
				NewEnchantsCreated++;
		for( uint32 j = 0; j < 1000 && StatModEnchants[j].Max != 0; j++ )
		{
				NewEnchantsCreated += 10;
				NewEnchantsCreated += 10;
		}
		dbcEnchant.ExtendRows( NewEnchantsCreated );


		uint32 SpellRemoved = 0;
		for( uint32 j = 0; j < 10 && ListofAttackProcs[j] != NULL; j++ )
			for( uint32 i = 0; i < 1500 && ListofAttackProcs[j][i] != 0; i++ )
			{
				EnchantEntry * sp = CreateDummyEnchant( EPL_Initialized++ );
				sp->type[ 0 ] = SPELL_ENCHANT_TYPE_CUSTOM_PROC_ANY_DMG_DONE;
				sp->spell[ 0 ] = ListofAttackProcs[j][i];
				sp->min[ 0 ] = 10;
				SpellEntry *spe = dbcSpell.LookupEntryForced( sp->spell[ 0 ] );
				if( spe->eff[0].Effect == SPELL_EFFECT_APPLY_AURA && ( spe->quick_duration_min < 1000 || spe->quick_duration_min > 120000 ) )
				{
					printf("Removed %s - %d - %d\n", spe->Name, spe->Id, spe->quick_duration_min );
					SpellRemoved++;
					spe = dbcSpell.LookupEntryForced( 90522 );
				}
				if( spe->eff[0].EffectBasePoints > 1000 )
					sp->max[ 0 ] = 2 * 60 * 1000 + sqrt( (float)(spe->eff[0].EffectBasePoints) ) * 1000; // proc interval : 1000 -> 31
				else
					sp->max[ 0 ] = 5 * 60 * 1000 ; 
				sp->custom_ScriptCreated = 1;
			}
		for( uint32 j = 0; j < 10 && ListofDefProcs[j] != NULL; j++ )
			for( uint32 i = 0; i < 1500 && ListofDefProcs[j][i] != 0; i++ )
			{
				EnchantEntry * sp = CreateDummyEnchant( EPL_Initialized++ );
				sp->type[ 0 ] = SPELL_ENCHANT_TYPE_CUSTOM_PROC_ANY_DMG_TAKEN;
				sp->spell[ 0 ] = ListofDefProcs[j][i];
				sp->min[ 0 ] = 35;
				SpellEntry *spe = dbcSpell.LookupEntryForced( sp->spell[ 0 ] );
				if( spe->eff[0].Effect == SPELL_EFFECT_APPLY_AURA && ( spe->quick_duration_min < 1000 || spe->quick_duration_min > 120000 ) )
				{
					printf("Removed %s - %d - %d\n", spe->Name, spe->Id, spe->quick_duration_min );
					SpellRemoved++;
					spe = dbcSpell.LookupEntryForced( 90522 );
				}
				if( spe->eff[0].EffectBasePoints > 1000 )
					sp->max[ 0 ] = 2 * 60 * 1000 + sqrt( (float)(spe->eff[0].EffectBasePoints) ) * 1000; // proc interval : 1000 -> 31
				else
					sp->max[ 0 ] = 5 * 60 * 1000 ; 
				sp->custom_ScriptCreated = 1;
			}
		EPL_StatsPosStartAtId = EPL_Initialized;
		for( uint32 j = 0; j < 1000 && StatModEnchants[j].Max != 0; j++ )
			for( uint32 i = 0; i < 10; i++ )
			{
				EnchantEntry * sp = CreateDummyEnchant( EPL_Initialized++ );
				sp->Name = StatModEnchants[j].Name;
				sp->type[ 0 ] = SPELL_ENCHANT_TYPE_CUSTOM_MOD_ITEM_STAT;
				sp->spell[ 0 ] = StatModEnchants[j].Type;
				int32 StatStep = ( StatModEnchants[j].Max - StatModEnchants[j].Min ) / 10;
				sp->min[ 0 ] = sp->max[ 0 ] = StatModEnchants[j].Min + StatStep * i;
				sp->custom_ScriptCreated = 1;
			}
		EPL_StatsNegStartAtId = EPL_Initialized;
		for( uint32 j = 0; j < 1000 && StatModEnchants[j].Max != 0; j++ )
			for( int32 i = 0; i < 10; i++ )
			{
				EnchantEntry * sp = CreateDummyEnchant( EPL_Initialized++ );
				sp->Name = StatModEnchants[j].Name;
				sp->type[ 0 ] = SPELL_ENCHANT_TYPE_CUSTOM_MOD_ITEM_STAT;
				sp->spell[ 0 ] = StatModEnchants[j].Type;
				int32 StatStep = ( StatModEnchants[j].Max - StatModEnchants[j].Min ) / 10;
				sp->min[ 0 ] = sp->max[ 0 ] = -( StatModEnchants[j].Min + StatStep * i );
				sp->custom_ScriptCreated = 1;
			}
		sLog.outDebug( "Created %d new enchants for EPL realm. Had to remove %d", NewEnchantsCreated, SpellRemoved );
	}
#endif
	//generating some visual auras we could use for donation items
	{
		uint32 FreeToUseSpellIds[] = { 1236,1237,1238,1239,1240,1242,1243,1244,1245,1246,1247,1248,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,0 };
		uint32 AurasWeWishToUse[] = { 82631,98619,33245,1463,25750,57524,90854,75493,64765,8609,22663,91289,32182,35409,41451,44755,45345,45417,50161,51126,52982,55462,55824,55838,55840,61162,62478,65745,65950,66001,70871,72132,72523,72679,75391,75809,76133,76579,76679,76792,79318,79459,79460,79462,79463,79464,84982,85696,87780,89354,89824,93777,93780,93786,93789,96263,96423,102259,103151,103913,106080,109756,81700,107082,66719,4321,0 };
		//
		for(uint32 i=0; AurasWeWishToUse[i] != 0 && FreeToUseSpellIds[i] != 0; i++)
		{
			sp = CreateDummySpell( FreeToUseSpellIds[i] );
			sp2 = dbcSpell.LookupEntryForced( AurasWeWishToUse[i] );
			sp->spell_id_client = AurasWeWishToUse[i];
			sp->DurationIndex = 21; //infinit
			sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
			sp->NameHash = sp2->NameHash;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DUMMY;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1 | VISUALAURA_FLAG_VISIBLE_2 | VISUALAURA_FLAG_VISIBLE_3;
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			sp->Attributes |= ATTRIBUTES_PASSIVE;
			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
//			sLog.outDebug( "Assigning %s ( %d ) to spell id %d", sp2->Name, sp2->Id, sp->Id );
//			sLog.outDebug( ".debug forcecast %d", sp->Id );
			ASSERT( FreeToUseSpellIds[i+1] != 0 );
		}
		//special case with periodic cast : 99732
		//move speed while not in combat - Hurry it up, Buddy
		sp2 = CreateDummySpell( 1343 );
		//if( sp != NULL )
		{
			sp2->DurationIndex = 21;
			sp2->eff[0].EffectAmplitude = 30000;
			sp2->c_is_flags2 |= SPELL_FLAG2_IS_TICKING_IMEDIATLY;
			sp->DurationIndex = 21; //infinit
			sp->AttributesExC |= CAN_PERSIST_AND_CASTED_WHILE_DEAD;
			sp->NameHash = sp2->NameHash;
			sp->eff[0].Effect = SPELL_EFFECT_APPLY_AURA;
			sp->eff[0].EffectApplyAuraName = SPELL_AURA_DRINK_NEW;
			sp->eff[0].EffectImplicitTargetA = EFF_TARGET_SELF;
			sp->ForcedAuraVisibleFlags |= VISUALAURA_FLAG_SEND_VALUES | VISUALAURA_FLAG_VISIBLE_1 | VISUALAURA_FLAG_VISIBLE_2 | VISUALAURA_FLAG_VISIBLE_3;
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			sp->Attributes |= ATTRIBUTES_PASSIVE;
			sp->AttributesEx |= ATTRIBUTESEX_VISIBLE;
		} /**/

		//avenging wrath possibilities : 22093,31884,41250,43430,50837,66011,66719
/*
		select id,SpellVisual_1,durationindex from dbc_spell where id in( 31884 );
		select col_0,col_4 from spellvisualdbccsv where col_0 in( 7880 );
		select col_0 from spellvisualdbccsv where col_4 in ( 6839 );
		select id,spellname,description from dbc_spell where SpellVisual_1 in ( 7880,14177,23101,24929 );
		select id from dbc_spell where SpellVisual_1 in ( 7880,14177,23101,24929 );
*/
	}
#ifdef _DEBUG
	//visually check pet talents. Make sure to remove those that are not ok
/*	{
		uint32 PetSkills[] = { 208,209,203,210,211,212,213,214,215,217,218,189,204,205,207,236,251,188,653,654,655,656,758,761,763,767,766,765,764,768,775,780,781,782,783,784,786,785,787,788,805,808,815,811,818,817,824, 0 };
		int SkillIter = 0;
		while( PetSkills[ SkillIter ] != 0 )
		{
			uint32 rowcount = dbcSkillLineSpell.GetNumRows();
			skilllinespell* sls;
			// Pets increase in spell ranks as they level up
			for( uint32 idx = 0; idx < rowcount; ++idx )
			{
				sls = dbcSkillLineSpell.LookupRow( idx );
				if( sls->skillId == PetSkills[ SkillIter ] 
					&& sls->learnOnGetSkill == 2
					) 
				{
					SpellEntry* sp1 = dbcSpell.LookupEntryForced( sls->spellId );
					SpellEntry* sp2 = dbcSpell.LookupEntryForced( sls->forward_spellid );
					if( sp1 != NULL //outdated data ?
						&& sp1->talent_entry[0] == NULL //do not learn talents 
						&& sp1->SpellLevel.baseLevel <= 85  //we should be able to have this spell
						&& ( sp2 == NULL //last or only rank
							|| sp2->SpellLevel.baseLevel>85 ) // next level is not reachable
		//				&& (sp1->RecoveryTime != 0 || sp1->CategoryRecoveryTime != 0 )	//seems to be always 0 :S
						&& strstr( sp1->Name, "DND" ) == NULL
						&& strstr( sp1->Name, "Scaling" ) == NULL
						)
					{
						printf( "%d,", sp1->Id );
					}
				}
			}
				SkillIter++;
		}
	}
/*	// print talent specific spell to be able to check in DB if we have fucked up values
	{
		SetSpellTalentLines();
		for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
		{
			SpellEntry * sp = dbcSpell.LookupRow(x);
			if( sp->spell_learn_is_linked_to_talent == true )
				printf( "%d,",sp->Id );
		}
		printf("\nDone");
	}
	//did we set up proc flags correctly ? Would they even proc ?
/*	for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
	{
		SpellEntry * sp = dbcSpell.LookupRow(x);
		if( sp->AttackPowerToSpellDamageCoeff > 0.0f )
		{
			for( uint32 i=0;i<3;i++)
				if( sp->AP_spell_bonus_base[i] != 0 || sp->AP_spell_bonus_total[i] != 0 )
					printf( "Double adding AP bonus to spell %d - %s\n",sp->Id, sp->Name );
		}
	} */
	// print talent specific spell to be able to check in DB if we have fucked up values
/*	{
		SetSpellTalentLines();
		for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
		{
			SpellEntry * sp = dbcSpell.LookupRow(x);
			if( sp->spell_learn_is_linked_to_talent == true || sp->talent_entry_assoc_counter )
				printf( "replace into talentspells values( %d);\n",sp->Id );
		}
	}/**/

	//did we set up proc flags correctly ? Would they even proc ?
	for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
	{
		SpellEntry * sp = dbcSpell.LookupRow(x);

		for ( uint32 i = 0; i < MAX_SPELL_EFFECT_COUNT ; ++i )
		{
			if( sp->eff[i].Effect == SPELL_EFFECT_APPLY_AREA_AURA || sp->eff[i].Effect == SPELL_EFFECT_APPLY_AREA_AURA2 || sp->eff[i].Effect == SPELL_EFFECT_ADD_FARSIGHT )
			{
				sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
				break;
			}
		}
		//food spells mostly
		if( sp->AuraInterruptFlags & AURA_INTERRUPT_ON_STAND_UP )
			sp->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;

		if( sp->chained_cast )
		{
			if( sp->c_is_flags & SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT )
				sp->chained_cast->c_is_flags |= SPELL_FLAG_IS_NOT_SAVED_ON_LOGOUT;
			if( sp->c_is_flags & SPELL_FLAG_IS_EXPIREING_WITH_PET )
				sp->chained_cast->c_is_flags |= SPELL_FLAG_IS_EXPIREING_WITH_PET;
		}

		if( sp->ProcOnNameHash[0] != 0 )
			for( uint32 i=0;i<3;i++)
			{
				uint32 HasRemove = ( sp->procFlags & PROC_ON_AURA_REMOVE_EVENT );
				uint32 HasApply =  ( sp->procFlags & PROC_EVENT_FILTER_FLAGS & ~PROC_ON_AURA_REMOVE_EVENT );
				if( HasApply && HasRemove && sp->proc_interval != 0 )
					printf("Warning Macro aura remove bug might work here '%s'. Try to make proc_interval 0 \n", sp->Name );
				if( (sp->procFlags & ( PROC_ON_RANGED_ATTACK_EVENT | PROC_ON_MELEE_ATTACK_EVENT | PROC_ON_SPELL_HIT_EVENT)) != 0
					&& sp->ProcOnNameHash[i] != 0 
					&& (sp->procFlags & ( PROC_ON_CAST_SPELL_EVENT) ) == 0
					)
					for(uint32 y=0; y<dbcSpell.GetNumRows(); y++)
					{
						SpellEntry *sp2 = dbcSpell.LookupRow(y);
						if( sp->ProcOnNameHash[i] != sp2->NameHash )
							continue;
						uint32 aproc = PROC_ON_SPELL_HIT_EVENT;
						if( sp2->quick_tickcount > 1 )
						{
							switch( sp2->GetSpellDMGType() )
							{
								case SPELL_DMG_TYPE_RANGED:	
										aproc |= PROC_ON_RANGED_ATTACK_EVENT;
									break;
								case SPELL_DMG_TYPE_MELEE:
										aproc |= PROC_ON_MELEE_ATTACK_EVENT;
									break;
								case SPELL_DMG_TYPE_MAGIC:
								default:
										aproc |= PROC_ON_SPELL_HIT_EVENT;
									break;
							}
						}
						if( ( aproc & PROC_ON_MELEE_ATTACK_EVENT ) == 0 )
							for( uint32 k=0;k<3;k++)
								if( sp2->eff[k].Effect == SPELL_EFFECT_DUMMYMELEE || sp2->eff[k].Effect == SPELL_EFFECT_WEAPON_DAMAGE || sp2->eff[k].Effect == SPELL_EFFECT_WEAPON_DAMAGE_NOSCHOOL
									 || sp2->eff[k].Effect == SPELL_EFFECT_WEAPON_PERCENT_DAMAGE )
										aproc |= PROC_ON_MELEE_ATTACK_EVENT;
						if( ( aproc & sp->procFlags ) == 0 )
							printf("Bad proc flags on spell %d - %s\n",sp->Id, sp->Name );
					}
			}
	}/**/
	//after we set all group flags we can set only 1 bit to mark the check of all values
	for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
	{
		SpellEntry * sp = dbcSpell.LookupRow(x);
		if( ( sp->procFlags & ( PROC_ON_NO_CRIT | PROC_ON_CRIT ) ) == ( PROC_ON_NO_CRIT | PROC_ON_CRIT ) )
			printf( "Spell %d - %s will never proc. Maybe remove both filters ? \n", sp->Id, sp->Name );
		if( ( sp->procFlags & ( PROC_ON_NOT_VICTIM | PROC_ON_VICTIM ) ) == ( PROC_ON_NOT_VICTIM | PROC_ON_VICTIM ) )
			printf( "Spell %d - %s will never proc. Maybe remove both filters ? \n", sp->Id, sp->Name );
		if( ( sp->procFlags & ( PROC_ON_NO_DOT | PROC_ON_DOT ) ) == ( PROC_ON_NO_DOT | PROC_ON_DOT ) )
			printf( "Spell %d - %s will never proc. Maybe remove both filters ? \n", sp->Id, sp->Name );
	}
#endif
	//after we set all group flags we can set only 1 bit to mark the check of all values
	for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
	{
		SpellEntry * sp = dbcSpell.LookupRow(x);

		//don't ask me about these 2 :P. Just random fix in src
/*		if( sp->spellIconID==457) 
			sp->EffectItemType[0]=1;
		if( sp->spellIconID==86) 
			sp->EffectItemType[0]=256;*/

		if( sp->GetSpellGroupType()[0] || sp->GetSpellGroupType()[1] || sp->GetSpellGroupType()[2] )
			sp->c_is_flags |= SPELL_FLAG_IS_REQUIRING_SM_MOD;

		uint32 AcceptableSkillSpells[]={SKILL_RIDING,SKILL_FIRST_AID,SKILL_BLACKSMITHING,SKILL_LEATHERWORKING,SKILL_ALCHEMY,SKILL_HERBALISM,SKILL_COOKING,SKILL_MINING,SKILL_TAILORING,SKILL_ENGINEERING,SKILL_ENCHANTING,SKILL_FISHING,SKILL_SKINNING,SKILL_LOCKPICKING,SKILL_JEWELCRAFTING,SKILL_INSCRIPTION,SKILL_RUNEFORGING,SKILL_MOUNTS,SKILL_COMPANIONS,SKILL_ARCHAEOLOGY,SKILL_GLYPHS_ALL,SKILL_GUILD_PERKS_ALL,0};
		for( int i=0;AcceptableSkillSpells[i]!=0;i++)
			if( sp->spell_skilline[0] == AcceptableSkillSpells[i] )
			{
				sp->c_is_flags2 |= SPELL_FLAG2_IS_OK_TO_NO_RESET;
				break;
			}
	}

	for(uint32 x=0; x < dbcGuildPerks.GetNumRows(); x++)
	{
		GuildPerkSpellEntry *gp = dbcGuildPerks.LookupRow(x);
		SpellEntry * sp = dbcSpell.LookupEntryForced( gp->spell_id );
		if( sp )
			sp->c_is_flags2 |= SPELL_FLAG2_IS_GUILD_PERK;
	}
	for(uint32 x=0; x < dbcItemExtendedCost.GetNumRows(); x++)
	{
		ItemExtendedCostEntry *ex = dbcItemExtendedCost.LookupRow(x);
		if( ex )
		{
			for(uint32 i=0;i<5;i++)
				if( ex->currency[i] != 0 )
				{
					//there just got to be a formula for this. Some prices are scaled. Hardcoded fix ? :(
					if( ex->currency[i] == CURRENCY_JUSTICE_POINT )
						 ex->currency_count[i] = ex->currency_count[i] / 100;
					else if( ex->currency[i] == CURRENCY_HONOR_POINT )
						 ex->currency_count[i] = ex->currency_count[i] / 100;
					else if( ex->currency[i] == CURRENCY_VALOR_POINT )
						 ex->currency_count[i] = ex->currency_count[i] / 100;
					else if( ex->currency[i] == CURRENCY_CONQUEST_POINT )
						 ex->currency_count[i] = ex->currency_count[i] / 100;
					//though this is bad, you should check if you are actually using this extended cost at any vendor. Blizz leaves depracated data in DBC
					if( ex->currency_count[i] <= 0 )
						sLog.outDebug("!!!Warning, Extended cost %d is 0 though there is a type", ex->costid );
				}
		}
	}

	//this faction is required for guilds, but blizz sent some temp dev value to us. Lovely from him
/*	FactionDBC *f = dbcFaction.LookupEntryForced( PLAYER_GUILD_FACTION_ID );
	//if( f )
	{
		f->RaceMask[0] = 65535;	//everyone can have it
		f->RaceMask[1] = f->RaceMask[2] = f->RaceMask[3] = 0;	//do we need to even know about these ?
		f->ClassMask[0] = 65535;	//everyone can have it
		f->ClassMask[1] = f->ClassMask[2] = f->ClassMask[3] = 0;	//do we need to even know about these ?
		f->repFlags[0] = FACTION_FLAG_VISIBLE;	//everyone can have it
		f->repFlags[1] = f->repFlags[2] = f->repFlags[3] = 0;	//do we need to even know about these ?
	} /**/

	Log.Notice("World", "Setting Spell TalentLines and Spec Specific Spells....");
	SetSpellTalentLines();

	//generate namehashes. This is used only rarely :P
/*	std::map<uint32,uint32> tempstore;
	std::map<std::string,uint32> collisionstore;
	tempstore.clear();
	//first check for define collisions
	for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
	{
		SpellEntry * sp = dbcSpell.LookupRow(x);

		//print stuff only once;
		if( tempstore[sp->NameHash] )
			continue;
		tempstore[ sp->NameHash ] = 1;

		//we generate a name that is uasable in C++ as define
		char tempname[500];
		strcpy(tempname,sp->Name);
		uint32 len=strlen(sp->Name);
		for(uint32 i=0;i<len;i++)
		{
            tempname[i] = toupper(tempname[i]);
			if( !((tempname[i] >= 'A' && tempname[i] <= 'Z') || (tempname[i] >= '0' && tempname[i] <= '9'))	)
				tempname[i] = '_';
		}

		if( collisionstore[ tempname ] == 1 )
			collisionstore[ tempname ] = 2;
		if( collisionstore[ tempname ] )
			continue;
		collisionstore[ tempname ] = 1;
	}
	tempstore.clear();
	for(uint32 x=0; x < dbcSpell.GetNumRows(); x++)
	{
		SpellEntry * sp = dbcSpell.LookupRow(x);

		//print stuff only once;
		if( tempstore[sp->NameHash] )
			continue;
		tempstore[ sp->NameHash ] = 1;

		//we generate a name that is uasable in C++ as define
		char tempname[500];
		strcpy(tempname,sp->Name);
		uint32 len=strlen(sp->Name);
		for(uint32 i=0;i<len;i++)
		{
            tempname[i] = toupper(tempname[i]);
			if( !((tempname[i] >= 'A' && tempname[i] <= 'Z') || (tempname[i] >= '0' && tempname[i] <= '9'))	)
				tempname[i] = '_';
		}
		if( collisionstore[ tempname ] == 2 )
		{
			char tempname2[500];
			sprintf(tempname2,"%s_%u",tempname,sp->Id);
			printf("#define SPELL_HASH_%-70s 0x%08X\n",tempname2,sp->NameHash);
		}
		else
			printf("#define SPELL_HASH_%-70s 0x%08X\n",tempname,sp->NameHash);
	}/**/
#include "../arcemu-customs/custom_procflag_sets.cpp"
}

void ApplyItemEnchantFixes()
{
	uint32 Next_safe_group_id = dbcItemLimitCategory.LookupRow( dbcItemLimitCategory.GetNumRows() - 1 )->CategoryId + 1;
	//make sure to have enchantment application limit for some gems
	for(uint32 x=0; x < dbcEnchant.GetNumRows(); x++)
	{
		EnchantEntry * ee = dbcEnchant.LookupRow(x);
		if( ee->GemEntry )
		{
			ItemPrototype *ip = ItemPrototypeStorage.LookupEntry( ee->GemEntry );
			if( !ip )
				continue;
			if( ( ip->Flags & ITEM_FLAG_UNIQUE_EQUIP )
				|| ( ip->Flags & ITEM_FLAG_EVENT_REQ )		//seems like for gems only this makes then unique. I wonder if it is true for all ?
				|| ip->Unique != 0
				)
			{
				ee->custom_enchant_group = Next_safe_group_id++;
				ee->custom_enchant_maxstack = 1;
			}
			if( ip->ItemLimitCategory )
			{
				ItemLimitCategory *il = dbcItemLimitCategory.LookupEntry( ip->ItemLimitCategory );
				if( il )
				{
					ee->custom_enchant_group = ip->ItemLimitCategory;
					ee->custom_enchant_maxstack = il->MaxStack;
				}
			}
			ee->custom_GearScore = ip->ItemLevel;
		}
		if( ee->custom_GearScore == 0 )
		{
			//try to get spell level
			SpellEntry *sp;
			for(uint32 kk=0;kk<MAX_SPELL_EFFECT_COUNT;kk++)
			{
				sp = dbcSpell.LookupEntryForced( ee->spell[kk] );
				if( sp )
				{
					ee->custom_GearScore = MAX( ee->custom_GearScore, MAX( 271, sp->SpellLevel.spellLevel * 3 ) );
//					ee->custom_GearScore = MAX( (int32)ee->custom_GearScore, sp->eff[0].EffectBasePoints );
				}
			}
		}
		if( ee->custom_GearScore == 0 )
			ee->custom_GearScore = 10;

		for(uint32 tei=0;tei<3;tei++)
		{
			if( ee->type[ tei ] == SPELL_ENCHANT_TYPE_TRIGGER_SPELL_ON_MELEE_HIT )
			{
				SpellEntry* sp = dbcSpell.LookupEntryForced( ee->spell[ tei ] );
				if( !sp )
					continue;
				for(uint32 ti = 0;ti<MAX_SPELL_EFFECT_COUNT; ti++)
				{
					if( sp->eff[ti].EffectSpellPowerCoef == SPELL_EFFECT_MAGIC_UNDECIDED_SPELL_POWER_COEFF )
						sp->eff[ti].EffectSpellPowerCoef = ITEM_SPELL_DEFAULT_SP_BENEFIT_COEF;	
				}
				//only if there was no manual set for this spell
				if( sp->proc_interval == DEFAULT_SPELL_PROC_INTERVAL || sp->proc_interval < 500 )
					sp->proc_interval = DEFAULT_SPELL_ITEM_PROC_INTERVAL;
			}
			else
			{
				SpellEntry* sp = dbcSpell.LookupEntryForced( ee->spell[ tei ] );
				if( !sp )
					continue;
				for(uint32 ti = 0;ti<MAX_SPELL_EFFECT_COUNT; ti++)
					if( sp->eff[ ti ].EffectTriggerSpell )
					{
						SpellEntry* sp2 = dbcSpell.LookupEntryForced( sp->eff[ ti ].EffectTriggerSpell );
						if( !sp2 )
							continue;
						if( sp2->eff[ti].EffectSpellPowerCoef == SPELL_EFFECT_MAGIC_UNDECIDED_SPELL_POWER_COEFF )
							sp2->eff[ti].EffectSpellPowerCoef = ITEM_SPELL_DEFAULT_SP_BENEFIT_COEF;	
						//only if there was no manual set for this spell
						if( sp2->proc_interval == DEFAULT_SPELL_PROC_INTERVAL || sp2->proc_interval < 500 )
							sp2->proc_interval = DEFAULT_SPELL_ITEM_PROC_INTERVAL;
					}
			}
		}
	}
	//unique gems should also be applied only once
}

void ApplyAreaFixes()
{
	for(uint32 x=0; x < dbcArea.GetNumRows(); x++)
	{
		AreaTable *ae = dbcArea.LookupRow(x);

		//make sure to set arena flags 
		if( strstr(ae->name,"Arena"))
			ae->AreaFlags |= AREA_FLAG_ARENA;
		else
			ae->AreaFlags &= ~AREA_FLAG_ARENA;	//make sure we do not trigger FFA flags anywhere else

		//no pvp in ebony hold please
/*		if( ae->mapId == 609 || ae->AreaId == 4544)
			ae->category = AREAC_SANCTUARY;
		// no pvp in event area please
		else if (ae->mapId == 169)
			ae->category = AREAC_SANCTUARY;
*/		
	}
	//gurubashi arena is an open battle ring - zone 5287
	AreaTable *ae;
	ae = dbcArea.LookupEntry( 2177 );	//the ring
	if( ae )
		ae->AreaFlags |= AREA_FLAG_ARENA;
	ae = dbcArea.LookupEntry( 1741 );	//preparation ring
	if( ae )
		ae->AreaFlags &= ~AREA_FLAG_ARENA;
	//circle of blood arena has missing "arena" in name
	ae = dbcArea.LookupEntry( 3775 );	//the ring
	if( ae )
		ae->AreaFlags |= AREA_FLAG_ARENA;
	//maul arena has missing "arena" in name
	ae = dbcArea.LookupEntry( 3217 );	//the ring
	if( ae )
		ae->AreaFlags |= AREA_FLAG_ARENA;
	//Dalaran sewers "arena" in name
	ae = dbcArea.LookupEntry( 4378 );	//the ring
	if( ae )
		ae->AreaFlags |= AREA_FLAG_ARENA;

/*
	for(uint32 x=0; x < dbcWorldMapZoneStore.GetNumRows(); x++)
	{
		WorldMapAreaEntry *ae = dbcWorldMapZoneStore.LookupRow(x);
		//dalaran has missing values
		if( ae->zone_id == 4395 )
		{
			ae->min_x = 5567;
			ae->max_x = 6040;
			ae->min_y = 410;
			ae->max_y = 806;
		}
	}
	*/
}

void RandomizeEPLItem( Item *it, float ChanceModPos, float ChanceModNeg )
{
#ifdef EPL_REALM_MOD
	if( sWorld.getIntRate( INTRATE_RANDOMIZEITEMS1 ) == 0 )
		return;
	if( it->GetProto()->InventoryType != INVTYPE_NON_EQUIP && it->GetProto()->InventoryType != INVTYPE_BAG && it->GetProto()->InventoryType != INVTYPE_AMMO && it->GetProto()->InventoryType != INVTYPE_QUIVER )
	{
		float ChanceModItemLevel = MAX( 0.1f, (float)it->GetProto()->ItemLevel / 435.0f );
		float ChanceModItemRarity = MAX( 0.1f, (float)it->GetProto()->Quality / 4.0f );
		float ChanceMod = ChanceModItemLevel * ChanceModItemRarity;
		ChanceModPos = MAX( 1.0f, ChanceModPos );

		uint32 SlotsTaken[5] = {0,0,0,0,0};
		float RollChances[ 5 ] = { 100, 10, 5, 5, 5 };
		for( uint32 i=0; i < 5; i++ )
			if( SlotsTaken[i] == 0 && RandChance( ChanceMod * RollChances[ i ] + ChanceModPos ) )
			{
				uint32 SelectedEntry = EPL_SpellsStartAtId + RandomUInt() % ( EPL_StatsPosStartAtId - EPL_SpellsStartAtId );
				EnchantEntry * Enchantment = dbcEnchant.LookupEntryForced( SelectedEntry );
				if(!Enchantment) 
				{ 
					return;
				}

				it->RemoveProfessionEnchant( ITEM_ENCHANT_SLOT_RANDOM_PROP0 + i );
				int32 Slot = it->AddEnchantment( Enchantment, 0, true, true, false, ITEM_ENCHANT_SLOT_RANDOM_PROP0 + i );
				SlotsTaken[i] = 1;
			}
		//also add stats
		float RollChances2[ 5 ] = { 1, 100, 10, 5, 5 };
		for( uint32 i=0; i < 5; i++ )
			if( SlotsTaken[i] == 0 && RandChance( ChanceMod * RollChances2[ i ] + ChanceModPos ) )
			{
				uint32 SelectedEntry = EPL_StatsPosStartAtId + RandomUInt() % ( EPL_StatsNegStartAtId - EPL_StatsPosStartAtId );
				EnchantEntry * Enchantment = dbcEnchant.LookupEntryForced( SelectedEntry );
				if(!Enchantment) 
				{ 
					return;
				}

				it->RemoveProfessionEnchant( ITEM_ENCHANT_SLOT_RANDOM_PROP0 + i );
				int32 Slot = it->AddEnchantment( Enchantment, 0, true, true, false, ITEM_ENCHANT_SLOT_RANDOM_PROP0 + i );
				SlotsTaken[i] = 1;
			}
		//also remove stats
		float RollChances3[ 5 ] = { 1, 1, 50, 10, 5 };
		for( uint32 i=0; i < 5; i++ )
			if( SlotsTaken[i] == 0 && RandChance( MAX( 1.0f, ChanceMod * RollChances3[ i ] + ChanceModNeg ) ) )
			{
				uint32 SelectedEntry = EPL_StatsNegStartAtId + RandomUInt() % ( EPL_Initialized - EPL_StatsNegStartAtId );
				EnchantEntry * Enchantment = dbcEnchant.LookupEntryForced( SelectedEntry );
				if(!Enchantment) 
				{ 
					return;
				}

				it->RemoveProfessionEnchant( ITEM_ENCHANT_SLOT_RANDOM_PROP0 + i );
				int32 Slot = it->AddEnchantment( Enchantment, 0, true, true, false, ITEM_ENCHANT_SLOT_RANDOM_PROP0 + i );
				SlotsTaken[i] = 1;
			}
	}
#endif
}